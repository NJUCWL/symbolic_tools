/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 29 07:10:48 GMT 2021
 */

package org.apache.bcel.generic;

import static org.junit.Assert.fail;
import static shaded.org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static shaded.org.evosuite.shaded.org.mockito.Mockito.mock;

import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.junit.Test;

import shaded.org.evosuite.runtime.ViolatedAssumptionAnswer;

public class ConstantPoolGen_MergedTest {

    //Covered goal: org.apache.bcel.generic.ConstantPoolGen.addMethodref(Lorg/apache/bcel/generic/MethodGen;)I: path condition EvoSuiteWrapper_0 (id = 0)

    @Test(timeout = 4000)
    public void test0()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        MethodGen methodGen0 = mock(MethodGen.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(methodGen0).getName();
        doReturn((String) null).when(methodGen0).getClassName();
        doReturn((String) null).when(methodGen0).getSignature();
        // Undeclared exception!
        try {
            constantPoolGen0.addMethodref(methodGen0);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // bytes must not be null!
            //
        }
    }

    @Test(timeout = 4000)
    public void test1()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        MethodGen methodGen0 = mock(MethodGen.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(methodGen0).getName();
        doReturn((String) null).when(methodGen0).getClassName();
        doReturn((String) null).when(methodGen0).getSignature();
        constantPoolGen0.lookupMethodref(methodGen0);
    }

    @Test(timeout = 4000)
    public void test2()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        int int0 = 2039;
        constantPoolGen0.addLong(int0);
    }

    @Test(timeout = 4000)
    public void test3()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
        String string0 = "lLkldHs";
        String string1 = "brE";
        constantPoolGen0.lookupInterfaceMethodref(string0, string0, string1);
        constantPoolGen0.getConstantPool();
        int int0 = (-2127);
        constantPoolGen0.index = int0;
        ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
        String string2 = "";
        String string3 = "#9xZUEYbf!.!+";
        constantPoolGen1.addFieldref(string0, string2, string3);
        int int1 = constantPoolGen1.addClass(string2);
        constantPoolGen1.getConstant(int1);
        // Undeclared exception!
        try {
            constantPoolGen0.addInteger(int1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // -2127
            //
        }
    }

    @Test(timeout = 4000)
    public void test4()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        long long0 = 0L;
        constantPoolGen0.addLong(long0);
    }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "";
        constantPoolGen0.addString(string0);
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        float float0 = 179.0F;
        constantPoolGen0.addFloat(float0);
    }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = ":C9AZ[81F";
        constantPoolGen0.lookupFieldref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test8()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        ArrayType arrayType0 = mock(ArrayType.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(arrayType0).getSignature();
        // Undeclared exception!
        try {
            constantPoolGen0.addArrayClass(arrayType0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test9()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "x*=S;L0";
        constantPoolGen0.addNameAndType(string0, string0);
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        double double0 = (-1.0);
        int int0 = constantPoolGen0.addDouble(double0);
        constantPoolGen0.addInteger(int0);
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        constantPoolGen0.getSize();
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "";
        constantPoolGen0.addString(string0);
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "$&(e^`$o\\]al^p\"!C";
        constantPoolGen0.addInterfaceMethodref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        float float0 = 0.0F;
        constantPoolGen0.lookupDouble(float0);
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = null;
        String string1 = "hBt/8/|N!+S|X<";
        // Undeclared exception!
        try {
            constantPoolGen0.addInterfaceMethodref(string1, string1, string0);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // bytes must not be null!
            //
        }
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "<init>([Lorg/apache/bcel/classfile/Constant;)V";
        constantPoolGen0.addMethodref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test17()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        double double0 = 0.0;
        int int0 = constantPoolGen0.addDouble(double0);
        constantPoolGen0.addLong(int0);
    }

    @Test(timeout = 4000)
    public void test18()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "--e,wo&i8'?>NtmBLw";
        constantPoolGen0.addFieldref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test19()  throws Throwable  {
        Constant[] constantArray0 = new Constant[1];
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "";
        int int0 = constantPoolGen0.addNameAndType(string0, string0);
        constantPoolGen0.setConstant(int0, constantArray0[0]);
    }

    @Test(timeout = 4000)
    public void test20()  throws Throwable  {
        Constant[] constantArray0 = new Constant[0];
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
        int int0 = (-261);
        constantPoolGen0.addInteger(int0);
    }

    @Test(timeout = 4000)
    public void test21()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "=^8$I69aW!'U]bR70-|";
        int int0 = constantPoolGen0.addFieldref(string0, string0, string0);
        constantPoolGen0.addDouble(int0);
    }

    @Test(timeout = 4000)
    public void test22()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "addNameAndType(Ljava/lang/String;Ljava/lang/String;)I";
        constantPoolGen0.addFieldref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test23()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        String string0 = "";
        constantPoolGen0.addInterfaceMethodref(string0, string0, string0);
    }

    @Test(timeout = 4000)
    public void test24()  throws Throwable  {
        ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
        MethodGen methodGen0 = mock(MethodGen.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(methodGen0).getName();
        doReturn((String) null).when(methodGen0).getClassName();
        doReturn((String) null).when(methodGen0).getSignature();
        constantPoolGen0.lookupInterfaceMethodref(methodGen0);
    }
}
