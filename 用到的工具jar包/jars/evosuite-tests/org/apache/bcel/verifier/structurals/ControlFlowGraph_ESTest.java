/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:00:16 GMT 2021
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ControlFlowGraph;
import org.apache.bcel.verifier.structurals.InstructionContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControlFlowGraph_ESTest extends ControlFlowGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, "arg", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      InstructionContext[] instructionContextArray0 = controlFlowGraph0.contextsOf(instructionHandleArray0);
      assertEquals(0, instructionContextArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Asking for successors of a RET in dead code?!");
      DLOAD dLOAD0 = new DLOAD(0);
      InstructionList instructionList0 = new InstructionList(dLOAD0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, "Asking for successors of a RET in dead code?!", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      // Undeclared exception!
      try { 
        controlFlowGraph0.isDead((InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControlFlowGraph controlFlowGraph0 = null;
      try {
        controlFlowGraph0 = new ControlFlowGraph((MethodGen) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-1889), objectType0, objectType0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = null;
      try {
        controlFlowGraph0 = new ControlFlowGraph(methodGen0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControlFlowGraph controlFlowGraph0 = null;
      try {
        controlFlowGraph0 = new ControlFlowGraph((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("K");
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, "K", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = null;
      try {
        controlFlowGraph0 = new ControlFlowGraph(methodGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, "arg", "", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("_)", constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen1);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      // Undeclared exception!
      try { 
        controlFlowGraph0.contextOf(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: InstructionContext requested for an InstructionHandle that's not known!
         //
         verifyException("org.apache.bcel.verifier.structurals.ControlFlowGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[8];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-110), objectType0, objectType0.NO_ARGS, stringArray0, "XVL39", "XVL39", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, "arg", "", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("_)", constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen1);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      boolean boolean0 = controlFlowGraph0.isDead(instructionHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Asking for successors of a RET in dead code?!");
      DLOAD dLOAD0 = new DLOAD(55);
      InstructionList instructionList0 = new InstructionList(dLOAD0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(55, objectType0, objectType0.NO_ARGS, (String[]) null, "Asking for successors of a RET in dead code?!", "Asking for successors of a RET in dead code?!", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      boolean boolean0 = controlFlowGraph0.isDead(instructionHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, "arg", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandle0;
      InstructionContext[] instructionContextArray0 = controlFlowGraph0.contextsOf(instructionHandleArray0);
      assertEquals(2, instructionContextArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Asking for successors of a RET in dead code?!");
      DLOAD dLOAD0 = new DLOAD(55);
      InstructionList instructionList0 = new InstructionList(dLOAD0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(55, objectType0, objectType0.NO_ARGS, (String[]) null, "Asking for successors of a RET in dead code?!", "Asking for successors of a RET in dead code?!", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      // Undeclared exception!
      try { 
        controlFlowGraph0.contextsOf(instructionHandleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: InstructionContext requested for an InstructionHandle that's not known!
         //
         verifyException("org.apache.bcel.verifier.structurals.ControlFlowGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, stringArray0[0], "arg", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      InstructionContext instructionContext0 = controlFlowGraph0.contextOf(instructionHandle0);
      assertEquals(0, instructionContext0.getTag());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Asking for successors of a RET in dead code?!");
      DLOAD dLOAD0 = new DLOAD(55);
      InstructionList instructionList0 = new InstructionList(dLOAD0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(55, objectType0, objectType0.NO_ARGS, (String[]) null, "Asking for successors of a RET in dead code?!", "Asking for successors of a RET in dead code?!", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      InstructionContext[] instructionContextArray0 = controlFlowGraph0.getInstructionContexts();
      assertEquals(1, instructionContextArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      String[] stringArray0 = new String[3];
      POP2 pOP2_0 = new POP2();
      InstructionList instructionList0 = new InstructionList(pOP2_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, (Type[]) null, stringArray0, "arg", "", instructionList0, constantPoolGen0);
      ControlFlowGraph controlFlowGraph0 = new ControlFlowGraph(methodGen0);
      // Undeclared exception!
      try { 
        controlFlowGraph0.contextsOf((InstructionHandle[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ControlFlowGraph", e);
      }
  }
}
