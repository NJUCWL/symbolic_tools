/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:57:47 GMT 2021
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariables_ESTest extends LocalVariables_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(127);
      Type type0 = Type.getReturnType("Could not load all the super classes of '");
      // Undeclared exception!
      try { 
        localVariables0.set(754, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'char'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(145);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      localVariables0.clone();
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.maxLocals();
      localVariables0.merge(localVariables2);
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables3.getClone();
      localVariables2.toString();
      localVariables3.getClone();
      localVariables0.clone();
      localVariables0.clone();
      LocalVariables localVariables4 = localVariables2.getClone();
      localVariables2.clone();
      localVariables0.toString();
      LocalVariables localVariables5 = localVariables4.getClone();
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        localVariables5.set(0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'short'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      localVariables0.hashCode();
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(754);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.toString();
      LocalVariables localVariables3 = new LocalVariables(0);
      localVariables2.equals(localVariables3);
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(3120);
      localVariables0.toString();
      localVariables0.clone();
      localVariables0.clone();
      // Undeclared exception!
      localVariables0.getClone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 145;
      LocalVariables localVariables0 = new LocalVariables(145);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      localVariables0.clone();
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.maxLocals();
      localVariables0.merge(localVariables2);
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables3.getClone();
      localVariables2.toString();
      localVariables3.getClone();
      localVariables0.clone();
      localVariables0.clone();
      LocalVariables localVariables4 = localVariables2.getClone();
      localVariables2.clone();
      localVariables0.toString();
      LocalVariables localVariables5 = localVariables4.getClone();
      BasicType basicType0 = Type.BYTE;
      // Undeclared exception!
      try { 
        localVariables5.set(0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'byte'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2657;
      LocalVariables localVariables0 = new LocalVariables(2657);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = new LocalVariables(2657);
      // Undeclared exception!
      localVariables1.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(2398);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      // Undeclared exception!
      localVariables2.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.clone();
      int int0 = 0;
      LocalVariables localVariables1 = new LocalVariables(0);
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      localVariables0.hashCode();
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(754);
      localVariables1.getClone();
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1280;
      LocalVariables localVariables0 = new LocalVariables(1280);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      int int1 = 167;
      ObjectType objectType0 = ObjectType.getInstance("p#n=");
      localVariables1.set(167, objectType0);
      localVariables2.set(167, objectType0);
      Frame.getThis();
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("org.apache.bcel.verifier.structurals.LocalVariables");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.verifier.structurals.LocalVariables
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1);
      assertEquals(1, localVariables0.maxLocals());
      
      int int0 = localVariables0.maxLocals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      String string0 = localVariables1.toString();
      assertEquals("0: <unknown object>\n", string0);
      
      ObjectType objectType0 = new ObjectType("0: <unknown object>\n");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      localVariables1.initializeObject(uninitializedObjectType0);
      Class<LocalVariables> class0 = LocalVariables.class;
      Type.getType(class0);
      Object object0 = localVariables0.clone();
      boolean boolean0 = localVariables1.equals(object0);
      assertTrue(boolean0);
      
      localVariables0.merge(localVariables1);
      localVariables1.maxLocals();
      localVariables0.initializeObject(uninitializedObjectType0);
      assertNotSame(localVariables0, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(2048);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame.getThis();
      Class<Object> class0 = Object.class;
      Type.getType(class0);
      localVariables1.initializeObject((UninitializedObjectType) null);
      localVariables0.equals(localVariables1);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.getClone();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      int int1 = Integer.MIN_VALUE;
      localVariables0.merge(localVariables1);
      int int2 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      localVariables1.clone();
      // Undeclared exception!
      try { 
        localVariables0.set(0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'boolean'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(133);
      Frame.getThis();
      localVariables0.initializeObject((UninitializedObjectType) null);
      assertEquals(133, localVariables0.maxLocals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(15);
      LocalVariables localVariables1 = localVariables0.getClone();
      String string0 = localVariables1.toString();
      assertNotSame(localVariables1, localVariables0);
      assertEquals("0: <unknown object>\n1: <unknown object>\n2: <unknown object>\n3: <unknown object>\n4: <unknown object>\n5: <unknown object>\n6: <unknown object>\n7: <unknown object>\n8: <unknown object>\n9: <unknown object>\n10: <unknown object>\n11: <unknown object>\n12: <unknown object>\n13: <unknown object>\n14: <unknown object>\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1598);
      // Undeclared exception!
      try { 
        localVariables0.merge((LocalVariables) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.maxLocals();
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        localVariables0.set(0, type0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      localVariables0.hashCode();
      assertNotSame(localVariables0, localVariables1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3953;
      LocalVariables localVariables0 = new LocalVariables(3953);
      localVariables0.toString();
      // Undeclared exception!
      try { 
        localVariables0.get(3953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3953
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(2205);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(784);
      LocalVariables localVariables1 = localVariables0.getClone();
      boolean boolean0 = localVariables1.equals("v/EJNY+mp'B2Dd");
      assertFalse(boolean0);
      
      localVariables0.get(0);
      assertNotSame(localVariables0, localVariables1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      Object object0 = localVariables0.clone();
      assertNotSame(object0, localVariables1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1292;
      LocalVariables localVariables0 = new LocalVariables(1292);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      // Undeclared exception!
      localVariables1.merge(localVariables0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1584);
      LocalVariables localVariables0 = null;
      try {
        localVariables0 = new LocalVariables((-1584));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      assertNotSame(localVariables1, localVariables0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(91);
      // Undeclared exception!
      try { 
        localVariables0.get(193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 193
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(46);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.maxLocals();
      assertNotSame(localVariables1, localVariables0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(198);
      Object object0 = localVariables0.clone();
      assertNotSame(object0, localVariables0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 206;
      LocalVariables localVariables0 = new LocalVariables(206);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.maxLocals();
      ObjectType objectType0 = Type.CLASS;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      localVariables0.toString();
      Type type0 = uninitializedObjectType0.normalizeForStackOrLocal();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.clone();
      localVariables2.clone();
      localVariables1.toString();
      localVariables0.set(107, type0);
      localVariables1.clone();
      localVariables0.maxLocals();
      localVariables1.initializeObject(uninitializedObjectType0);
      localVariables0.get(28);
      localVariables1.maxLocals();
      localVariables2.merge(localVariables1);
      localVariables1.merge(localVariables2);
      localVariables0.clone();
      Object object0 = localVariables2.clone();
      localVariables2.equals(object0);
      localVariables0.initializeObject(uninitializedObjectType0);
      localVariables0.maxLocals();
      localVariables1.initializeObject(uninitializedObjectType0);
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables1.merge(localVariables3);
      // Undeclared exception!
      try { 
        localVariables1.get(206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 206
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      localVariables0.hashCode();
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(754);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.toString();
      LocalVariables localVariables3 = new LocalVariables(0);
      localVariables3.getClone();
      localVariables2.equals(localVariables3);
      // Undeclared exception!
      try { 
        localVariables0.merge(localVariables1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(145);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      localVariables0.clone();
      localVariables1.clone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.maxLocals();
      localVariables0.merge(localVariables2);
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables3.getClone();
      localVariables2.toString();
      localVariables3.getClone();
      localVariables0.clone();
      localVariables0.clone();
      LocalVariables localVariables4 = localVariables2.getClone();
      localVariables2.clone();
      localVariables0.toString();
      LocalVariables localVariables5 = localVariables4.getClone();
      BasicType basicType0 = Type.BYTE;
      // Undeclared exception!
      try { 
        localVariables5.set(0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'byte'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.maxLocals();
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      boolean boolean0 = localVariables0.equals((Object) null);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      ObjectType objectType0 = new ObjectType("<$L{");
      // Undeclared exception!
      try { 
        localVariables1.set(0, objectType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      LocalVariables localVariables0 = new LocalVariables(251);
      int int0 = localVariables0.maxLocals();
      assertEquals(251, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble(599.76275453);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.clone();
      constantArray0[4] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      LocalVariables localVariables0 = new LocalVariables(749);
      SIPUSH sIPUSH0 = new SIPUSH((short)730);
      Type type0 = sIPUSH0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        localVariables0.set((-1062), type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: LocalVariables do not know about 'short'. Use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DCONST dCONST0 = new DCONST(0.0);
      String string0 = "LocalVariables do not know about '";
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("LocalVariables do not know about '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LocalVariables do not know about '
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(47);
      int int0 = 0;
      BasicType basicType0 = Type.LONG;
      basicType0.toString();
      Class<LocalVariables>[] classArray0 = (Class<LocalVariables>[]) Array.newInstance(Class.class, 7);
      Class<LocalVariables> class0 = LocalVariables.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<LocalVariables> class1 = LocalVariables.class;
      classArray0[2] = class1;
      Class<LocalVariables> class2 = LocalVariables.class;
      classArray0[3] = class2;
      Class<LocalVariables> class3 = LocalVariables.class;
      classArray0[4] = class3;
      Class<LocalVariables> class4 = LocalVariables.class;
      classArray0[5] = class4;
      Class<LocalVariables> class5 = LocalVariables.class;
      classArray0[6] = class5;
      Type.getTypes(classArray0);
      // Undeclared exception!
      try { 
        Type.getReturnType("Merging LocalVariables of different size?!? From different methods or what?!?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Merging LocalVariables of different size?!? From different methods or what?!?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = localVariables0.getClone();
      Object object0 = localVariables1.clone();
      String string0 = localVariables1.toString();
      assertEquals("0: <unknown object>\n", string0);
      
      ObjectType objectType0 = new ObjectType("0: <unknown object>\n");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      localVariables1.initializeObject(uninitializedObjectType0);
      Class<LocalVariables> class0 = LocalVariables.class;
      Type.getType(class0);
      Object object1 = localVariables0.clone();
      localVariables1.equals(object1);
      localVariables0.merge(localVariables1);
      localVariables0.initializeObject(uninitializedObjectType0);
      boolean boolean0 = localVariables0.equals(object0);
      assertTrue(boolean0);
      
      localVariables0.toString();
      assertNotSame(localVariables0, localVariables1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(145);
      localVariables0.getClone();
      localVariables0.clone();
      localVariables0.clone();
      localVariables0.merge(localVariables0);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.toString();
      localVariables1.maxLocals();
      localVariables0.merge(localVariables1);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.getClone();
      localVariables1.toString();
      localVariables2.getClone();
      localVariables0.clone();
      localVariables0.clone();
      LocalVariables localVariables3 = localVariables1.getClone();
      localVariables1.clone();
      LocalVariables localVariables4 = localVariables3.getClone();
      BasicType basicType0 = Type.FLOAT;
      localVariables4.set(0, basicType0);
      localVariables1.maxLocals();
      // Undeclared exception!
      try { 
        localVariables3.get(145);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 145
         //
         verifyException("org.apache.bcel.verifier.structurals.LocalVariables", e);
      }
  }
}
