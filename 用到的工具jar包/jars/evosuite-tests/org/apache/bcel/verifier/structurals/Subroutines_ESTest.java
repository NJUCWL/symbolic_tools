/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:04:42 GMT 2021
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Subroutine;
import org.apache.bcel.verifier.structurals.Subroutines;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Subroutines_ESTest extends Subroutines_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0, false);
      // Undeclared exception!
      try { 
        subroutines0.subroutineOf((InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines((MethodGen) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      instructionList0.append((BranchInstruction) ifInstruction0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction '  -1: irem[112](1)' is part of more than one subroutine (or of the top level and a subroutine).
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-698), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0, true);
      Subroutine subroutine0 = subroutines0.getTopLevel();
      assertNotNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, stringArray0[0], "Null", instructionList0, (ConstantPoolGen) null);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      InstructionList instructionList2 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      instructionList0.append(instructionHandle0, instructionList2);
      Subroutines subroutines0 = new Subroutines(methodGen0, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iREM0);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      IRETURN iRETURN0 = (IRETURN)InstructionConstants.IRETURN;
      instructionList0.insert((Instruction) iRETURN0);
      Subroutines subroutines0 = new Subroutines(methodGen0, false);
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Subroutine requested for an InstructionHandle that is not a leader of a subroutine.
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-698), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0, true);
      // Undeclared exception!
      try { 
        subroutines0.getSubroutine(instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: TOPLEVEL special subroutine requested; use getTopLevel().
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      instructionList0.append((BranchInstruction) ifInstruction0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction '  -1: irem[112](1)' is part of more than one subroutine (or of the top level and a subroutine).
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-698), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0, true);
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle1);
      assertNotNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0);
      Boolean boolean0 = Boolean.valueOf("2b*;ZcY1kKY^x#");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      Subroutine subroutine0 = subroutines0.subroutineOf(instructionHandle1);
      assertNull(subroutine0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen((-710), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      IREM iREM0 = new IREM();
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) iREM0);
      instructionList0.insert(instructionHandle0, instructionList1);
      MethodGen methodGen0 = new MethodGen((-698), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = new Subroutines(methodGen0, true);
      String string0 = subroutines0.toString();
      assertEquals("---\n{  -1: irem[112](1)=Subroutine: Local variable is '-1', JSRs are '[]', RET is 'null', Instructions: '[  -1: irem[112](1)]'. Accessed local variable slots: ''. Recursively (via subsub...routines) accessed local variable slots: ''.}\n---\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      Type[] typeArray0 = new Type[4];
      String[] stringArray0 = new String[4];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen((-698), type0, typeArray0, stringArray0, "2b*;ZcY1kKY^x#", "Null", instructionList0, (ConstantPoolGen) null);
      Subroutines subroutines0 = null;
      try {
        subroutines0 = new Subroutines(methodGen0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.verifier.structurals.Subroutines", e);
      }
  }
}
