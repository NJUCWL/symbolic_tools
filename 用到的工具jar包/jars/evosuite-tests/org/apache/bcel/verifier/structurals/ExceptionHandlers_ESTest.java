/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:01:32 GMT 2021
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExceptionHandler;
import org.apache.bcel.verifier.structurals.ExceptionHandlers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionHandlers_ESTest extends ExceptionHandlers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExceptionHandlers exceptionHandlers0 = null;
      try {
        exceptionHandlers0 = new ExceptionHandlers((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExceptionHandlers", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-705), basicType0, basicType0.NO_ARGS, (String[]) null, "F", "F", instructionList0, constantPoolGen0);
      Boolean boolean0 = Boolean.valueOf("&Ko[d~XQh");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, basicType0.STRING);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, basicType0.THROWABLE);
      ExceptionHandlers exceptionHandlers0 = new ExceptionHandlers(methodGen0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-705), basicType0, basicType0.NO_ARGS, (String[]) null, "F", "F", instructionList0, constantPoolGen0);
      Boolean boolean0 = Boolean.valueOf("&Ko[d~XQh");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, basicType0.STRING);
      ExceptionHandlers exceptionHandlers0 = new ExceptionHandlers(methodGen0);
      ExceptionHandler[] exceptionHandlerArray0 = exceptionHandlers0.getExceptionHandlers(instructionHandle0);
      assertEquals(1, exceptionHandlerArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-705), basicType0, basicType0.NO_ARGS, (String[]) null, "F", "F", instructionList0, constantPoolGen0);
      ExceptionHandlers exceptionHandlers0 = new ExceptionHandlers(methodGen0);
      ExceptionHandler[] exceptionHandlerArray0 = exceptionHandlers0.getExceptionHandlers((InstructionHandle) null);
      assertEquals(0, exceptionHandlerArray0.length);
  }
}
