/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:56:33 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.RuntimeVisibleAnnotations;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Annotations_ESTest extends Annotations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      MockFile mockFile0 = new MockFile((File) null, "bytes must not be null!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 163);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      runtimeVisibleAnnotations0.writeAnnotations(dataOutputStream0);
      assertTrue(runtimeVisibleAnnotations0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        runtimeVisibleAnnotations0.writeAnnotations((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Annotations", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      runtimeVisibleAnnotations0.getNumAnnotations();
      assertTrue(runtimeVisibleAnnotations0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = null;
      try {
        runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      runtimeVisibleAnnotations0.getAnnotationEntries();
      assertTrue(runtimeVisibleAnnotations0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      AnnotationEntry[] annotationEntryArray0 = new AnnotationEntry[1];
      runtimeVisibleAnnotations0.setAnnotationTable(annotationEntryArray0);
      assertTrue(runtimeVisibleAnnotations0.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      boolean boolean0 = runtimeVisibleAnnotations0.isRuntimeVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      RuntimeVisibleAnnotations runtimeVisibleAnnotations0 = new RuntimeVisibleAnnotations(0, 0, dataInputStream0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      runtimeVisibleAnnotations0.accept(emptyVisitor0);
      assertTrue(runtimeVisibleAnnotations0.isRuntimeVisible());
  }
}
