/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:29:37 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile((-5067), (-5067), (-3206), constantPool0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Only element values of type enum can be built with this ctor - type specified: ", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      sourceFile0.dump(dataOutputStream0);
      assertEquals((-3206), sourceFile0.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(3011, 106, 3011, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      sourceFile0.accept(emptyVisitor0);
      assertEquals(3011, sourceFile0.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile(0, 0, 0, constantPool0);
      int int0 = sourceFile0.getSourceFileIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(0, 0, 0, (ConstantPool) null);
      SourceFile sourceFile1 = (SourceFile)sourceFile0.copy((ConstantPool) null);
      assertEquals(0, sourceFile1.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SourceFile sourceFile0 = new SourceFile((-1087), (-1087), (-1087), constantPool0);
      sourceFile0.setLength(0);
      SourceFile sourceFile1 = (SourceFile)sourceFile0.copy(constantPool0);
      assertEquals((-1087), sourceFile1.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile((-5067), (-5067), (-3206), constantPool0);
      SourceFile sourceFile1 = (SourceFile)sourceFile0.copy(constantPool0);
      assertEquals((-3206), sourceFile1.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SourceFile sourceFile0 = new SourceFile((-1087), (-1087), (-1087), constantPool0);
      // Undeclared exception!
      try { 
        sourceFile0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile(0, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        sourceFile0.getSourceFileName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile(3290, 3342, 3290, constantPool0);
      // Undeclared exception!
      try { 
        sourceFile0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(3195, (-4773), 3195, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        sourceFile0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      SourceFile sourceFile0 = null;
      try {
        sourceFile0 = new SourceFile(0, 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = null;
      try {
        sourceFile0 = new SourceFile((-49), 0, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SourceFile sourceFile0 = new SourceFile(1508, 1508, dataInputStream0, (ConstantPool) null);
      assertEquals(0, sourceFile0.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(3195, (-4773), 3195, (ConstantPool) null);
      // Undeclared exception!
      try { 
        sourceFile0.getSourceFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(3195, (-4773), 3195, (ConstantPool) null);
      SourceFile sourceFile1 = new SourceFile(sourceFile0);
      assertEquals(3195, sourceFile0.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(1, 1, 1, (ConstantPool) null);
      int int0 = sourceFile0.getSourceFileIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile sourceFile0 = null;
      try {
        sourceFile0 = new SourceFile((SourceFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(1, 1, 1, (ConstantPool) null);
      sourceFile0.setSourceFileIndex((-2847));
      int int0 = sourceFile0.getSourceFileIndex();
      assertEquals((-2847), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile((-4871), (-4871), 3998, constantPool0);
      // Undeclared exception!
      try { 
        sourceFile0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3998. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(1, 1, 1, (ConstantPool) null);
      SourceFile sourceFile1 = (SourceFile)sourceFile0.copy((ConstantPool) null);
      assertEquals(1, sourceFile1.getSourceFileIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile sourceFile0 = null;
      try {
        sourceFile0 = new SourceFile((-289), (-289), (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = new SourceFile(1, 1, 1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        sourceFile0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SourceFile", e);
      }
  }
}
