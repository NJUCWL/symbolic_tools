/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:31:59 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ParameterAnnotationEntry;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterAnnotationEntry_ESTest extends ParameterAnnotationEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterAnnotationEntry.createParameterAnnotationEntries((Attribute[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ParameterAnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = null;
      try {
        parameterAnnotationEntry0 = new ParameterAnnotationEntry((DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ParameterAnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = null;
      try {
        parameterAnnotationEntry0 = new ParameterAnnotationEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = null;
      try {
        parameterAnnotationEntry0 = new ParameterAnnotationEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      ParameterAnnotationEntry[] parameterAnnotationEntryArray0 = ParameterAnnotationEntry.createParameterAnnotationEntries(attributeArray0);
      assertEquals(0, parameterAnnotationEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.ParameterAnnotationEntry");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = null;
      try {
        parameterAnnotationEntry0 = new ParameterAnnotationEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected element value kind in annotation: 18
         //
         verifyException("org.apache.bcel.classfile.ElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.ParameterAnnotationEntry");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ParameterAnnotationEntry parameterAnnotationEntry0 = new ParameterAnnotationEntry(dataInputStream0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      parameterAnnotationEntry0.accept(emptyVisitor0);
  }
}
