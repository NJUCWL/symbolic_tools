/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:46:28 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InnerClass_ESTest extends InnerClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getInnerClassIndex());
      assertEquals(0, innerClass0.getInnerAccessFlags());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-479), (-479), 0, 0);
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals(0, innerClass0.getInnerAccessFlags());
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals((-479), int0);
      assertEquals((-479), innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, (-859), 0, 201);
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals((-859), innerClass0.getOuterClassIndex());
      assertEquals(0, innerClass0.getInnerClassIndex());
      assertEquals(201, innerClass0.getInnerAccessFlags());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 182, 0, 32);
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals(182, innerClass0.getOuterClassIndex());
      assertEquals(32, innerClass0.getInnerAccessFlags());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, (-859), 0, 201);
      innerClass0.setInnerClassIndex(2690);
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals(2690, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 0, 0);
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals(0, int0);
      assertEquals(0, innerClass0.getInnerClassIndex());
      assertEquals(0, innerClass0.getInnerNameIndex());
      assertEquals(0, innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, (-859), 0, 201);
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals((-859), innerClass0.getOuterClassIndex());
      assertEquals(0, innerClass0.getInnerClassIndex());
      assertEquals(201, int0);
      assertEquals(0, innerClass0.getInnerNameIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(1785, 1785, 1785, 1785);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(1785, innerClass1.getInnerNameIndex());
      assertEquals(1785, innerClass1.getInnerClassIndex());
      assertEquals(1785, innerClass1.getInnerAccessFlags());
      assertEquals(1785, innerClass1.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, (-859), 0, 201);
      innerClass0.setInnerClassIndex(2690);
      innerClass0.copy();
      assertEquals(2690, innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(0, 0, 558, 0);
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals(558, innerClass1.getInnerNameIndex());
      assertEquals(0, innerClass1.getInnerClassIndex());
      assertEquals(0, innerClass1.getOuterClassIndex());
      assertEquals(0, innerClass1.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        innerClass0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -4041. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      // Undeclared exception!
      try { 
        innerClass0.toString((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(1785, 1785, 1785, 1785);
      // Undeclared exception!
      try { 
        innerClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-3257), 50, 50, 50);
      File file0 = MockFile.createTempFile("tBL7F3SrRkgNVJA4b", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.close();
      try { 
        innerClass0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-1922), (-1922), 7, 7);
      // Undeclared exception!
      try { 
        innerClass0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass((InnerClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      InnerClass innerClass0 = null;
      try {
        innerClass0 = new InnerClass(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      int int0 = innerClass0.getInnerAccessFlags();
      assertEquals((-4041), int0);
      assertEquals((-4041), innerClass0.getInnerClassIndex());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
      assertEquals((-4041), innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals((-4041), int0);
      assertEquals((-4041), innerClass0.getInnerClassIndex());
      assertEquals((-4041), innerClass0.getOuterClassIndex());
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(553, 823, 553, 553);
      int int0 = innerClass0.getOuterClassIndex();
      assertEquals(823, int0);
      assertEquals(553, innerClass0.getInnerNameIndex());
      assertEquals(553, innerClass0.getInnerClassIndex());
      assertEquals(553, innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      int int0 = innerClass0.getInnerClassIndex();
      assertEquals((-4041), innerClass0.getOuterClassIndex());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
      assertEquals((-4041), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass(228, 122, (-2110), 1);
      assertEquals(122, innerClass0.getOuterClassIndex());
      
      innerClass0.setOuterClassIndex(228);
      assertEquals(1, innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      innerClass0.setInnerAccessFlags((-4041));
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
      assertEquals((-4041), innerClass0.getOuterClassIndex());
      assertEquals((-4041), innerClass0.getInnerClassIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      InnerClass innerClass0 = new InnerClass(dataInputStream0);
      assertEquals(20038, innerClass0.getInnerAccessFlags());
      assertEquals(19781, innerClass0.getInnerClassIndex());
      assertEquals(11593, innerClass0.getInnerNameIndex());
      assertEquals(21569, innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      String string0 = innerClass0.toString();
      assertEquals("InnerClass(-4041, -4041, -4041, -4041)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      MockFile mockFile0 = new MockFile("faload", "\"Kl;3;X;");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      innerClass0.dump(dataOutputStream0);
      assertEquals((-4041), innerClass0.getInnerClassIndex());
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
      assertEquals((-4041), innerClass0.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      innerClass0.setInnerNameIndex(1);
      int int0 = innerClass0.getInnerNameIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      InnerClass innerClass1 = new InnerClass(innerClass0);
      assertEquals((-4041), innerClass0.getInnerClassIndex());
      assertEquals((-4041), innerClass0.getOuterClassIndex());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      InnerClass innerClass1 = innerClass0.copy();
      assertEquals((-4041), innerClass1.getInnerClassIndex());
      assertEquals((-4041), innerClass1.getInnerAccessFlags());
      assertEquals((-4041), innerClass1.getInnerNameIndex());
      assertEquals((-4041), innerClass1.getOuterClassIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InnerClass innerClass0 = new InnerClass((-4041), (-4041), (-4041), (-4041));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      innerClass0.accept(emptyVisitor0);
      assertEquals((-4041), innerClass0.getOuterClassIndex());
      assertEquals((-4041), innerClass0.getInnerClassIndex());
      assertEquals((-4041), innerClass0.getInnerAccessFlags());
      assertEquals((-4041), innerClass0.getInnerNameIndex());
  }
}
