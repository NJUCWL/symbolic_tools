/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:20:03 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.ParameterAnnotationEntry;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Method_ESTest extends Method_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals("org.apache.bcel.classfile.ExceptionTable", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(0, 126, 126, attributeArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      method0.accept(emptyVisitor0);
      assertFalse(method0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method(0, 112, 112, attributeArray0, (ConstantPool) null);
      ParameterAnnotationEntry[] parameterAnnotationEntryArray0 = method0.getParameterAnnotationEntries();
      assertEquals(0, parameterAnnotationEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Method.setComparator((BCELComparator) null);
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1601), 1033, (-1601), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1601. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1746), (byte) (-51), (byte) (-51), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -51. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Method.setComparator(bCELComparator0);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.Method cannot be cast to org.apache.bcel.classfile.JavaClass
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1578), (-1578), (-1578), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.getReturnType();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1578. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLineNumberTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getExceptionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1578), (-4581), (-1578), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.getArgumentTypes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1578. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = null;
      try {
        method0 = new Method((DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 58);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getParameterAnnotationEntries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ParameterAnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((-9), (-9), (-9), attributeArray0, (ConstantPool) null);
      LineNumberTable lineNumberTable0 = method0.getLineNumberTable();
      assertNull(lineNumberTable0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((-9), (-9), (-9), attributeArray0, (ConstantPool) null);
      LocalVariableTable localVariableTable0 = method0.getLocalVariableTable();
      assertNull(localVariableTable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((-9), (-9), (-9), attributeArray0, (ConstantPool) null);
      ExceptionTable exceptionTable0 = method0.getExceptionTable();
      assertNull(exceptionTable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((-9), (-9), (-9), attributeArray0, (ConstantPool) null);
      Code code0 = method0.getCode();
      assertNull(code0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((-9), (-9), (-9), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Method method0 = new Method();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        method0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getReturnType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Method method0 = new Method();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ConstantUtf8> class0 = ConstantUtf8.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        method0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(0, 0, 1, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.getArgumentTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Method method0 = new Method();
      Method method1 = new Method(method0);
      assertFalse(method1.isInterface());
  }
}
