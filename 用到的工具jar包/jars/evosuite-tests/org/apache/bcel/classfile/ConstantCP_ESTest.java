/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:27:17 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantCP_ESTest extends ConstantCP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1190, 1190);
      assertEquals(1190, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantInvokeDynamic0.setNameAndTypeIndex(0);
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 661);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D,M");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantInterfaceMethodref0.dump(dataOutputStream0);
      assertEquals(0, constantInterfaceMethodref0.getClassIndex());
      assertEquals(661, constantInterfaceMethodref0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(248, 248);
      int int0 = constantFieldref0.getNameAndTypeIndex();
      assertEquals(248, int0);
      assertEquals(248, constantFieldref0.getClassIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2697), (-2697));
      int int0 = constantMethodref0.getNameAndTypeIndex();
      assertEquals((-2697), constantMethodref0.getClassIndex());
      assertEquals((-2697), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2237, 4238);
      int int0 = constantInvokeDynamic0.getClassIndex();
      assertEquals(2237, int0);
      assertEquals(4238, constantInvokeDynamic0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, (-820));
      assertEquals(0, constantInterfaceMethodref0.getClassIndex());
      
      constantInterfaceMethodref0.setClassIndex((-820));
      int int0 = constantInterfaceMethodref0.getClassIndex();
      assertEquals((-820), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), 7);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantInterfaceMethodref0.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1768, 1768);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantInvokeDynamic0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantFieldref0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2472, 1290);
      String string0 = constantFieldref0.toString();
      assertEquals("CONSTANT_Fieldref[9](class_index = 2472, name_and_type_index = 1290)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, (-820));
      int int0 = constantInterfaceMethodref0.getClassIndex();
      assertEquals(0, int0);
      assertEquals((-820), constantInterfaceMethodref0.getNameAndTypeIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, 0);
      int int0 = constantFieldref0.getNameAndTypeIndex();
      assertEquals(0, int0);
      assertEquals(0, constantFieldref0.getClassIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1631);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      // Undeclared exception!
      try { 
        constantFieldref0.getClass((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(47, (-1888));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals((-1888), constantFieldref1.getNameAndTypeIndex());
      assertEquals(47, constantFieldref1.getClassIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(47, (-1888));
      constantFieldref0.setClassIndex(47);
      assertEquals((-1888), constantFieldref0.getNameAndTypeIndex());
      assertEquals(47, constantFieldref0.getClassIndex());
  }
}
