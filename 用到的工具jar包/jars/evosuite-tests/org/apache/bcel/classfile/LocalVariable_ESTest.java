/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:59:16 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariable_ESTest extends LocalVariable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_[ ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, 209, 209, 209, 92, constantPool0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(209, localVariable0.getSignatureIndex());
      assertEquals(92, localVariable0.getIndex());
      assertEquals(1673, localVariable0.getStartPC());
      assertEquals(209, localVariable0.getLength());
      assertEquals(209, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      int int0 = localVariable0.getStartPC();
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(195, localVariable0.getLength());
      assertEquals(0, localVariable0.getNameIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-74), 195, 833, (-74), 0, constantPool0);
      int int0 = localVariable0.getStartPC();
      assertEquals(833, localVariable0.getNameIndex());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(195, localVariable0.getLength());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals((-74), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-103), (-103), (-103), 0, (-1708), (ConstantPool) null);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals((-1708), localVariable0.getIndex());
      assertEquals(0, int0);
      assertEquals((-103), localVariable0.getStartPC());
      assertEquals((-103), localVariable0.getNameIndex());
      assertEquals((-103), localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, (-2002), (-2002), (-2002), (ConstantPool) null);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals((-2002), int0);
      assertEquals((-2002), localVariable0.getIndex());
      assertEquals(1, localVariable0.getLength());
      assertEquals(1, localVariable0.getStartPC());
      assertEquals((-2002), localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-74), 195, 833, (-74), 0, constantPool0);
      int int0 = localVariable0.getNameIndex();
      assertEquals(195, localVariable0.getLength());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(833, int0);
      assertEquals((-74), localVariable0.getStartPC());
      assertEquals(0, localVariable0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-1), (-1), (-1), 0, (-1), constantPool0);
      int int0 = localVariable0.getNameIndex();
      assertEquals((-1), int0);
      assertEquals((-1), localVariable0.getLength());
      assertEquals((-1), localVariable0.getStartPC());
      assertEquals(0, localVariable0.getSignatureIndex());
      assertEquals((-1), localVariable0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, (-2002), (-2002), (-2002), (ConstantPool) null);
      int int0 = localVariable0.getLength();
      assertEquals((-2002), localVariable0.getIndex());
      assertEquals((-2002), localVariable0.getSignatureIndex());
      assertEquals((-2002), localVariable0.getNameIndex());
      assertEquals(1, int0);
      assertEquals(1, localVariable0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-57), (-57), (-2002), (-2002), (-2002), (ConstantPool) null);
      int int0 = localVariable0.getLength();
      assertEquals((-57), int0);
      assertEquals((-2002), localVariable0.getIndex());
      assertEquals((-57), localVariable0.getStartPC());
      assertEquals((-2002), localVariable0.getSignatureIndex());
      assertEquals((-2002), localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 0, 0, 3, (-1597), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(3, localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getLength());
      assertEquals(0, localVariable0.getNameIndex());
      assertEquals(0, localVariable0.getStartPC());
      assertEquals((-1597), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-57), (-57), (-2002), (-2002), (-2002), (ConstantPool) null);
      localVariable0.getConstantPool();
      assertEquals((-57), localVariable0.getLength());
      assertEquals((-2002), localVariable0.getSignatureIndex());
      assertEquals((-2002), localVariable0.getNameIndex());
      assertEquals((-2002), localVariable0.getIndex());
      assertEquals((-57), localVariable0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 654, 654, (-9), (-1597), constantPool0);
      localVariable0.getConstantPool();
      assertEquals((-1597), localVariable0.getIndex());
      assertEquals((-9), localVariable0.getSignatureIndex());
      assertEquals(654, localVariable0.getLength());
      assertEquals(0, localVariable0.getStartPC());
      assertEquals(654, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getStartPC());
      assertEquals((-74), localVariable1.getSignatureIndex());
      assertEquals(0, localVariable1.getIndex());
      assertEquals(0, localVariable1.getNameIndex());
      assertEquals(195, localVariable1.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, (-1428), (-1428), (-1428), 92, constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(92, localVariable1.getIndex());
      assertEquals((-1428), localVariable1.getLength());
      assertEquals((-1428), localVariable1.getSignatureIndex());
      assertEquals((-1428), localVariable1.getNameIndex());
      assertEquals(1673, localVariable1.getStartPC());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 0, 0, constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getSignatureIndex());
      assertEquals(1, localVariable1.getLength());
      assertEquals(1, localVariable1.getStartPC());
      assertEquals(0, localVariable1.getIndex());
      assertEquals(1, localVariable1.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-43), 0, (-2139), 2387, (-2139), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals((-2139), localVariable1.getNameIndex());
      assertEquals((-43), localVariable1.getStartPC());
      assertEquals((-2139), localVariable1.getIndex());
      assertEquals(2387, localVariable1.getSignatureIndex());
      assertEquals(0, localVariable1.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, 209, 209, 209, 92, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.toStringShared(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 209. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1961, 1961, 1961, 31, 2109, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariable0.toStringShared(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.getSignature();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -74. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 0, 0, 1, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariable0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable((-1), 0, (-1), 0, (-1), constantPool0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        localVariable0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)40, (byte)67);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-43), 0, (-2139), 2387, (-2139), constantPool0);
      int int0 = localVariable0.getLength();
      assertEquals(2387, localVariable0.getSignatureIndex());
      assertEquals((-2139), localVariable0.getIndex());
      assertEquals(0, int0);
      assertEquals((-43), localVariable0.getStartPC());
      assertEquals((-2139), localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      localVariable0.getConstantPool();
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getStartPC());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(0, localVariable0.getNameIndex());
      assertEquals(195, localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, 209, 209, 209, 92, constantPool0);
      int int0 = localVariable0.getStartPC();
      assertEquals(1673, int0);
      assertEquals(209, localVariable0.getLength());
      assertEquals(92, localVariable0.getIndex());
      assertEquals(209, localVariable0.getSignatureIndex());
      assertEquals(209, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, int0);
      assertEquals(0, localVariable0.getStartPC());
      assertEquals(0, localVariable0.getIndex());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(195, localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, int0);
      assertEquals(0, localVariable0.getStartPC());
      assertEquals(0, localVariable0.getNameIndex());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(195, localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, 209, 209, 209, 92, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.getName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 209. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((-43), 0, (-2139), 2387, (-2139), constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals((-43), localVariable0.getStartPC());
      assertEquals(2387, int0);
      assertEquals((-2139), localVariable0.getNameIndex());
      assertEquals((-2139), localVariable0.getIndex());
      assertEquals(0, localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, (-2002), (-2002), (-2002), (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariable0.getSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      assertEquals(195, localVariable0.getLength());
      
      localVariable0.setLength(0);
      assertEquals(0, localVariable0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      assertEquals((-74), localVariable0.getSignatureIndex());
      
      localVariable0.setSignatureIndex(0);
      assertEquals(0, localVariable0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(146, 195, 146, (-74), 146, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        localVariable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      localVariable0.setIndex(833);
      int int0 = localVariable0.getIndex();
      assertEquals(833, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 654, 654, 3, (-1597), constantPool0);
      assertEquals(0, localVariable0.getStartPC());
      
      localVariable0.setStartPC(654);
      assertEquals(654, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1673, 209, 209, 209, 92, constantPool0);
      localVariable0.setNameIndex(3206);
      assertEquals(3206, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(195, localVariable0.getLength());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getNameIndex());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(0, localVariable0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      localVariable0.setConstantPool(constantPool0);
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(0, localVariable0.getStartPC());
      assertEquals(195, localVariable0.getLength());
      assertEquals(0, localVariable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable1.getStartPC());
      assertEquals(0, localVariable1.getIndex());
      assertEquals(195, localVariable0.getLength());
      assertEquals((-74), localVariable0.getSignatureIndex());
      assertEquals(0, localVariable1.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(0, 195, 0, (-74), 0, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
