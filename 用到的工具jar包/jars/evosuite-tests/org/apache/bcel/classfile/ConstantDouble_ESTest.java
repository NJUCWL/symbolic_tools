/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:41:47 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantDouble_ESTest extends ConstantDouble_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      double double0 = constantDouble0.getBytes();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2161.4142763);
      double double0 = constantDouble0.getBytes();
      assertEquals(2161.4142763, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantDouble0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2452.875256212);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantDouble0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(3206.1724467865724);
      // Undeclared exception!
      try { 
        constantDouble0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((ConstantDouble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      double double0 = constantDouble0.getBytes();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      Object object0 = constantDouble0.getConstantValue((ConstantPool) null);
      assertEquals((-850.69927902525), object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantDouble0.accept(emptyVisitor0);
      assertEquals((-850.69927902525), constantDouble0.getBytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      constantDouble0.setBytes((-850.69927902525));
      assertEquals((-850.69927902525), constantDouble0.getBytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CONSTANT_Double[6](bytes = -850.69927902525)", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantDouble0.dump(dataOutputStream0);
      assertEquals((-850.69927902525), constantDouble0.getBytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((-850.69927902525), constantDouble0.getBytes(), 0.01);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-850.69927902525));
      String string0 = constantDouble0.toString();
      assertEquals("CONSTANT_Double[6](bytes = -850.69927902525)", string0);
  }
}
