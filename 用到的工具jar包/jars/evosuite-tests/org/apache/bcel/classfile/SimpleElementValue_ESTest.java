/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:38:22 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.SimpleElementValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleElementValue_ESTest extends SimpleElementValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(354, 60, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueShort() on a non SHORT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(954, (-1776), constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueBoolean() on a non BOOLEAN ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(290, 290, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueDouble() on a non DOUBLE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(1235, (-213), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueFloat() on a non FLOAT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(299, 299, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueLong() on a non LONG ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-180), (-207), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueChar() on a non CHAR ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 2071, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueByte() on a non BYTE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(1726, 1726, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-1013), (-1013), (ConstantPool) null);
      simpleElementValue0.setIndex(73);
      assertEquals(73, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(24, 24, constantPool0);
      int int0 = simpleElementValue0.getIndex();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-2965), (-2965), (ConstantPool) null);
      int int0 = simpleElementValue0.getIndex();
      assertEquals((-2965), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-451), 0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        simpleElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-2965), (-2965), constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValue class does not know how to stringify type -2965
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, constantPool0);
      int int0 = simpleElementValue0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-451), 0, constantPool0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        simpleElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValue doesnt know how to write out type -451
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 0, constantPool0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals(0, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1538);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 1538, (ConstantPool) null);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals("I\u0006\u0002", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)64);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals("B\u0000B", byteArrayOutputStream0.toString());
      assertEquals(66, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(1726, 1726, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValue class does not know how to stringify type 1726
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, (-2358), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 66. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueShort() on a non SHORT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueBoolean() on a non BOOLEAN ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-295), (-1421), constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueDouble() on a non DOUBLE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueFloat() on a non FLOAT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(3, 3, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueLong() on a non LONG ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 2278, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2278. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(127, 127, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueChar() on a non CHAR ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 2278, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueByte() on a non BYTE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-295), (-295), constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 1538, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 3245, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 1538, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
}
