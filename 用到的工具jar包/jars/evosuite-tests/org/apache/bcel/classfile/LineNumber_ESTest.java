/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:30:49 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineNumber_ESTest extends LineNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 3321);
      int int0 = lineNumber0.getStartPC();
      assertEquals(3321, lineNumber0.getLineNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(91, 91);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(91, lineNumber0.getStartPC());
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, (-934));
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(64602, lineNumber1.getLineNumber());
      assertEquals(0, lineNumber1.getStartPC());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-1441), 0);
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(64095, lineNumber1.getStartPC());
      assertEquals(0, lineNumber1.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        lineNumber0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.LineNumber");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.close();
      try { 
        lineNumber0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(5475, 5475);
      // Undeclared exception!
      try { 
        lineNumber0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber((LineNumber) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-189), 158);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -189
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)58, (byte)21);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(0, int0);
      assertEquals(0, lineNumber0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-1441), 0);
      int int0 = lineNumber0.getStartPC();
      assertEquals(0, lineNumber0.getLineNumber());
      assertEquals(64095, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      assertEquals(0, lineNumber0.getStartPC());
      assertEquals(0, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(8, 8);
      lineNumber0.setStartPC(8);
      assertEquals(8, lineNumber0.getLineNumber());
      assertEquals(8, lineNumber0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(8, 8);
      lineNumber0.setLineNumber(8);
      assertEquals(8, lineNumber0.getStartPC());
      assertEquals(8, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(8, 8);
      String string0 = lineNumber0.toString();
      assertEquals("LineNumber(8, 8)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(8, 8);
      LineNumber lineNumber1 = new LineNumber(lineNumber0);
      assertEquals(8, lineNumber0.getStartPC());
      assertEquals(8, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(8, 8);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      lineNumber0.accept(emptyVisitor0);
      assertEquals(8, lineNumber0.getStartPC());
      assertEquals(8, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.LineNumber");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      lineNumber0.dump(dataOutputStream0);
      assertEquals(0, lineNumber0.getLineNumber());
      assertEquals(0, lineNumber0.getStartPC());
  }
}
