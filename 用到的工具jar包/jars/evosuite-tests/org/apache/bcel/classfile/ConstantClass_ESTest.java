/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:21:16 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantClass_ESTest extends ConstantClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(79);
      constantClass0.setNameIndex(0);
      int int0 = constantClass0.getNameIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-1060));
      int int0 = constantClass0.getNameIndex();
      assertEquals((-1060), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(1758);
      // Undeclared exception!
      try { 
        constantClass0.getConstantValue((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(131);
      // Undeclared exception!
      try { 
        constantClass0.getBytes((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-22));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantClass0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(1710);
      // Undeclared exception!
      try { 
        constantClass0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-594));
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantClass0.getConstantValue(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -594. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      assertEquals(0, constantClass0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(52);
      int int0 = constantClass0.getNameIndex();
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      String string0 = constantClass0.toString();
      assertEquals("CONSTANT_Class[7](name_index = 0)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantClass0.getBytes(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(52);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantClass0.accept(emptyVisitor0);
      assertEquals(52, constantClass0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals(0, constantClass1.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-762));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantClass0.dump(dataOutputStream0);
      assertEquals((-762), constantClass0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }
}
