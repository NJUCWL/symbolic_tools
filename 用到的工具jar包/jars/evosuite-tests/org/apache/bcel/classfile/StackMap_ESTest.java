/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:56:45 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.StackMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackMap_ESTest extends StackMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 139, stackMapEntryArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMap0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackMap stackMap0 = new StackMap(139, 0, (StackMapEntry[]) null, (ConstantPool) null);
      StackMapEntry[] stackMapEntryArray0 = stackMap0.getStackMap();
      assertNull(stackMapEntryArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      StackMapEntry[] stackMapEntryArray1 = stackMap0.getStackMap();
      assertSame(stackMapEntryArray0, stackMapEntryArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      int int0 = stackMap0.getMapLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap((-2329), 0, stackMapEntryArray0, (ConstantPool) null);
      Attribute attribute0 = stackMap0.copy((ConstantPool) null);
      assertNotSame(attribute0, stackMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMap stackMap0 = new StackMap(1590, 1590, stackMapEntryArray0, constantPool0);
      Attribute attribute0 = stackMap0.copy(constantPool0);
      assertNotSame(attribute0, stackMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(139, (-42), stackMapEntryArray0, (ConstantPool) null);
      Attribute attribute0 = stackMap0.copy((ConstantPool) null);
      assertNotSame(attribute0, stackMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackMap stackMap0 = new StackMap(1, 11, (StackMapEntry[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMap0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        stackMap0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        stackMap0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[2] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap(201, 11, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid frame type found while parsing stack map table: 241
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap(2294, 1471, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap(1, 1, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackMap stackMap0 = new StackMap(1, 11, (StackMapEntry[]) null, (ConstantPool) null);
      int int0 = stackMap0.getMapLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[2];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      String string0 = stackMap0.toString();
      assertEquals("StackMap(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMap0.setStackMap(stackMapEntryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]d|}C~[Evl?F2)o");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        stackMap0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 50929);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      stackMap0.dump(dataOutputStream0);
      assertEquals((byte)11, stackMap0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap(201, 11, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMap stackMap0 = new StackMap(61, 11, dataInputStream0, (ConstantPool) null);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, stackMap0.getMapLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      stackMap0.accept(descendingVisitor0);
      assertEquals(0, stackMap0.getMapLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(139, 0, stackMapEntryArray0, (ConstantPool) null);
      StackMapEntry[] stackMapEntryArray1 = stackMap0.getStackMap();
      stackMap0.setStackMap(stackMapEntryArray1);
      assertEquals(2, stackMap0.getLength());
  }
}
