/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:15:23 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.FieldOrMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldOrMethod_ESTest extends FieldOrMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(2, 3585, 361, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.getSignature();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 361. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Field field0 = new Field((-1), (-1), (-1), (Attribute[]) null, (ConstantPool) null);
      Field field1 = new Field(field0);
      assertEquals((-1), field0.getSignatureIndex());
      assertEquals((-1), field0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Method method0 = new Method();
      method0.isSynthetic(true);
      Method method1 = new Method(method0);
      assertEquals(0, method1.getNameIndex());
      assertEquals(0, method1.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Method method0 = new Method();
      method0.setNameIndex(1646);
      assertEquals(1646, method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("L");
      constantArray0[0] = (Constant) constantUtf8_0;
      method0.getSignature();
      assertEquals(2, method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      assertEquals(0, method0.getSignatureIndex());
      
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      method0.getSignature();
      assertEquals(2, method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Method method0 = new Method(1, (-371), (-563), attributeArray0, (ConstantPool) null);
      int int0 = method0.getNameIndex();
      assertEquals((-563), method0.getSignatureIndex());
      assertEquals((-371), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      Field field0 = new Field(2, 3585, 361, attributeArray0, constantPool0);
      assertEquals(3585, field0.getNameIndex());
      
      field0.setNameIndex(0);
      assertEquals(0, field0.getNameIndex());
      
      field0.getName();
      assertEquals(361, field0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method method0 = new Method();
      Attribute[] attributeArray0 = method0.getAttributes();
      assertNull(attributeArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      method0.getAttributes();
      assertEquals(2, method0.getNameIndex());
      assertEquals(0, method0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(2, 3585, 361, attributeArray0, constantPool0);
      AnnotationEntry[] annotationEntryArray0 = field0.getAnnotationEntries();
      assertNotNull(annotationEntryArray0);
      assertEquals(361, field0.getSignatureIndex());
      assertEquals(3585, field0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getGenericSignature();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Method method0 = new Method();
      File file0 = MockFile.createTempFile("!.]AERe8XG:]fyf.", "!.]AERe8XG:]fyf.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        method0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Method method0 = new Method();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        method0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Field field0 = new Field((-1), (-1), (-1), (Attribute[]) null, (ConstantPool) null);
      field0.setAttributes((Attribute[]) null);
      assertEquals((-1), field0.getNameIndex());
      assertEquals((-1), field0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Method method0 = new Method();
      Attribute[] attributeArray0 = new Attribute[0];
      method0.setAttributes(attributeArray0);
      assertFalse(method0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Method method0 = new Method();
      int int0 = method0.getSignatureIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Method method0 = new Method(1, (-371), (-563), attributeArray0, (ConstantPool) null);
      method0.getAttributes();
      assertEquals((-371), method0.getNameIndex());
      assertEquals((-563), method0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Method method0 = new Method();
      int int0 = method0.getNameIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Method method0 = new Method(1, (-371), (-563), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Method method0 = new Method();
      ConstantPool constantPool0 = method0.getConstantPool();
      assertNull(constantPool0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Method method0 = new Method(1, (-371), (-563), attributeArray0, (ConstantPool) null);
      method0.getGenericSignature();
      method0.getGenericSignature();
      assertEquals((-563), method0.getSignatureIndex());
      assertEquals((-371), method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Method method0 = new Method((-3013), (-3013), (-427), (Attribute[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.getAnnotationEntries();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Method method0 = new Method(1, (-371), (-563), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        method0.copy_((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      assertNotSame(fieldOrMethod0, method0);
      assertEquals(0, fieldOrMethod0.getSignatureIndex());
      assertEquals(2, fieldOrMethod0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 2, 0, attributeArray0, constantPool0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">#$)<0|^Hs>o", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      method0.dump(dataOutputStream0);
      assertEquals(0, method0.getSignatureIndex());
      assertEquals(2, method0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertFalse(javaClass0.isVolatile());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Method method0 = new Method();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      method0.setConstantPool(constantPool0);
      assertFalse(method0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Method method0 = new Method();
      method0.setSignatureIndex(1);
      assertEquals(1, method0.getSignatureIndex());
  }
}
