/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:42:55 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.AnnotationElementValue;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationElementValue_ESTest extends AnnotationElementValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, (AnnotationEntry) null, constantPool0);
      AnnotationEntry annotationEntry0 = annotationElementValue0.getAnnotationEntry();
      assertNull(annotationEntry0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      AnnotationEntry annotationEntry1 = annotationElementValue0.getAnnotationEntry();
      assertFalse(annotationEntry1.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      AnnotationEntry annotationEntry1 = annotationElementValue0.getAnnotationEntry();
      assertSame(annotationEntry0, annotationEntry1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(183, (ConstantPool) null, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      // Undeclared exception!
      try { 
        annotationElementValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      // Undeclared exception!
      try { 
        annotationElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      MockFile mockFile0 = new MockFile("nCvY9Cz_;#f_{");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        annotationElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-145), (ConstantPool) null, true);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        annotationElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, true);
      AnnotationElementValue annotationElementValue0 = null;
      try {
        annotationElementValue0 = new AnnotationElementValue((-1580), annotationEntry0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only element values of type annotation can be built with this ctor - type specified: -1580
         //
         verifyException("org.apache.bcel.classfile.AnnotationElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry((-145), (ConstantPool) null, true);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, (ConstantPool) null);
      AnnotationEntry annotationEntry1 = annotationElementValue0.getAnnotationEntry();
      assertSame(annotationEntry1, annotationEntry0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, true);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        annotationElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(0, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      // Undeclared exception!
      try { 
        annotationElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
