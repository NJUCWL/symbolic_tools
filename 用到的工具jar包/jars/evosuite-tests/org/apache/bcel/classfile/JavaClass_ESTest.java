/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:40:41 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.Repository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaClass_ESTest extends JavaClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertNotNull(javaClass0);
      
      javaClass0.dump("compiler version\t");
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isFinal());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertNotNull(javaClass0);
      
      File file0 = MockFile.createTempFile("iU^", "iU^");
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/iU^0iU^", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("iU^0iU^", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      javaClass0.dump((OutputStream) mockPrintStream0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/iU^0iU^", file0.toString());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("iU^0iU^", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(10220L, file0.length());
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertNotNull(descendingVisitor0);
      
      javaClass0.accept(descendingVisitor0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertFalse(javaClass0.isInterface());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertNotNull(javaClass0);
      
      int int0 = javaClass0.getSuperclassNameIndex();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertNotNull(javaClass0);
      
      JavaClass[] javaClassArray0 = javaClass0.getSuperClasses();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClassArray0.length);
      assertNotNull(javaClassArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(51, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertNotNull(javaClass0);
      
      Repository repository0 = javaClass0.getRepository();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(51, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertSame(syntheticRepository0, repository0);
      assertSame(repository0, syntheticRepository0);
      assertNotNull(repository0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals(51, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertNotNull(javaClass0);
      
      syntheticRepository0.clear();
      int int0 = javaClass0.getMinor();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals(51, javaClass0.getMajor());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      JavaClass[] javaClassArray0 = javaClass0.getInterfaces();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, javaClassArray0.length);
      assertNotNull(javaClassArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertNotNull(javaClass0);
      
      String[] stringArray0 = javaClass0.getInterfaceNames();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      JavaClass javaClass0 = syntheticRepository0.loadClass("java.lang.Object");
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertNotNull(javaClass0);
      
      int[] intArray0 = javaClass0.getInterfaceIndices();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      Field[] fieldArray0 = javaClass0.getFields();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      syntheticRepository0.clear();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JavaClass.debug");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      int int0 = javaClass0.getClassNameIndex();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isPrivate());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertNotNull(javaClass0);
      
      javaClass0.setAttributes((Attribute[]) null);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      
      Attribute[] attributeArray0 = javaClass0.getAttributes();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertNull(attributeArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertNotNull(javaClass0);
      
      JavaClass[] javaClassArray0 = javaClass0.getAllInterfaces();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClassArray0.length);
      assertNotNull(javaClassArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertNotNull(javaClass0);
      
      boolean boolean0 = javaClass0.equals(javaClass0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isFinal());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertNotNull(javaClass0);
      
      JavaClass javaClass1 = syntheticRepository0.loadClass("java.lang.Object");
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(52, javaClass1.getMajor());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(33, javaClass1.getModifiers());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
      
      boolean boolean0 = javaClass0.equals(javaClass1);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isFinal());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(33, javaClass1.getModifiers());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertFalse(boolean0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isAbstract());
      assertEquals(1057, javaClass0.getModifiers());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertNotNull(javaClass0);
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isAbstract());
      assertEquals(1057, javaClass0.getModifiers());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isStrictfp());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isEnum());
      assertTrue(javaClass1.isClass());
      assertEquals(1057, javaClass1.getModifiers());
      assertEquals("java.io.InputStream", javaClass1.getFileName());
      assertFalse(javaClass1.isInterface());
      assertEquals("java.io.InputStream", javaClass1.getClassName());
      assertTrue(javaClass1.isAbstract());
      assertEquals("java.io", javaClass1.getPackageName());
      assertEquals(9, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isFinal());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertEquals(15, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isStatic());
      assertEquals("InputStream.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isPrivate());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      assertNotNull(memorySensitiveClassPathRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isProtected());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertNotNull(javaClass0);
      
      javaClass0.isStatic(true);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isProtected());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals(41, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(41, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isProtected());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isStatic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAbstract());
      assertEquals(41, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVolatile());
      assertEquals(41, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass1.isPrivate());
      assertEquals(4, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isStatic());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals(41, javaClass1.getModifiers());
      assertFalse(javaClass1.isNative());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getFileName());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isInterface());
      assertEquals(51, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(177, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isStrictfp());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isFinal());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getClassName());
      assertTrue(javaClass1.isClass());
      assertEquals(41, javaClass1.getAccessFlags());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isAbstract());
      assertEquals("JavaClass.java", javaClass1.getSourceFileName());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isTransient());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      assertNotNull(memorySensitiveClassPathRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isProtected());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertNotNull(javaClass0);
      
      javaClass0.setModifiers(0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isSuper());
      assertEquals(0, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isProtected());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getModifiers());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isSuper());
      assertEquals(0, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isEnum());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPublic());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynchronized());
      assertFalse(javaClass0.isProtected());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertEquals(0, javaClass0.getModifiers());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isPrivate());
      assertEquals(4, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isAbstract());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass1.getSuperclassName());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isTransient());
      assertEquals("JavaClass.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isSuper());
      assertEquals(51, javaClass1.getMajor());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getFileName());
      assertFalse(javaClass1.isSynchronized());
      assertFalse(javaClass1.isPublic());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(0, javaClass1.getModifiers());
      assertFalse(javaClass1.isInterface());
      assertEquals(177, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isProtected());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertNotNull(javaClass0);
      
      javaClass0.isProtected(true);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(37, javaClass0.getAccessFlags());
      assertEquals(37, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals(37, javaClass0.getAccessFlags());
      assertEquals(37, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isProtected());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(37, javaClass1.getModifiers());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isNative());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertFalse(javaClass1.isFinal());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isInterface());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertTrue(javaClass1.isProtected());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isAbstract());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isTransient());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertEquals(37, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("java.lang.Integer");
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass1.isProtected());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isStrictfp());
      assertEquals(94, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isInterface());
      assertEquals(1, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isFinal());
      assertFalse(javaClass1.isPrivate());
      assertEquals(49, javaClass1.getModifiers());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertEquals("java.lang.Number", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertEquals(49, javaClass1.getAccessFlags());
      assertEquals("Integer.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertTrue(javaClass1.isSynchronized());
      assertTrue(javaClass1.isClass());
      assertEquals(0, javaClass1.getMinor());
      assertEquals("java.lang.Integer", javaClass1.getFileName());
      assertFalse(javaClass1.isVolatile());
      assertEquals("java.lang.Integer", javaClass1.getClassName());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertNotNull(javaClass0);
      
      javaClass0.isInterface(true);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(545, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(545, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      
      JavaClass javaClass1 = javaClass0.copy();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(545, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(545, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isProtected());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(545, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals((byte)2, javaClass1.getSource());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isClass());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(545, javaClass1.getModifiers());
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
      
      boolean boolean0 = javaClass0.implementationOf(javaClass1);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(545, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(545, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isProtected());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(545, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals((byte)2, javaClass1.getSource());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVarArgs());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isClass());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isSynthetic());
      assertEquals(545, javaClass1.getModifiers());
      assertTrue(javaClass0.equals((Object)javaClass1));
      assertTrue(javaClass1.equals((Object)javaClass0));
      assertTrue(boolean0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertNotNull(javaClass0);
      
      Class<Integer> class1 = Integer.class;
      JavaClass javaClass1 = syntheticRepository0.loadClass(class1);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals(49, javaClass1.getModifiers());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertEquals("java.lang.Number", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isFinal());
      assertEquals(1, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertEquals(94, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isSuper());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("Integer.java", javaClass1.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass1.getClassName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang.Integer", javaClass1.getFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
      
      int int0 = javaClass0.compareTo(javaClass1);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isProtected());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertEquals("org.apache.bcel.classfile.AccessFlags", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getClassName());
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass1.isSynchronized());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals(49, javaClass1.getModifiers());
      assertEquals((byte)2, javaClass1.getSource());
      assertFalse(javaClass1.isProtected());
      assertEquals("java.lang.Number", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isFinal());
      assertEquals(1, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isAbstract());
      assertEquals(94, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isAnnotation());
      assertFalse(javaClass1.isStatic());
      assertEquals(0, javaClass1.getMinor());
      assertFalse(javaClass1.isInterface());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isVolatile());
      assertTrue(javaClass1.isSuper());
      assertEquals(49, javaClass1.getAccessFlags());
      assertFalse(javaClass1.isVarArgs());
      assertEquals(52, javaClass1.getMajor());
      assertEquals("Integer.java", javaClass1.getSourceFileName());
      assertEquals("java.lang.Integer", javaClass1.getClassName());
      assertFalse(javaClass1.isStrictfp());
      assertEquals("java.lang.Integer", javaClass1.getFileName());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertEquals(5, int0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      //  // Unstable assertion: assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      //  // Unstable assertion: assertEquals((byte)1, JavaClass.HEAP);
      //  // Unstable assertion: assertEquals((byte)2, JavaClass.FILE);
      //  // Unstable assertion: assertEquals((byte)3, JavaClass.ZIP);
      //  // Unstable assertion: assertFalse(javaClass0.isStrictfp());
      //  // Unstable assertion: assertTrue(javaClass0.isSuper());
      //  // Unstable assertion: assertEquals((byte)2, javaClass0.getSource());
      //  // Unstable assertion: assertFalse(javaClass0.isEnum());
      //  // Unstable assertion: assertFalse(javaClass0.isVarArgs());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getFileName());
      //  // Unstable assertion: assertTrue(javaClass0.isSynchronized());
      //  // Unstable assertion: assertEquals("java.io", javaClass0.getPackageName());
      //  // Unstable assertion: assertTrue(javaClass0.isAbstract());
      //  // Unstable assertion: assertEquals(0, javaClass0.getMinor());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getAccessFlags());
      //  // Unstable assertion: assertFalse(javaClass0.isTransient());
      //  // Unstable assertion: assertTrue(javaClass0.isClass());
      //  // Unstable assertion: assertEquals(1667, javaClass0.getMajor());
      //  // Unstable assertion: assertFalse(javaClass0.isVolatile());
      //  // Unstable assertion: assertEquals(15, javaClass0.getSuperclassNameIndex());
      //  // Unstable assertion: assertFalse(javaClass0.isNative());
      //  // Unstable assertion: assertFalse(javaClass0.isSynthetic());
      //  // Unstable assertion: assertFalse(javaClass0.isPrivate());
      //  // Unstable assertion: assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      //  // Unstable assertion: assertFalse(javaClass0.isStatic());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getClassName());
      //  // Unstable assertion: assertTrue(javaClass0.isPublic());
      //  // Unstable assertion: assertFalse(javaClass0.isAnnotation());
      //  // Unstable assertion: assertEquals("InputStream.java", javaClass0.getSourceFileName());
      //  // Unstable assertion: assertFalse(javaClass0.isInterface());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getModifiers());
      //  // Unstable assertion: assertEquals(9, javaClass0.getClassNameIndex());
      //  // Unstable assertion: assertFalse(javaClass0.isFinal());
      //  // Unstable assertion: assertFalse(javaClass0.isProtected());
      //  // Unstable assertion: assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.toString();
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isFinal());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isAbstract());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.instanceOf((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(1057, javaClass0.getModifiers());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isAbstract());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io", javaClass0.getPackageName());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertNotNull(javaClass0);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      JavaClass.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        javaClass0.instanceOf(javaClass0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.JavaClass cannot be cast to org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertNotNull(javaClass0);
      
      javaClass0.isInterface(true);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(545, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isInterface());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(545, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      
      javaClass0.setClassName((String) null);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isClass());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(545, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isPublic());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isVolatile());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isInterface());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals(545, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isStatic());
      assertNull(javaClass0.getClassName());
      
      // Undeclared exception!
      try { 
        javaClass0.implementationOf(javaClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      //  // Unstable assertion: assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      //  // Unstable assertion: assertEquals((byte)1, JavaClass.HEAP);
      //  // Unstable assertion: assertEquals((byte)2, JavaClass.FILE);
      //  // Unstable assertion: assertEquals((byte)3, JavaClass.ZIP);
      //  // Unstable assertion: assertFalse(javaClass0.isInterface());
      //  // Unstable assertion: assertEquals(9, javaClass0.getClassNameIndex());
      //  // Unstable assertion: assertFalse(javaClass0.isFinal());
      //  // Unstable assertion: assertEquals(1667, javaClass0.getMajor());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getModifiers());
      //  // Unstable assertion: assertTrue(javaClass0.isClass());
      //  // Unstable assertion: assertEquals((byte)2, javaClass0.getSource());
      //  // Unstable assertion: assertEquals(0, javaClass0.getMinor());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getAccessFlags());
      //  // Unstable assertion: assertFalse(javaClass0.isProtected());
      //  // Unstable assertion: assertTrue(javaClass0.isSuper());
      //  // Unstable assertion: assertFalse(javaClass0.isVolatile());
      //  // Unstable assertion: assertFalse(javaClass0.isStrictfp());
      //  // Unstable assertion: assertFalse(javaClass0.isVarArgs());
      //  // Unstable assertion: assertTrue(javaClass0.isSynchronized());
      //  // Unstable assertion: assertFalse(javaClass0.isNative());
      //  // Unstable assertion: assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      //  // Unstable assertion: assertFalse(javaClass0.isAnnotation());
      //  // Unstable assertion: assertTrue(javaClass0.isPublic());
      //  // Unstable assertion: assertFalse(javaClass0.isTransient());
      //  // Unstable assertion: assertFalse(javaClass0.isPrivate());
      //  // Unstable assertion: assertEquals(15, javaClass0.getSuperclassNameIndex());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getClassName());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getFileName());
      //  // Unstable assertion: assertFalse(javaClass0.isSynthetic());
      //  // Unstable assertion: assertFalse(javaClass0.isEnum());
      //  // Unstable assertion: assertEquals("java.io", javaClass0.getPackageName());
      //  // Unstable assertion: assertTrue(javaClass0.isAbstract());
      //  // Unstable assertion: assertEquals("InputStream.java", javaClass0.getSourceFileName());
      //  // Unstable assertion: assertFalse(javaClass0.isStatic());
      //  // Unstable assertion: assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.getSuperClasses();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertNotNull(javaClass0);
      
      syntheticRepository0.clear();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JavaClass.debug");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      JavaClass[] javaClassArray0 = javaClass0.getSuperClasses();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertEquals(2, javaClassArray0.length);
      assertNotNull(javaClassArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.getSuperClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals(51, javaClass0.getMajor());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      syntheticRepository0.clear();
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertEquals(51, javaClass0.getMajor());
      assertEquals("SourceFile.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertEquals("org.apache.bcel.classfile.SourceFile", javaClass0.getClassName());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(25, javaClass0.getClassNameIndex());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isInterface());
      assertEquals(24, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass1.isStatic());
      assertEquals(76, javaClass1.getClassNameIndex());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertEquals("org.apache.bcel.classfile", javaClass1.getPackageName());
      assertFalse(javaClass1.isPrivate());
      assertEquals(83, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isTransient());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getClassName());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSynchronized());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertFalse(javaClass1.isNative());
      assertFalse(javaClass1.isFinal());
      assertFalse(javaClass1.isInterface());
      assertEquals(51, javaClass1.getMajor());
      assertFalse(javaClass1.isProtected());
      assertEquals(1057, javaClass1.getModifiers());
      assertTrue(javaClass1.isClass());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getFileName());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(1057, javaClass1.getAccessFlags());
      assertEquals("Attribute.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isSynthetic());
      assertTrue(javaClass1.isAbstract());
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      //  // Unstable assertion: assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      //  // Unstable assertion: assertEquals((byte)2, JavaClass.FILE);
      //  // Unstable assertion: assertEquals((byte)3, JavaClass.ZIP);
      //  // Unstable assertion: assertEquals((byte)1, JavaClass.HEAP);
      //  // Unstable assertion: assertEquals("InputStream.java", javaClass0.getSourceFileName());
      //  // Unstable assertion: assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      //  // Unstable assertion: assertFalse(javaClass0.isStatic());
      //  // Unstable assertion: assertFalse(javaClass0.isAnnotation());
      //  // Unstable assertion: assertTrue(javaClass0.isPublic());
      //  // Unstable assertion: assertFalse(javaClass0.isNative());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getModifiers());
      //  // Unstable assertion: assertTrue(javaClass0.isSynchronized());
      //  // Unstable assertion: assertFalse(javaClass0.isInterface());
      //  // Unstable assertion: assertTrue(javaClass0.isSuper());
      //  // Unstable assertion: assertFalse(javaClass0.isStrictfp());
      //  // Unstable assertion: assertFalse(javaClass0.isProtected());
      //  // Unstable assertion: assertFalse(javaClass0.isVarArgs());
      //  // Unstable assertion: assertFalse(javaClass0.isFinal());
      //  // Unstable assertion: assertEquals(9, javaClass0.getClassNameIndex());
      //  // Unstable assertion: assertEquals("java.io", javaClass0.getPackageName());
      //  // Unstable assertion: assertTrue(javaClass0.isAbstract());
      //  // Unstable assertion: assertEquals(1667, javaClass0.getMajor());
      //  // Unstable assertion: assertFalse(javaClass0.isVolatile());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getClassName());
      //  // Unstable assertion: assertEquals("java.io.InputStream", javaClass0.getFileName());
      //  // Unstable assertion: assertEquals(15, javaClass0.getSuperclassNameIndex());
      //  // Unstable assertion: assertEquals((byte)2, javaClass0.getSource());
      //  // Unstable assertion: assertFalse(javaClass0.isTransient());
      //  // Unstable assertion: assertFalse(javaClass0.isSynthetic());
      //  // Unstable assertion: assertFalse(javaClass0.isEnum());
      //  // Unstable assertion: assertTrue(javaClass0.isClass());
      //  // Unstable assertion: assertFalse(javaClass0.isPrivate());
      //  // Unstable assertion: assertEquals(0, javaClass0.getMinor());
      //  // Unstable assertion: assertEquals(1057, javaClass0.getAccessFlags());
      //  // Unstable assertion: assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.getInterfaces();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertNotNull(javaClass0);
      
      Attribute[] attributeArray0 = new Attribute[3];
      javaClass0.setAttributes(attributeArray0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals(3, attributeArray0.length);
      
      // Undeclared exception!
      try { 
        javaClass0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      assertNotNull(classPathRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isNative());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.getAllInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      assertNotNull(syntheticRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(49, javaClass0.getModifiers());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isFinal());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isVolatile());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.dump((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertTrue(javaClass0.isFinal());
      assertNotNull(javaClass0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        javaClass0.dump("compiler version\t");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isProtected());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.io", javaClass0.getPackageName());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals(1057, javaClass0.getModifiers());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isSynthetic());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        javaClass0.dump((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(51, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getFileName());
      assertFalse(javaClass0.isStrictfp());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertEquals("org.apache.bcel.classfile", javaClass0.getPackageName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertEquals("org.apache.bcel.classfile.InnerClasses", javaClass0.getClassName());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isInterface());
      assertNotNull(javaClass0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("Invalid frame type found while parsing stack map table: ", "Invalid frame type found while parsing stack map table: ", (File) mockFile0);
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("Invalid frame type found while parsing stack map table: 0Invalid frame type found while parsing stack map table: ", file0.getName());
      assertEquals("/tmp/foo.bar", file0.getParent());
      assertEquals("/tmp/foo.bar/Invalid frame type found while parsing stack map table: 0Invalid frame type found while parsing stack map table: ", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isInterface());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      Attribute[] attributeArray0 = new Attribute[3];
      javaClass0.setAttributes(attributeArray0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isEnum());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(3, attributeArray0.length);
      
      // Undeclared exception!
      try { 
        javaClass0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      JavaClass[] javaClassArray0 = javaClass0.getInterfaces();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isSuper());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isTransient());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(1, javaClassArray0.length);
      assertNotNull(javaClassArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertNotNull(javaClass0);
      
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isNative());
      assertEquals(33, javaClass0.getAccessFlags());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertEquals(33, javaClass0.getModifiers());
      assertNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isFinal());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertNotNull(javaClass0);
      
      boolean boolean0 = javaClass0.isSuper();
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertFalse(javaClass0.isStatic());
      assertTrue(javaClass0.isFinal());
      assertEquals(49, javaClass0.getModifiers());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      assertNotNull(syntheticRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertNotNull(javaClass0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.io.DataInputStream");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      javaClass0.dump(dataOutputStream0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertNotNull(javaClass0);
      
      Attribute[] attributeArray0 = javaClass0.getAttributes();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isVolatile());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isFinal());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isAbstract());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isSuper());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertEquals(1, attributeArray0.length);
      assertNotNull(attributeArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertNotNull(javaClass0);
      
      String string0 = javaClass0.getClassName();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isVolatile());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertEquals(1057, javaClass0.getModifiers());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertTrue(javaClass0.isAbstract());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isPublic());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isSuper());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isStrictfp());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.io.InputStream", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertNotNull(javaClass0);
      
      String string0 = javaClass0.getSuperclassName();
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)1, JavaClass.HEAP);
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isStrictfp());
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertTrue(javaClass0.isSuper());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isClass());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.lang.Object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("java.lang.Integer");
      assertNotNull(classPath0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertNotNull(javaClass0);
      
      int int0 = javaClass0.compareTo(javaClass0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertEquals("java.lang.Number", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Integer", javaClass0.getFileName());
      assertFalse(javaClass0.isAnnotation());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertFalse(javaClass0.isStatic());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isTransient());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals(1, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isVarArgs());
      assertTrue(javaClass0.isFinal());
      assertEquals("java.lang.Integer", javaClass0.getClassName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isEnum());
      assertEquals(94, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isProtected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertNotNull(javaClass0);
      
      String[] stringArray0 = javaClass0.getInterfaceNames();
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isVolatile());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isClass());
      assertFalse(javaClass0.isPrivate());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(33, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isInterface());
      assertFalse(javaClass0.isFinal());
      assertEquals("java.io.FilterInputStream", javaClass0.getSuperclassName());
      assertEquals(33, javaClass0.getModifiers());
      assertEquals("java.io.DataInputStream", javaClass0.getFileName());
      assertEquals("java.io.DataInputStream", javaClass0.getClassName());
      assertEquals("java.io", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertEquals(39, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isProtected());
      assertEquals(26, javaClass0.getClassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertTrue(javaClass0.isPublic());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isNative());
      assertEquals("DataInputStream.java", javaClass0.getSourceFileName());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isClass());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
      assertNotNull(javaClass0);
      
      javaClass0.setRepository(classLoaderRepository0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals("java.lang.Object", javaClass0.getClassName());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isFinal());
      assertTrue(javaClass0.isSynchronized());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(33, javaClass0.getModifiers());
      assertFalse(javaClass0.isInterface());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isSynthetic());
      assertEquals("java.lang.Object", javaClass0.getFileName());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isClass());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals(33, javaClass0.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isFinal());
      assertFalse(javaClass0.isInterface());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isNative());
      assertTrue(javaClass0.isPublic());
      assertEquals(52, javaClass0.getMajor());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isSynchronized());
      assertEquals("java.io", javaClass0.getPackageName());
      assertTrue(javaClass0.isAbstract());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isPrivate());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isEnum());
      assertFalse(javaClass0.isSynthetic());
      assertNotNull(javaClass0);
      
      // Undeclared exception!
      try { 
        javaClass0.implementationOf(javaClass0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.io.InputStream is no interface
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("r7eAlR14_vR2<A5'");
      assertNotNull(classPath0);
      
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      assertNotNull(memorySensitiveClassPathRepository0);
      
      Class<String> class0 = String.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertNotNull(javaClass0);
      
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      assertNotNull(classPathRepository0);
      
      Class<Object> class1 = Object.class;
      JavaClass javaClass1 = classPathRepository0.loadClass(class1);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isProtected());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertNotSame(javaClass1, javaClass0);
      assertNotNull(javaClass1);
      
      boolean boolean0 = javaClass0.instanceOf(javaClass1);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals(147, javaClass0.getSuperclassNameIndex());
      assertFalse(javaClass0.isSynthetic());
      assertEquals(49, javaClass0.getModifiers());
      assertEquals(49, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isNative());
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertFalse(javaClass0.isTransient());
      assertEquals(52, javaClass0.getMajor());
      assertFalse(javaClass0.isPrivate());
      assertFalse(javaClass0.isInterface());
      assertEquals("java.lang.String", javaClass0.getFileName());
      assertEquals("java.lang.String", javaClass0.getClassName());
      assertFalse(javaClass0.isAnnotation());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertEquals("String.java", javaClass0.getSourceFileName());
      assertTrue(javaClass0.isFinal());
      assertFalse(javaClass0.isEnum());
      assertTrue(javaClass0.isSuper());
      assertEquals((byte)2, javaClass0.getSource());
      assertEquals("java.lang", javaClass0.getPackageName());
      assertFalse(javaClass0.isAbstract());
      assertFalse(javaClass0.isStrictfp());
      assertTrue(javaClass0.isClass());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSynchronized());
      assertTrue(javaClass0.isPublic());
      assertEquals(43, javaClass0.getClassNameIndex());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.lang.Object", javaClass1.getClassName());
      assertFalse(javaClass1.isProtected());
      assertEquals((byte)2, javaClass1.getSource());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(33, javaClass1.getAccessFlags());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertTrue(javaClass1.isClass());
      assertFalse(javaClass1.isVarArgs());
      assertTrue(javaClass1.isSuper());
      assertFalse(javaClass1.isEnum());
      assertFalse(javaClass1.isStrictfp());
      assertFalse(javaClass1.isAbstract());
      assertFalse(javaClass1.isNative());
      assertEquals("java.lang", javaClass1.getPackageName());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertFalse(javaClass1.isVolatile());
      assertFalse(javaClass1.isStatic());
      assertFalse(javaClass1.isAnnotation());
      assertTrue(javaClass1.isPublic());
      assertFalse(javaClass1.isTransient());
      assertEquals("java.lang.Object", javaClass1.getSuperclassName());
      assertTrue(javaClass1.isSynchronized());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertFalse(javaClass1.isPrivate());
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertEquals(52, javaClass1.getMajor());
      assertFalse(javaClass1.isSynthetic());
      assertFalse(javaClass1.isInterface());
      assertFalse(javaClass1.isFinal());
      assertEquals(33, javaClass1.getModifiers());
      assertFalse(javaClass0.equals((Object)javaClass1));
      assertFalse(javaClass1.equals((Object)javaClass0));
      assertTrue(boolean0);
      assertNotSame(javaClass0, javaClass1);
      assertNotSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertNotNull(javaClass0);
      
      boolean boolean0 = javaClass0.instanceOf(javaClass0);
      assertEquals((byte)2, JavaClass.FILE);
      assertEquals((byte)3, JavaClass.ZIP);
      assertEquals((byte)1, JavaClass.HEAP);
      assertEquals("java.lang.Object", javaClass0.getSuperclassName());
      assertEquals(52, javaClass0.getMajor());
      assertEquals("InputStream.java", javaClass0.getSourceFileName());
      assertFalse(javaClass0.isStatic());
      assertFalse(javaClass0.isAnnotation());
      assertEquals(15, javaClass0.getSuperclassNameIndex());
      assertTrue(javaClass0.isPublic());
      assertFalse(javaClass0.isNative());
      assertEquals(1057, javaClass0.getModifiers());
      assertTrue(javaClass0.isSynchronized());
      assertFalse(javaClass0.isInterface());
      assertTrue(javaClass0.isSuper());
      assertFalse(javaClass0.isStrictfp());
      assertFalse(javaClass0.isProtected());
      assertFalse(javaClass0.isVarArgs());
      assertFalse(javaClass0.isFinal());
      assertEquals(9, javaClass0.getClassNameIndex());
      assertTrue(javaClass0.isAbstract());
      assertEquals("java.io.InputStream", javaClass0.getFileName());
      assertFalse(javaClass0.isVolatile());
      assertEquals("java.io", javaClass0.getPackageName());
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      assertEquals((byte)2, javaClass0.getSource());
      assertFalse(javaClass0.isTransient());
      assertFalse(javaClass0.isSynthetic());
      assertFalse(javaClass0.isEnum());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(1057, javaClass0.getAccessFlags());
      assertFalse(javaClass0.isPrivate());
      assertTrue(javaClass0.isClass());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass("org.apache.bcel.classfile.JavaClass");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.instanceOf(javaClass1);
      assertEquals(147, javaClass1.getSuperclassNameIndex());
      assertEquals("String.java", javaClass1.getSourceFileName());
      assertEquals(52, javaClass1.getMajor());
      assertEquals(0, javaClass1.getMinor());
      assertEquals(43, javaClass1.getClassNameIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isClass();
      assertTrue(boolean0);
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals(51, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      JavaClass javaClass0 = syntheticRepository0.loadClass("org.apache.bcel.classfile.Node");
      boolean boolean0 = javaClass0.isClass();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertTrue(javaClass0.isSuper());
      
      javaClass0.setModifiers(0);
      boolean boolean0 = javaClass0.isSuper();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      // Undeclared exception!
      try { 
        javaClass0.implementationOf(javaClass1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Object is no interface
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass("org.apache.bcel.classfile.JavaClass");
      javaClass0.toString();
      assertEquals(51, javaClass0.getMajor());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertTrue(javaClass0.isSuper());
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      // Undeclared exception!
      try { 
        javaClass0.getMethod((java.lang.reflect.Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      syntheticRepository0.clear();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JavaClass.debug");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AnnotationEntry[] annotationEntryArray0 = javaClass0.getAnnotationEntries();
      //  // Unstable assertion: assertNotNull(annotationEntryArray0);
      //  // Unstable assertion: assertEquals("jCN2,[(Dg*H3gpr", javaClass0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAttributes((Attribute[]) null);
      byte[] byteArray0 = javaClass0.getBytes();
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(1489, byteArray0.length);
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      String string0 = javaClass0.toString();
      MockFile mockFile0 = new MockFile(string0);
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not create the directory public class java.lang.Object extends java.lang.Object
         // filename\t\tjava.lang.Object
         // compiled from\t\tObject.java
         // compiler version\t52.0
         // access flags\t\t33
         // constant pool\t\t78 entries
         // ACC_SUPER flag\t\ttrue
         // 
         // Attribute(s):
         // \torg.apache.bcel.classfile.SourceFile@0000000140
         // 
         // 14 methods:
         // \tpublic void <init>()
         // \tprivate static native void registerNatives()
         // \tpublic final native Class getClass() [Signature: ()Ljava/lang
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      MockFile mockFile0 = new MockFile("JavaClass.java");
      MockFile mockFile1 = new MockFile(mockFile0, "JavaClass.java");
      javaClass0.dump((File) mockFile1);
      assertEquals(19113L, mockFile1.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaClass.Debug("String$1");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int[] intArray0 = new int[2];
      Field[] fieldArray0 = new Field[1];
      Attribute[] attributeArray0 = new Attribute[0];
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(128, (-3013), "uE", 128, (-3013), (-3013), constantPool0, intArray0, fieldArray0, (Method[]) null, attributeArray0, (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 128. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setMajor((-1667));
      assertEquals((-1667), javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      String string0 = javaClass0.getSourceFileName();
      assertEquals("InputStream.java", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      int int0 = javaClass0.getMajor();
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getFileName();
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals(51, javaClass0.getMajor());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isNested();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      Attribute[] attributeArray0 = new Attribute[3];
      javaClass0.setAttributes(attributeArray0);
      MockFile mockFile0 = new MockFile(",");
      // Undeclared exception!
      try { 
        javaClass0.dump((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass[] javaClassArray0 = javaClass0.getAllInterfaces();
      assertEquals(2, javaClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      // Undeclared exception!
      try { 
        javaClass0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertEquals(4, javaClass0.getClassNameIndex());
      
      javaClass0.setClassNameIndex(0);
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getConstantPool();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals(51, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      Method[] methodArray0 = javaClass0.getMethods();
      //  // Unstable assertion: assertNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setClassName((String) null);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      assertNotNull(javaClass1);
      assertEquals(0, javaClass1.getMinor());
      assertEquals("Object.java", javaClass1.getSourceFileName());
      assertEquals(0, javaClass1.getSuperclassNameIndex());
      assertEquals(17, javaClass1.getClassNameIndex());
      assertEquals(52, javaClass1.getMajor());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setSuperclassName("jCN2,[(Dg*H3gpr");
      assertEquals((byte)1, JavaClass.HEAP);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      // Undeclared exception!
      try { 
        javaClass0.dump((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      int[] intArray0 = new int[7];
      javaClass0.setInterfaces(intArray0);
      assertFalse(javaClass0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setFileName("Clone Not Supported");
      assertFalse(javaClass0.isFinal());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getPackageName();
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      boolean boolean0 = javaClass0.isAnonymous();
      assertEquals(4, javaClass0.getClassNameIndex());
      assertEquals(51, javaClass0.getMajor());
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      assertEquals("JavaClass.java", javaClass0.getSourceFileName());
      assertFalse(boolean0);
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int[] intArray0 = new int[6];
      Field[] fieldArray0 = new Field[0];
      Method[] methodArray0 = new Method[0];
      Attribute[] attributeArray0 = new Attribute[0];
      JavaClass javaClass0 = null;
      try {
        javaClass0 = new JavaClass(7, 253, "S?.x!:hNC`i", 1524, (-3382), 253, constantPool0, intArray0, fieldArray0, methodArray0, attributeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 7. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      assertEquals(177, javaClass0.getSuperclassNameIndex());
      
      javaClass0.setSuperclassNameIndex(0);
      assertEquals(51, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals("Integer.java", javaClass0.getSourceFileName());
      
      javaClass0.setSourceFileName("I/Rid");
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getRepository();
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setMinor((byte)1);
      assertEquals(1, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassPath classPath0 = new ClassPath((ClassPath) null, "org.apache.bcel.classfile.SourceFile");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setInterfaceNames((String[]) null);
      // Undeclared exception!
      try { 
        javaClass0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      int[] intArray0 = javaClass0.getInterfaceIndices();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<SourceFile> class0 = SourceFile.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setFields((Field[]) null);
      assertTrue(javaClass0.isClass());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("4\"{NS'~.AfFgpI_YcwK");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setConstantPool((ConstantPool) null);
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int int0 = javaClass0.getSuperclassNameIndex();
      assertEquals(0, int0);
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(52, javaClass0.getMajor());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      try { 
        javaClass0.dump("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InnerClasses> class0 = InnerClasses.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      byte byte0 = javaClass0.getSource();
      assertEquals(0, javaClass0.getMinor());
      assertEquals(31, javaClass0.getSuperclassNameIndex());
      assertEquals(51, javaClass0.getMajor());
      assertEquals(28, javaClass0.getClassNameIndex());
      assertEquals("InnerClasses.java", javaClass0.getSourceFileName());
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      javaClass0.setMethods((Method[]) null);
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getFields();
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals("Object.java", javaClass0.getSourceFileName());
      assertEquals(0, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      JavaClass.setComparator(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.hashCode();
      assertEquals(0, javaClass0.getSuperclassNameIndex());
      assertEquals(17, javaClass0.getClassNameIndex());
      assertEquals(52, javaClass0.getMajor());
      assertEquals(0, javaClass0.getMinor());
      assertEquals("Object.java", javaClass0.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      // Undeclared exception!
      try { 
        javaClass0.equals(classLoader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.misc.Launcher$AppClassLoader cannot be cast to org.apache.bcel.classfile.JavaClass
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }
}
