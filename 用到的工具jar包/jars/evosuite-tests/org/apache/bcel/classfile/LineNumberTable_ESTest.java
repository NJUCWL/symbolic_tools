/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:42:11 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineNumberTable_ESTest extends LineNumberTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumber lineNumber0 = new LineNumber(2935, 2935);
      lineNumberArray0[0] = lineNumber0;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      Attribute attribute0 = lineNumberTable0.copy(constantPool1);
      assertNotSame(attribute0, lineNumberTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumber lineNumber0 = new LineNumber(3653, (-1));
      lineNumberArray0[0] = lineNumber0;
      LineNumberTable lineNumberTable0 = new LineNumberTable(3653, (-1), lineNumberArray0, (ConstantPool) null);
      int int0 = lineNumberTable0.getSourceLine(4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumber lineNumber0 = new LineNumber((-3487), (-3487));
      lineNumberArray0[0] = lineNumber0;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-3487), 0, lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(72);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumberTable lineNumberTable0 = new LineNumberTable(3653, (-1), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.getSourceLine(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[5];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.getSourceLine(62049);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumber lineNumber0 = new LineNumber(2935, 2935);
      lineNumberArray0[0] = lineNumber0;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(2935, 2935, lineNumberArray0, constantPool0);
      String string0 = lineNumberTable0.toString();
      assertEquals("LineNumber(2935, 2935)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(2935, 2935, lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(74, 74, lineNumberArray0, constantPool0);
      String string0 = lineNumberTable0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-3487), (-3487), lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getTableLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumberTable lineNumberTable0 = new LineNumberTable(3653, (-1), lineNumberArray0, (ConstantPool) null);
      LineNumber[] lineNumberArray1 = lineNumberTable0.getLineNumberTable();
      assertEquals(1, lineNumberArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(74, 74, lineNumberArray0, constantPool0);
      LineNumber[] lineNumberArray1 = lineNumberTable0.getLineNumberTable();
      assertSame(lineNumberArray1, lineNumberArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-3487), (-3487), lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable((LineNumberTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable(225, 0, (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable((-3493), 0, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 1, (LineNumber[]) null, constantPool0);
      int int0 = lineNumberTable0.getTableLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(74, 74, lineNumberArray0, constantPool0);
      Attribute attribute0 = lineNumberTable0.copy(constantPool0);
      assertNotSame(attribute0, lineNumberTable0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      LineNumber lineNumber0 = new LineNumber(2935, 2935);
      lineNumberArray0[0] = lineNumber0;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(62049);
      assertEquals(2935, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(74, 74, lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(74);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(74, 74, lineNumberArray0, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("t[#PX1)$Gt6LG|+O");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      lineNumberTable0.dump(dataOutputStream0);
      assertEquals(74, lineNumberTable0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable(3173, (-445), dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 1, (LineNumber[]) null, constantPool0);
      lineNumberTable0.setLineNumberTable((LineNumber[]) null);
      assertEquals(1, lineNumberTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 1, (LineNumber[]) null, constantPool0);
      LineNumberTable lineNumberTable1 = new LineNumberTable(lineNumberTable0);
      assertFalse(lineNumberTable1.equals((Object)lineNumberTable0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      LineNumberTable lineNumberTable0 = new LineNumberTable(1787, 109, (LineNumber[]) null, constantPool0);
      lineNumberTable0.accept(emptyVisitor0);
      assertEquals(109, lineNumberTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(22, 22, (LineNumber[]) null, constantPool0);
      LineNumber[] lineNumberArray0 = lineNumberTable0.getLineNumberTable();
      assertNull(lineNumberArray0);
  }
}
