/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:04:02 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantNameAndType_ESTest extends ConstantNameAndType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantNameAndType0.dump(dataOutputStream0);
      assertEquals("\f\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals(0, int0);
      assertEquals(0, constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1965, 115);
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals(115, int0);
      assertEquals(1965, constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(107, 107);
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals(107, int0);
      assertEquals(107, constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2426, 58);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantNameAndType0.getSignature(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(12, 12);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantNameAndType0.getName(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, (-2012));
      // Undeclared exception!
      try { 
        constantNameAndType0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      // Undeclared exception!
      try { 
        constantNameAndType0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2869), (-1));
      int int0 = constantNameAndType0.getNameIndex();
      assertEquals((-2869), int0);
      assertEquals((-1), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1142), (-1142));
      int int0 = constantNameAndType0.getSignatureIndex();
      assertEquals((-1142), constantNameAndType0.getNameIndex());
      assertEquals((-1142), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 306);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
      assertEquals(0, constantNameAndType0.getSignatureIndex());
      assertEquals(0, constantNameAndType0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      String string0 = constantNameAndType0.toString();
      assertEquals("CONSTANT_NameAndType[12](name_index = -1460, signature_index = -1460)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      constantNameAndType0.setNameIndex((-1460));
      assertEquals((-1460), constantNameAndType0.getNameIndex());
      assertEquals((-1460), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      constantNameAndType0.setSignatureIndex((-1460));
      assertEquals((-1460), constantNameAndType0.getNameIndex());
      assertEquals((-1460), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantNameAndType0.accept(emptyVisitor0);
      assertEquals((-1460), constantNameAndType0.getNameIndex());
      assertEquals((-1460), constantNameAndType0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantNameAndType0.getSignature(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1460), (-1460));
      // Undeclared exception!
      try { 
        constantNameAndType0.getName((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1), (-1));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantNameAndType0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }
}
