/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:10:20 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.StackMapType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackMapType_ESTest extends StackMapType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)8, 231, (ConstantPool) null);
      stackMapType0.setType((byte)8);
      assertEquals(231, stackMapType0.getIndex());
      assertEquals((byte)8, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)8, 231, (ConstantPool) null);
      byte byte0 = stackMapType0.getType();
      assertEquals(231, stackMapType0.getIndex());
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      int int0 = stackMapType0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, 636, constantPool0);
      int int0 = stackMapType0.getIndex();
      assertEquals(636, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      stackMapType0.getConstantPool();
      assertEquals(0, stackMapType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, 0, constantPool0);
      stackMapType0.getConstantPool();
      assertEquals(0, stackMapType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, constantPool0);
      StackMapType stackMapType1 = stackMapType0.copy();
      assertEquals(0, stackMapType1.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (-495), constantPool0);
      StackMapType stackMapType1 = stackMapType0.copy();
      assertEquals((-495), stackMapType1.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapType0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oy!@Y[&#>]=}L]&", true);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        stackMapType0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type for StackMapType: -18
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType((DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(156);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      File file0 = MockFile.createTempFile("]n$c9Ygo.Uh", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)8, (byte)8, (ConstantPool) null);
      boolean boolean0 = stackMapType0.hasIndex();
      assertEquals(8, stackMapType0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, constantPool0);
      stackMapType0.hasIndex();
      assertEquals(0, stackMapType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)8, 231, (ConstantPool) null);
      assertEquals((byte)8, stackMapType0.getType());
      
      String string0 = stackMapType0.toString();
      assertEquals("(type=NewObject, offset=231)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte)7, constantPool0);
      // Undeclared exception!
      try { 
        stackMapType0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 7. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte)7, constantPool0);
      boolean boolean0 = stackMapType0.hasIndex();
      assertEquals(7, stackMapType0.getIndex());
      assertTrue(boolean0);
      assertEquals((byte)7, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)8, 231, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(231);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapType0.dump(dataOutputStream0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertTrue(stackMapType0.hasIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapType0.dump(dataOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, constantPool0);
      stackMapType0.setType((byte)0);
      assertEquals(0, stackMapType0.getIndex());
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapType0.setType((byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type for StackMapType: 48
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (-495), constantPool0);
      // Undeclared exception!
      try { 
        stackMapType0.setType((byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type for StackMapType: -60
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType((byte)18, (byte)18, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type for StackMapType: 18
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = null;
      try {
        stackMapType0 = new StackMapType((byte) (-112), (byte) (-112), constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type for StackMapType: -112
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapType stackMapType0 = new StackMapType(dataInputStream0, (ConstantPool) null);
      assertEquals((-1), stackMapType0.getIndex());
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (-495), constantPool0);
      String string0 = stackMapType0.toString();
      assertEquals((-495), stackMapType0.getIndex());
      assertEquals((byte)0, stackMapType0.getType());
      assertEquals("(type=Bogus)", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      byte byte0 = stackMapType0.getType();
      assertEquals((byte)0, byte0);
      assertEquals(0, stackMapType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (-495), constantPool0);
      int int0 = stackMapType0.getIndex();
      assertEquals((-495), int0);
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      stackMapType0.setIndex((byte)0);
      assertEquals((byte)0, stackMapType0.getType());
      assertEquals(0, stackMapType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (-495), constantPool0);
      stackMapType0.getConstantPool();
      assertEquals((-495), stackMapType0.getIndex());
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte)0, (ConstantPool) null);
      stackMapType0.setConstantPool((ConstantPool) null);
      assertEquals(0, stackMapType0.getIndex());
      assertEquals((byte)0, stackMapType0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte)7, constantPool0);
      StackMapType stackMapType1 = stackMapType0.copy();
      assertEquals(7, stackMapType1.getIndex());
      assertEquals((byte)7, stackMapType1.getType());
  }
}
