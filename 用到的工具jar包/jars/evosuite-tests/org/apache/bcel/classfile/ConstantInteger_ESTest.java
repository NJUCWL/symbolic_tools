/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:44:05 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantInteger_ESTest extends ConstantInteger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      int int0 = constantInteger0.getBytes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((-15));
      int int0 = constantInteger0.getBytes();
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      // Undeclared exception!
      try { 
        constantInteger0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3289);
      // Undeclared exception!
      try { 
        constantInteger0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals(0, constantInteger1.getBytes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3289);
      int int0 = constantInteger0.getBytes();
      assertEquals(3289, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(253);
      MockFile mockFile0 = new MockFile("g\"}{60a;*9Cd", "g\"}{60a;*9Cd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantInteger0.dump(dataOutputStream0);
      assertEquals(253, constantInteger0.getBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(253);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantInteger0.accept(descendingVisitor0);
      assertEquals(253, constantInteger0.getBytes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(253);
      Object object0 = constantInteger0.getConstantValue((ConstantPool) null);
      assertEquals(253, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(253);
      String string0 = constantInteger0.toString();
      assertEquals("CONSTANT_Integer[3](bytes = 253)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(3627);
      constantInteger0.setBytes(3627);
      assertEquals(3627, constantInteger0.getBytes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((ConstantInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }
}
