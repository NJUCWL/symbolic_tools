/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:28:27 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(2340, (-40), (-34), attributeArray0, constantPool0);
      Constant[] constantArray1 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      // Undeclared exception!
      try { 
        field0.copy(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(121, 0, 0, attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertFalse(field1.isAbstract());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(103, 8, 8, attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertTrue(field1.isPublic());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 95, 1, 0, constantPool0);
      attributeArray0[0] = (Attribute) pMGClass0;
      Field field0 = new Field(2340, (-40), (-34), attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertEquals(2340, field1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((-2400), (-2400), 1, (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        field0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Field.setComparator(bCELComparator0);
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(449, (-839), 449, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.Field cannot be cast to org.apache.bcel.classfile.JavaClass
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((-2400), (-2400), 1, (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        field0.getType();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field((-15), (-15), 348, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.equals(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantPool cannot be cast to org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Field field0 = null;
      try {
        field0 = new Field((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[8];
      Field field0 = new Field(132, 1905, 0, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[8];
      Field field0 = new Field(132, 1905, 0, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.getConstantValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Field", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(449, (-839), 449, attributeArray0, constantPool0);
      ConstantValue constantValue0 = field0.getConstantValue();
      assertNull(constantValue0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(449, (-839), 449, attributeArray0, constantPool0);
      Field field1 = new Field(field0);
      assertTrue(field1.isTransient());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = null;
      try {
        field0 = new Field((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(449, (-839), 449, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(449, (-839), 449, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[9];
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((byte)38, (byte)38, (-1390), attributeArray0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        field0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[8];
      Field field0 = new Field(5458, 1905, 0, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BCELComparator bCELComparator0 = Field.getComparator();
      Field.setComparator(bCELComparator0);
  }
}
