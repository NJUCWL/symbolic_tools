/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:37:09 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackMapEntry_ESTest extends StackMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-172), 1609, (StackMapType[]) null, 0, (StackMapType[]) null, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      stackMapEntry0.accept(emptyVisitor0);
      assertEquals((-172), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getTypesOfStackItems();
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapTypeArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getNumberOfStackItems();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getNumberOfLocals();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 504, (StackMapType[]) null, constantPool0);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, int0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(95, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry((-765), (-765), (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals((-765), stackMapEntry0.getByteCodeOffset());
      assertEquals((-765), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 504, (StackMapType[]) null, constantPool0);
      stackMapEntry0.getConstantPool();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(95, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[5];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-253), (-253), stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals((-253), int0);
      assertEquals((-253), stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(82, 82, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertEquals(82, stackMapEntry1.getByteCodeOffset());
      assertEquals(82, stackMapEntry1.getFrameType());
      assertNotSame(stackMapEntry1, stackMapEntry0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 0, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals(0, stackMapEntry1.getFrameType());
      assertEquals(0, stackMapEntry1.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry((-765), (-765), (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertEquals((-765), stackMapEntry1.getByteCodeOffset());
      assertEquals((-765), stackMapEntry1.getFrameType());
      assertNotSame(stackMapEntry1, stackMapEntry0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(2564, 2564, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry((DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(32767);
      assertEquals(32767, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-172), 1609, (StackMapType[]) null, 0, (StackMapType[]) null, (ConstantPool) null);
      assertEquals((-172), stackMapEntry0.getByteCodeOffset());
      
      stackMapEntry0.setByteCodeOffset(0);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset((-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap offset: -15
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(150, 2773, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-261), (-261), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems((StackMapType[]) null);
      assertEquals((-261), stackMapEntry0.getFrameType());
      assertEquals((-261), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(150, 2773, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfLocals(stackMapTypeArray0);
      assertEquals(150, stackMapEntry0.getFrameType());
      assertEquals(2773, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-172), 1609, (StackMapType[]) null, 0, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setTypesOfLocals((StackMapType[]) null);
      assertEquals((-172), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(150, 2768, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(150);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type: 150
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(70);
      stackMapEntry0.updateByteCodeOffset(70);
      stackMapEntry0.setByteCodeOffset(0);
      assertEquals(247, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.updateByteCodeOffset(143);
      stackMapEntry0.setByteCodeOffset((byte)123);
      assertEquals(123, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-6), (-951), stackMapTypeArray0, (-6), stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap offset: -6
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-7), (-951), stackMapTypeArray0, (-7), stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType(2064);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 504, (StackMapType[]) null, constantPool0);
      stackMapEntry0.setFrameType(252);
      assertEquals(252, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-8), (-8), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(250);
      assertEquals(250, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(150, 2768, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType((-704));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.updateByteCodeOffset((-704));
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(1, int0);
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-8), (-8), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type: -8
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[3];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-45), 70, stackMapTypeArray0, (-951), stackMapTypeArray0, (ConstantPool) null);
      String string0 = stackMapEntry0.toString();
      assertEquals("(SAME, offset delta=-45, locals={null, null, null}, stack items={null, null, null})", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(70);
      stackMapEntry0.updateByteCodeOffset(70);
      stackMapEntry0.toString();
      assertEquals(247, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(50);
      stackMapEntry0.updateByteCodeOffset(50);
      stackMapEntry0.toString();
      assertEquals(251, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(50);
      stackMapEntry0.updateByteCodeOffset(50);
      File file0 = MockFile.createTempFile("(SAME_EXTENDED, offset delta=50)", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(100, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(150, 2768, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1?`Q.Z8[lUW");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Stack map table tag: 150
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(2064, 0, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("3BK>?6K");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Stack map table tag: 2064
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.updateByteCodeOffset((-704));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-951), stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(SAME, offset delta=0, locals={null}, stack items={null})");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-261), (-261), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      String string0 = stackMapEntry0.toString();
      assertEquals("(UNKNOWN (-261), offset delta=-261)", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 95, (StackMapType[]) null, constantPool0);
      StackMapType[] stackMapTypeArray0 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertEquals(95, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getNumberOfLocals();
      assertEquals(2759, stackMapEntry0.getByteCodeOffset());
      assertEquals(115, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 95, (StackMapType[]) null, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      assertEquals(95, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, int0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(95, 95, (StackMapType[]) null, 95, (StackMapType[]) null, constantPool0);
      stackMapEntry0.setNumberOfLocals(0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(95, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(115, int0);
      assertEquals(2759, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      assertEquals(115, stackMapEntry0.getFrameType());
      assertSame(stackMapTypeArray1, stackMapTypeArray0);
      assertEquals(2759, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(115, 2759, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(2759, int0);
      assertEquals(115, stackMapEntry0.getFrameType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.updateByteCodeOffset(143);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[5];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-253), (-253), stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setConstantPool((ConstantPool) null);
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-172), 1609, (StackMapType[]) null, 0, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setNumberOfStackItems(0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-172), stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(248, 247, stackMapTypeArray0, (byte)22, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getConstantPool();
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
  }
}
