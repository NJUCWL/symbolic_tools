/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:45:13 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ParameterAnnotationEntry;
import org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterAnnotations_ESTest extends ParameterAnnotations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations(1, 1626, dataInputStream0, constantPool0);
      runtimeVisibleParameterAnnotations0.setLength((byte)0);
      runtimeVisibleParameterAnnotations0.copy(constantPool0);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations(1, 1626, dataInputStream0, constantPool0);
      runtimeVisibleParameterAnnotations0.copy(constantPool0);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations((-1692), (-2473), dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        runtimeVisibleParameterAnnotations0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("oRzy&b+Z6_=/F.D&Jb./9Kz[/F.D&Jb./9Kz[0F.D&Jb./9Kz[");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations(1, 1626, dataInputStream0, constantPool0);
      MockFile mockFile0 = new MockFile("oRzy&b+Z6_=");
      MockFile mockFile1 = new MockFile(mockFile0, "F.D&Jb./9Kz[");
      File file0 = MockFile.createTempFile("F.D&Jb./9Kz[", "F.D&Jb./9Kz[", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        runtimeVisibleParameterAnnotations0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations((-1692), (-2473), dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        runtimeVisibleParameterAnnotations0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ParameterAnnotations", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations(1, 1626, dataInputStream0, constantPool0);
      MockFile mockFile0 = new MockFile("oRzy&b+Z6_=");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      runtimeVisibleParameterAnnotations0.dump(dataOutputStream0);
      assertEquals(7L, mockFile0.length());
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeInvisibleParameterAnnotations runtimeInvisibleParameterAnnotations0 = null;
      try {
        runtimeInvisibleParameterAnnotations0 = new RuntimeInvisibleParameterAnnotations((byte)0, (byte)0, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations(1, 1626, dataInputStream0, constantPool0);
      runtimeVisibleParameterAnnotations0.getParameterAnnotationTable();
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations((-1692), (-2473), dataInputStream0, constantPool0);
      runtimeVisibleParameterAnnotations0.copy(constantPool0);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations((-1692), (-2473), dataInputStream0, constantPool0);
      ParameterAnnotationEntry[] parameterAnnotationEntryArray0 = runtimeVisibleParameterAnnotations0.getParameterAnnotationEntries();
      runtimeVisibleParameterAnnotations0.setParameterAnnotationTable(parameterAnnotationEntryArray0);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      RuntimeVisibleParameterAnnotations runtimeVisibleParameterAnnotations0 = new RuntimeVisibleParameterAnnotations((-1692), (-2473), dataInputStream0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      runtimeVisibleParameterAnnotations0.accept(emptyVisitor0);
      assertEquals(4, byteArrayInputStream0.available());
  }
}
