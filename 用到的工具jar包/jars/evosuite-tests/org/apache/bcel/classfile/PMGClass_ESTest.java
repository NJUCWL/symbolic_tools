/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:39:32 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.PMGClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PMGClass_ESTest extends PMGClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(14, 2909, (-1888), (-2644), (ConstantPool) null);
      pMGClass0.setPMGIndex((-821));
      assertEquals((-821), pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2567), (-1137), (-3843), (-2567), (ConstantPool) null);
      pMGClass0.setPMGClassIndex(4626);
      assertEquals(4626, pMGClass0.getPMGClassIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2289), (-2289), (-1517), 737, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(21);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      pMGClass0.dump(dataOutputStream0);
      assertEquals(737, pMGClass0.getPMGClassIndex());
      assertEquals((-1517), pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(9, 0, 0, 0, constantPool0);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(0, pMGClass0.getPMGClassIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2289), (-2289), (-1517), 737, (ConstantPool) null);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(737, pMGClass0.getPMGClassIndex());
      assertEquals((-1517), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(1691, 1691, 0, 0, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, int0);
      assertEquals(0, pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass((-3542), (-3542), (-3542), (-948), constantPool0);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals((-948), int0);
      assertEquals((-3542), pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 0, 171, (-3347), constantPool0);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy(constantPool0);
      assertEquals((-3347), pMGClass1.getPMGClassIndex());
      assertEquals(171, pMGClass1.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1147, 1147, 1147, 1147, constantPool0);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy(constantPool0);
      assertEquals(1147, pMGClass1.getPMGClassIndex());
      assertEquals(1147, pMGClass1.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      PMGClass pMGClass0 = new PMGClass((-39), (-39), 232, (-216), constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 0, 0, 3751, constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGClassName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3751. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(498, (-2391), 498, 167, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass((PMGClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass((-3549), (-2682), dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass(177, 0, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      PMGClass pMGClass0 = new PMGClass(6, 0, dataInputStream0, (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGIndex());
      assertEquals(0, pMGClass1.getPMGClassIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass((-3542), (-3542), (-3542), (-948), constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGName();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3542. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2567), (-1137), (-3843), (-2567), (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals((-2567), pMGClass1.getPMGClassIndex());
      assertEquals((-3843), pMGClass1.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2289), (-2289), (-1517), 737, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGClassName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-2567), (-1137), (-3843), (-2567), (ConstantPool) null);
      PMGClass pMGClass1 = new PMGClass(pMGClass0);
      assertEquals((-2567), pMGClass0.getPMGClassIndex());
      assertEquals((-3843), pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(31, 31, 31, 31, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(31, int0);
      assertEquals(31, pMGClass0.getPMGIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(31, 31, 31, 31, (ConstantPool) null);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(31, int0);
      assertEquals(31, pMGClass0.getPMGClassIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      PMGClass pMGClass0 = new PMGClass(0, 797, (-4203), 1425, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        pMGClass0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(175, 175, 175, 0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      pMGClass0.accept(emptyVisitor0);
      assertEquals(175, pMGClass0.getPMGIndex());
      assertEquals(0, pMGClass0.getPMGClassIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(31, 31, 31, 31, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass(12, (-3132), (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }
}
