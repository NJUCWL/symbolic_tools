/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:48:50 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExceptionTable_ESTest extends ExceptionTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[8];
      ExceptionTable exceptionTable0 = new ExceptionTable(197, 197, intArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      exceptionTable0.accept(emptyVisitor0);
      assertEquals(8, exceptionTable0.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(2978, 2978, intArray0, constantPool0);
      int int0 = exceptionTable0.getNumberOfExceptions();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(2978, 2978, intArray0, constantPool0);
      int[] intArray1 = exceptionTable0.getExceptionIndexTable();
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(2978, 2978, intArray0, constantPool0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy((ConstantPool) null);
      assertNotSame(exceptionTable1, exceptionTable0);
      assertEquals(3, exceptionTable1.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[7];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, (ConstantPool) null);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy((ConstantPool) null);
      assertEquals(7, exceptionTable1.getNumberOfExceptions());
      assertNotSame(exceptionTable1, exceptionTable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable((-1574), (-916), intArray0, constantPool0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy(constantPool0);
      assertEquals(6, exceptionTable1.getNumberOfExceptions());
      assertNotSame(exceptionTable1, exceptionTable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(2978, 2978, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[9];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(4711, 4711, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.getExceptionNames();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        exceptionTable0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable((-2484), 840, intArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("H![g0`8.rr+<?tQ.$", "YKD_WR+}Kkc%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        exceptionTable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable(4772, (-937), (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable(760, (-961), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable(1027, 2199, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionTable exceptionTable0 = new ExceptionTable(5358, 0, (int[]) null, (ConstantPool) null);
      assertEquals(0, exceptionTable0.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(12, 12, intArray0, (ConstantPool) null);
      int[] intArray1 = exceptionTable0.getExceptionIndexTable();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable((-2484), 840, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        exceptionTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(12, 12, intArray0, (ConstantPool) null);
      String string0 = exceptionTable0.toString();
      assertEquals("Exceptions: ", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable((-2484), 840, intArray0, (ConstantPool) null);
      exceptionTable0.setExceptionIndexTable(intArray0);
      assertEquals(9, exceptionTable0.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, (ConstantPool) null);
      assertEquals(9, exceptionTable0.getNumberOfExceptions());
      
      exceptionTable0.setExceptionIndexTable((int[]) null);
      assertEquals(0, exceptionTable0.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(2694, 2694, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.getExceptionNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(12, 12, intArray0, (ConstantPool) null);
      String[] stringArray0 = exceptionTable0.getExceptionNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(12, 12, intArray0, (ConstantPool) null);
      int int0 = exceptionTable0.getNumberOfExceptions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable((-2484), 840, intArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("H![g0`8.rr+<?tQ.$", "YKD_WR+}Kkc%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      exceptionTable0.dump(dataOutputStream0);
      assertEquals(26L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      ExceptionTable exceptionTable0 = new ExceptionTable((-2484), 840, intArray0, (ConstantPool) null);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        exceptionTable0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(2694, 2694, intArray0, constantPool0);
      ExceptionTable exceptionTable1 = new ExceptionTable(exceptionTable0);
      assertEquals(6, exceptionTable1.getNumberOfExceptions());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable((ExceptionTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }
}
