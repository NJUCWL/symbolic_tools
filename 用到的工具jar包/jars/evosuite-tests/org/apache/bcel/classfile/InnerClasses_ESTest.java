/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:40:44 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InnerClasses_ESTest extends InnerClasses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      assertTrue(javaClass1.isClass());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = new InnerClasses((-584), (-584), innerClassArray0, constantPool0);
      InnerClass[] innerClassArray1 = innerClasses0.getInnerClasses();
      assertSame(innerClassArray1, innerClassArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(298, 0, innerClassArray0, (ConstantPool) null);
      innerClasses0.setNameIndex(0);
      Attribute attribute0 = innerClasses0.copy((ConstantPool) null);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClass innerClass0 = new InnerClass(1552, 1552, 53, 1552);
      innerClassArray0[0] = innerClass0;
      innerClassArray0[1] = innerClass0;
      innerClassArray0[2] = innerClassArray0[1];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      Attribute attribute0 = innerClasses0.copy((ConstantPool) null);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = new InnerClasses((-584), (-584), innerClassArray0, constantPool0);
      Attribute attribute0 = innerClasses0.copy(constantPool0);
      assertNotSame(attribute0, innerClasses0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[1];
      InnerClass innerClass0 = new InnerClass((-352), 1096, (-352), (-3677));
      innerClassArray0[0] = innerClass0;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses((-352), (-352), innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        innerClasses0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -352. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = new InnerClasses((-584), (-584), innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        innerClasses0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses((-1887), (-1887), innerClassArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("\n", "InnerClasses(0):\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        innerClasses0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses((InnerClasses) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses((-3204), 1289, (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses(0, 2036, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses((byte)110, (byte) (-75), (InnerClass[]) null, constantPool0);
      assertEquals((byte)6, innerClasses0.getTag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      InnerClass[] innerClassArray1 = innerClasses0.getInnerClasses();
      assertEquals(3, innerClassArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        innerClasses0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[12];
      InnerClasses innerClasses0 = new InnerClasses(30, 30, innerClassArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        innerClasses0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.InnerClasses", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(298, 0, innerClassArray0, (ConstantPool) null);
      String string0 = innerClasses0.toString();
      assertEquals("InnerClasses(0):\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      innerClasses0.setInnerClasses((InnerClass[]) null);
      assertEquals(53, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[12];
      InnerClass innerClass0 = new InnerClass(30, (-591), 1, 222);
      InnerClasses innerClasses0 = new InnerClasses(30, 30, innerClassArray0, (ConstantPool) null);
      InnerClass[] innerClassArray1 = new InnerClass[5];
      innerClassArray1[0] = innerClass0;
      innerClassArray1[1] = innerClass0;
      innerClassArray1[2] = innerClass0;
      innerClassArray1[3] = innerClass0;
      innerClassArray1[4] = innerClass0;
      innerClasses0.setInnerClasses(innerClassArray1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      innerClasses0.dump(dataOutputStream0);
      assertEquals(30, innerClasses0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)5);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = null;
      try {
        innerClasses0 = new InnerClasses(1236, 1236, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)26);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      InnerClasses innerClasses0 = new InnerClasses(1236, 1236, dataInputStream0, constantPool0);
      assertEquals(1236, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      innerClasses0.accept(emptyVisitor0);
      assertEquals(53, innerClasses0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InnerClass[] innerClassArray0 = new InnerClass[3];
      InnerClasses innerClasses0 = new InnerClasses(53, 53, innerClassArray0, (ConstantPool) null);
      InnerClasses innerClasses1 = new InnerClasses(innerClasses0);
      assertEquals(53, innerClasses1.getLength());
  }
}
