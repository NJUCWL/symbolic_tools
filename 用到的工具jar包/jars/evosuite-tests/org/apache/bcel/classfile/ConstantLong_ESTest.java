/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 19:55:30 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantLong_ESTest extends ConstantLong_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1651L));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("le bR)lU|69zxxa", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantLong0.dump(dataOutputStream0);
      assertEquals((-1651L), constantLong0.getBytes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      ClassPath classPath0 = new ClassPath("!-MQ_hxTOCmVZ>");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantLong0.accept(descendingVisitor0);
      assertEquals((byte)5, constantLong0.getTag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1629L);
      long long0 = constantLong0.getBytes();
      assertEquals(1629L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1827L));
      long long0 = constantLong0.getBytes();
      assertEquals((-1827L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(16L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantLong0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((ConstantLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-375), 5);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(86);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1255));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantLong constantLong0 = new ConstantLong(dataInputStream0);
      assertEquals(0L, constantLong0.getBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      long long0 = constantLong0.getBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-9));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals((-9L), constantLong0.getBytes());
      assertTrue(constantLong1.equals((Object)constantLong0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-9));
      Object object0 = constantLong0.getConstantValue((ConstantPool) null);
      assertEquals((-9L), object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      String string0 = constantLong0.toString();
      assertEquals("CONSTANT_Long[5](bytes = 0)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantLong0.setBytes((-2270L));
      assertEquals((-2270L), constantLong0.getBytes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }
}
