/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:09:05 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariableTable_ESTest extends LocalVariableTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      Attribute attribute0 = localVariableTable0.copy(constantPool1);
      assertNotSame(attribute0, localVariableTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      String string0 = localVariableTable0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      int int0 = localVariableTable0.getTableLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-535), (-4021), (LocalVariable[]) null, (ConstantPool) null);
      LocalVariable[] localVariableArray0 = localVariableTable0.getLocalVariableTable();
      assertNull(localVariableArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      LocalVariable[] localVariableArray1 = localVariableTable0.getLocalVariableTable();
      assertEquals(1, localVariableArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2303), (-2303), localVariableArray0, (ConstantPool) null);
      Attribute attribute0 = localVariableTable0.copy((ConstantPool) null);
      assertNotSame(attribute0, localVariableTable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), (LocalVariable[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        localVariableTable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalVariableTable localVariableTable0 = new LocalVariableTable(0, 0, (LocalVariable[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTable0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(0, 3299, (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(608, 608, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(5, 0, localVariableArray0, constantPool0);
      Attribute attribute0 = localVariableTable0.copy(constantPool0);
      assertNotSame(attribute0, localVariableTable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[21];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTable0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        localVariableTable0.getLocalVariable(0, (-1169));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OZiY.");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        localVariableTable0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OZiY.");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      localVariableTable0.dump(dataOutputStream0);
      assertEquals((byte)5, localVariableTable0.getTag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      LocalVariable[] localVariableArray1 = localVariableTable0.getLocalVariableTable();
      assertSame(localVariableArray0, localVariableArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalVariableTable localVariableTable0 = new LocalVariableTable(3624, 1926, (LocalVariable[]) null, (ConstantPool) null);
      int int0 = localVariableTable0.getTableLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("OZiY.");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<LocalVariable> class0 = LocalVariable.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      assertFalse(javaClass1.isEnum());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[17];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      String string0 = localVariableTable0.toString();
      assertEquals("null\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("OZiY.");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<LocalVariable> class0 = LocalVariable.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      String string0 = javaClass0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      LocalVariable localVariable0 = localVariableTable0.getLocalVariable(0, (-1169));
      assertNull(localVariable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[17];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariableTable0.getLocalVariable((-1142));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      LocalVariable localVariable0 = localVariableTable0.getLocalVariable(56);
      assertNull(localVariable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2007, 2007, localVariableArray0, constantPool0);
      localVariableTable0.setLocalVariableTable(localVariableArray0);
      assertEquals(2007, localVariableTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(11, (-2088), (LocalVariable[]) null, constantPool0);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      assertEquals(0, localVariableTable1.getTableLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2330), (-2330), localVariableArray0, (ConstantPool) null);
      ClassPath classPath0 = new ClassPath("OZiY.");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<LocalVariable> class0 = LocalVariable.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      localVariableTable0.accept(descendingVisitor0);
      assertEquals((-2330), localVariableTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((-1392), 10, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
