/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:55:24 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantValue_ESTest extends ConstantValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-235), (-235), 0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy(constantPool1);
      assertEquals(0, constantValue1.getConstantValueIndex());
      assertNotSame(constantValue1, constantValue0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, (ConstantPool) null);
      assertEquals(0, constantValue0.getConstantValueIndex());
      
      constantValue0.setConstantValueIndex(1);
      assertEquals(1, constantValue0.getConstantValueIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-235), (-235), 0, constantPool0);
      MockFile mockFile0 = new MockFile("z", "z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantValue0.dump(dataOutputStream0);
      assertEquals(0, constantValue0.getConstantValueIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, constantPool0);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(0, 0, 197, constantPool0);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals(197, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-546), 0, 87, (ConstantPool) null);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy((ConstantPool) null);
      assertNotSame(constantValue1, constantValue0);
      assertEquals(87, constantValue1.getConstantValueIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantValue constantValue0 = new ConstantValue(0, 983, 0, constantPool0);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy(constantPool0);
      assertNotSame(constantValue1, constantValue0);
      assertEquals(0, constantValue1.getConstantValueIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-100), (-100), (-100), (ConstantPool) null);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(246, (-1), 0, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue((ConstantValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(2262, 0, (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(2878, 719, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(71, (-603), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantValue constantValue0 = new ConstantValue(0, 0, (-1014), constantPool0);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals((-1014), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantValue constantValue0 = new ConstantValue(3, 3, dataInputStream0, constantPool0);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy(constantPool0);
      assertEquals(0, constantValue1.getConstantValueIndex());
      assertNotSame(constantValue1, constantValue0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-235), (-235), 0, constantPool0);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Type of ConstValue invalid: CONSTANT_Utf8[1](\"\")
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((-514));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-235), (-235), 0, constantPool0);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -514. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-235), (-235), 0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(7, 7, 7, (ConstantPool) null);
      ConstantValue constantValue1 = new ConstantValue(constantValue0);
      assertEquals(7, constantValue0.getConstantValueIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-9), 3024);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(2010, 2010, dataInputStream0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-100), (-100), (-100), (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantValue0.accept(emptyVisitor0);
      assertEquals((-100), constantValue0.getConstantValueIndex());
  }
}
