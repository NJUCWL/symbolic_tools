/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:02:50 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantMethodType_ESTest extends ConstantMethodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      int int0 = constantMethodType0.getDescriptorIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-784));
      int int0 = constantMethodType0.getDescriptorIndex();
      assertEquals((-784), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1346);
      // Undeclared exception!
      try { 
        constantMethodType0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3515));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantMethodType0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      // Undeclared exception!
      try { 
        constantMethodType0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((ConstantMethodType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertEquals(0, constantMethodType0.getDescriptorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodType0.accept(emptyVisitor0);
      assertEquals(48, constantMethodType0.getDescriptorIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertEquals(48, constantMethodType0.getDescriptorIndex());
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CONSTANT_MethodType[16](descriptor_index = 48)");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodType0.dump(dataOutputStream0);
      assertEquals(48, constantMethodType0.getDescriptorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      constantMethodType0.setDescriptorIndex(48);
      assertEquals(48, constantMethodType0.getDescriptorIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(48);
      String string0 = constantMethodType0.toString();
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 48)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3233);
      int int0 = constantMethodType0.getDescriptorIndex();
      assertEquals(3233, int0);
  }
}
