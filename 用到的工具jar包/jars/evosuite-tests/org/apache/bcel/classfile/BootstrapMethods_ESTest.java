/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:26:08 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.BootstrapMethod;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BootstrapMethods_ESTest extends BootstrapMethods_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[0];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(4, 1, bootstrapMethodArray0, (ConstantPool) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods1 = bootstrapMethods0.copy(constantPool0);
      assertNotSame(bootstrapMethods1, bootstrapMethods0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, 895, bootstrapMethodArray0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      bootstrapMethods0.accept(descendingVisitor0);
      assertEquals((byte)20, bootstrapMethods0.getTag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, 0, (BootstrapMethod[]) null, constantPool0);
      BootstrapMethod[] bootstrapMethodArray0 = bootstrapMethods0.getBootstrapMethods();
      assertNull(bootstrapMethodArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(1001, (-2581), bootstrapMethodArray0, constantPool0);
      BootstrapMethod[] bootstrapMethodArray1 = bootstrapMethods0.getBootstrapMethods();
      assertSame(bootstrapMethodArray0, bootstrapMethodArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[1];
      int[] intArray0 = new int[8];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(1001, intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(1001, 1001, bootstrapMethodArray0, constantPool0);
      BootstrapMethods bootstrapMethods1 = bootstrapMethods0.copy(constantPool0);
      assertNotSame(bootstrapMethods1, bootstrapMethods0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[1];
      int[] intArray0 = new int[8];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(1001, intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods((-1851), 1001, bootstrapMethodArray0, constantPool0);
      BootstrapMethods bootstrapMethods1 = bootstrapMethods0.copy(constantPool0);
      assertNotSame(bootstrapMethods1, bootstrapMethods0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      int[] intArray0 = new int[4];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(0, intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      bootstrapMethodArray0[1] = bootstrapMethod0;
      bootstrapMethodArray0[2] = bootstrapMethod0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, 0, bootstrapMethodArray0, constantPool0);
      BootstrapMethods bootstrapMethods1 = bootstrapMethods0.copy(constantPool0);
      assertNotSame(bootstrapMethods1, bootstrapMethods0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[1];
      int[] intArray0 = new int[0];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod(23, intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(23, 23, bootstrapMethodArray0, constantPool0);
      // Undeclared exception!
      try { 
        bootstrapMethods0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(229, 1, bootstrapMethodArray0, constantPool0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        bootstrapMethods0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, (-1347), bootstrapMethodArray0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        bootstrapMethods0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, 0, (BootstrapMethod[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        bootstrapMethods0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.BootstrapMethods", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BootstrapMethods bootstrapMethods0 = null;
      try {
        bootstrapMethods0 = new BootstrapMethods((BootstrapMethods) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.BootstrapMethods", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BootstrapMethods bootstrapMethods0 = null;
      try {
        bootstrapMethods0 = new BootstrapMethods((-1625), 0, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.BootstrapMethods", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-169), 200);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BootstrapMethods bootstrapMethods0 = null;
      try {
        bootstrapMethods0 = new BootstrapMethods(0, (-2241), dataInputStream0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = null;
      try {
        bootstrapMethods0 = new BootstrapMethods(1, 1, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      BootstrapMethods bootstrapMethods0 = null;
      try {
        bootstrapMethods0 = new BootstrapMethods(1, 1, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[0];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(976, (-561), bootstrapMethodArray0, (ConstantPool) null);
      BootstrapMethod[] bootstrapMethodArray1 = bootstrapMethods0.getBootstrapMethods();
      assertEquals(0, bootstrapMethodArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[4];
      int[] intArray0 = new int[8];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod((-1219), intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      bootstrapMethodArray0[1] = bootstrapMethod0;
      bootstrapMethodArray0[2] = bootstrapMethod0;
      bootstrapMethodArray0[3] = bootstrapMethodArray0[0];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(1542, 252, bootstrapMethodArray0, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1542);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      bootstrapMethods0.dump(dataOutputStream0);
      assertEquals(88, byteArrayOutputStream0.size());
      assertEquals("\u0006\u0006\u0000\u0000\u0000\uFFFD\u0000\u0004\uFFFD=\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD=\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD=\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD=\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      int[] intArray0 = new int[4];
      BootstrapMethod bootstrapMethod0 = new BootstrapMethod((-1347), intArray0);
      bootstrapMethodArray0[0] = bootstrapMethod0;
      bootstrapMethodArray0[1] = bootstrapMethodArray0[0];
      bootstrapMethodArray0[2] = bootstrapMethodArray0[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, (-1347), bootstrapMethodArray0, constantPool0);
      BootstrapMethods bootstrapMethods1 = bootstrapMethods0.copy(constantPool0);
      assertNotSame(bootstrapMethods1, bootstrapMethods0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readShort();
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods((-1), (-1), dataInputStream0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        bootstrapMethods0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.BootstrapMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods((-1), (-1), dataInputStream0, (ConstantPool) null);
      assertEquals(12, byteArrayInputStream0.available());
      
      String string0 = bootstrapMethods0.toString();
      assertEquals("BootstrapMethods(0):\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods((-17), (-1347), bootstrapMethodArray0, constantPool0);
      // Undeclared exception!
      try { 
        bootstrapMethods0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.BootstrapMethods", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[3];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(0, 0, bootstrapMethodArray0, (ConstantPool) null);
      bootstrapMethods0.setBootstrapMethods(bootstrapMethodArray0);
      assertEquals((byte)20, bootstrapMethods0.getTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BootstrapMethod[] bootstrapMethodArray0 = new BootstrapMethod[4];
      BootstrapMethods bootstrapMethods0 = new BootstrapMethods(1542, 252, bootstrapMethodArray0, (ConstantPool) null);
      BootstrapMethods bootstrapMethods1 = new BootstrapMethods(bootstrapMethods0);
      assertEquals(1542, bootstrapMethods1.getNameIndex());
  }
}
