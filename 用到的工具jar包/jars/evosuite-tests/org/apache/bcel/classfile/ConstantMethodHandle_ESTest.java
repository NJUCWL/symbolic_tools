/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 20:52:58 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantMethodHandle_ESTest extends ConstantMethodHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1213), 1);
      MockFile mockFile0 = new MockFile("CONSTANT_MethodHandle[15](reference_kind = -1213, reference_index = 1)", "\"7yyNdVU4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      assertEquals((-1213), constantMethodHandle0.getReferenceKind());
      assertEquals(1, constantMethodHandle0.getReferenceIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      int int0 = constantMethodHandle0.getReferenceKind();
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-769), (-769));
      int int0 = constantMethodHandle0.getReferenceKind();
      assertEquals((-769), constantMethodHandle0.getReferenceIndex());
      assertEquals((-769), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1815, 1815);
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(1815, int0);
      assertEquals(1815, constantMethodHandle0.getReferenceKind());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1119), (-1119));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantMethodHandle0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1928), (-1928));
      // Undeclared exception!
      try { 
        constantMethodHandle0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)110);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1455);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      int int0 = constantMethodHandle0.getReferenceKind();
      assertEquals(0, int0);
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1312), (-1312));
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals((-1312), constantMethodHandle0.getReferenceKind());
      assertEquals((-1312), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(204, 204);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle0.accept(emptyVisitor0);
      assertEquals(204, constantMethodHandle0.getReferenceIndex());
      assertEquals(204, constantMethodHandle0.getReferenceKind());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(204, 204);
      String string0 = constantMethodHandle0.toString();
      assertEquals("CONSTANT_MethodHandle[15](reference_kind = 204, reference_index = 204)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(204, 204);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(204, 204);
      constantMethodHandle0.setReferenceKind(204);
      assertEquals(204, constantMethodHandle0.getReferenceIndex());
      assertEquals(204, constantMethodHandle0.getReferenceKind());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1815, 1815);
      // Undeclared exception!
      try { 
        constantMethodHandle0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1815, 1815);
      constantMethodHandle0.setReferenceIndex(208);
      assertEquals(208, constantMethodHandle0.getReferenceIndex());
  }
}
