/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:29:39 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.ClassVector;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassVector_ESTest extends ClassVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      classVector0.addElement(javaClass0);
      classVector0.removeElementAt(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      classVector0.addElement(javaClass0);
      JavaClass[] javaClassArray0 = classVector0.toArray();
      assertEquals(1, javaClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      ClassPath classPath0 = new ClassPath("");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      classVector0.addElement(javaClass0);
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classVector0.elementAt(0);
      assertTrue(javaClass1.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      ClassPath classPath0 = new ClassPath("Class must not be null");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setMajor(0);
      classVector0.addElement(javaClass0);
      JavaClass javaClass1 = classVector0.elementAt(0);
      assertEquals("java.lang.Object", javaClass1.getClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      javaClass0.setModifiers((-2224));
      classVector0.addElement(javaClass0);
      JavaClass javaClass1 = classVector0.elementAt(0);
      assertEquals((byte)1, JavaClass.HEAP);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      classVector0.vec = null;
      // Undeclared exception!
      try { 
        classVector0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      classVector0.vec = null;
      // Undeclared exception!
      try { 
        classVector0.removeElementAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      // Undeclared exception!
      try { 
        classVector0.removeElementAt((-2884));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      classVector0.vec = null;
      // Undeclared exception!
      try { 
        classVector0.elementAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      // Undeclared exception!
      try { 
        classVector0.elementAt((-2242));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      classVector0.vec = null;
      // Undeclared exception!
      try { 
        classVector0.addElement((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      // Undeclared exception!
      try { 
        classVector0.elementAt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      // Undeclared exception!
      try { 
        classVector0.removeElementAt((byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      JavaClass[] javaClassArray0 = classVector0.toArray();
      assertEquals(0, javaClassArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassVector classVector0 = new ClassVector();
      classVector0.addElement((JavaClass) null);
      JavaClass javaClass0 = classVector0.elementAt(0);
      assertNull(javaClass0);
  }
}
