/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:23:52 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoader;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassLoader_ESTest extends ClassLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      JavaClass javaClass0 = classLoader0.modifyClass((JavaClass) null);
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = new ClassLoader(classLoader0);
      Class<?> class0 = classLoader1.loadClass("org.apache.bcel.util.ClassLoader", true);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      javaClass0.setModifiers((byte)3);
      JavaClass javaClass1 = classLoader1.modifyClass(javaClass0);
      assertEquals(3, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = new ClassLoader(classLoader0);
      Class<?> class0 = classLoader1.loadClass("org.apache.bcel.classfile.Utility$1", true);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = classLoader1.modifyClass(javaClass0);
      assertFalse(javaClass1.isStrictfp());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ClassLoader classLoader0 = new ClassLoader(stringArray0);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = classLoader0.modifyClass(javaClass0);
      assertTrue(javaClass1.isPublic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader((java.lang.ClassLoader) null);
      ClassPath classPath0 = new ClassPath("java.");
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      JavaClass javaClass1 = classLoader0.modifyClass(javaClass0);
      assertEquals(33, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass javaClass1 = classLoader0.modifyClass(javaClass0);
      assertSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      Class<ConstantUtf8> class0 = ConstantUtf8.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      JavaClass javaClass1 = classLoader0.modifyClass(javaClass0);
      assertEquals(49, javaClass1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader((java.lang.ClassLoader) null, (String[]) null);
      // Undeclared exception!
      try { 
        classLoader0.loadClass("Z1?.g", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      // Undeclared exception!
      try { 
        classLoader0.loadClass("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = new ClassLoader(classLoader0);
      // Undeclared exception!
      try { 
        classLoader1.createClass("foo");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      // Undeclared exception!
      try { 
        classLoader0.createClass("~Y/DUQVey$dLM-(h3jt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      // Undeclared exception!
      try { 
        classLoader0.createClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      try { 
        classLoader0.loadClass("$$BCEL$$", true);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = new ClassLoader();
      JavaClass javaClass0 = classLoader0.createClass("H[WrC'teqCv<");
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = new ClassLoader(classLoader0);
      classLoader1.loadClass("org.apache.bcel.util.ClassLoader", true);
      Class<?> class0 = classLoader1.loadClass("org.apache.bcel.util.ClassLoader", true);
      assertFalse(class0.isEnum());
  }
}
