/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:44:54 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassLoaderRepository_ESTest extends ClassLoaderRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassPath$Dir");
      assertEquals("org.apache.bcel.util.ClassPath$Dir", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.Object");
      assertEquals("java.lang.Object", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertEquals("java.lang.Object", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAccessFlags((-2096));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertEquals("java.lang.String", javaClass1.getFileName());
      assertTrue(javaClass1.isVolatile());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("java.lang.Cloneable");
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Cloneable");
      assertEquals("java.lang.Cloneable", javaClass0.getFileName());
      assertNotNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.getSuperClass();
      JavaClass javaClass1 = classLoaderRepository0.findClass("java.lang.Object");
      assertEquals("java.lang.Object", javaClass1.getFileName());
      assertNotNull(javaClass1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.storeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.removeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((java.lang.ClassLoader) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      Class<JavaClass> class0 = JavaClass.class;
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // org.apache.bcel.classfile.JavaClass not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.LineNumberTable");
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.LineNumberTable");
      assertSame(javaClass1, javaClass0);
      assertEquals("org.apache.bcel.classfile.LineNumberTable", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("org.apache.bcel.classfile.LineNumberTable");
      JavaClass javaClass0 = classLoaderRepository0.findClass("org.apache.bcel.classfile.LineNumberTable");
      assertNotNull(javaClass0);
      assertEquals("org.apache.bcel.classfile.LineNumberTable", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Number");
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.storeClass(javaClass0);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      try { 
        classLoaderRepository0.loadClass("K(");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // K( not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.clear();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      ClassPath classPath0 = classLoaderRepository0.getClassPath();
      assertNull(classPath0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      
      classLoaderRepository0.removeClass(javaClass0);
      assertEquals("java.lang.Integer", javaClass0.getFileName());
  }
}
