/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:40:44 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassPathRepository_ESTest extends ClassPathRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.setModifiers(89);
      JavaClass javaClass1 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      assertEquals(89, javaClass1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      assertEquals(51, javaClass1.getMajor());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.setModifiers((byte)3);
      JavaClass javaClass1 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      assertTrue(javaClass1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("java.lang.Object");
      assertFalse(javaClass0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.setMinor((byte)3);
      JavaClass javaClass1 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      assertFalse(javaClass1.isInterface());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.setModifiers((-47));
      JavaClass javaClass1 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      assertTrue(javaClass1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.isVolatile(true);
      JavaClass javaClass1 = classPathRepository0.loadClass(class0);
      assertEquals("java.lang.String", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setAccessFlags(1);
      JavaClass javaClass1 = classPathRepository0.loadClass(class0);
      assertEquals("java.lang.String", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.isEnum(true);
      JavaClass javaClass1 = classPathRepository0.loadClass(class0);
      assertEquals("org.apache.bcel.classfile.JavaClass", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals("java.io.InputStream", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertEquals("java.lang.Object", javaClass0.getFileName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      assertNotNull(javaClass0);
      
      javaClass0.setMinor((byte)2);
      JavaClass javaClass1 = classPathRepository0.loadClass(class0);
      assertEquals("java.lang.String", javaClass1.getFileName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      ClassPath classPath0 = classPathRepository0.getClassPath();
      assertNull(classPath0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("org.apache.bcel.classfile.StackMapType");
      javaClass0.setMinor((byte)3);
      JavaClass javaClass1 = classPathRepository0.findClass("org.apache.bcel.classfile.StackMapType");
      assertEquals((byte)3, JavaClass.ZIP);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      classPathRepository0.loadClass("org.apache.bcel.util.ClassPath$Dir");
      JavaClass javaClass0 = classPathRepository0.findClass("org.apache.bcel.util.ClassPath$Dir");
      assertEquals(0, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      // Undeclared exception!
      try { 
        classPathRepository0.storeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      // Undeclared exception!
      try { 
        classPathRepository0.removeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      // Undeclared exception!
      try { 
        classPathRepository0.loadClass("Yx+.SdPAWz.x$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      try { 
        classPathRepository0.loadClass("c6O*rmhUO:");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Exception while looking for class c6O*rmhUO:: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: c6O*rmhUO:.class
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      // Undeclared exception!
      try { 
        classPathRepository0.loadClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.findClass("SyntheticRepository could not load ");
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classPathRepository0.storeClass(javaClass0);
      assertTrue(javaClass0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      // Undeclared exception!
      try { 
        classPathRepository0.loadClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      // Undeclared exception!
      try { 
        classPathRepository0.loadClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name null
         //
         verifyException("org.apache.bcel.util.ClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      classPathRepository0.clear();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classPathRepository0.removeClass(javaClass0);
      assertTrue(javaClass0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      ClassPath classPath1 = classPathRepository0.getClassPath();
      assertSame(classPath0, classPath1);
  }
}
