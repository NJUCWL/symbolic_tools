/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:17:50 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayInstruction;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ConstantPushInstruction;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BCELFactory_ESTest extends BCELFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      ISTORE iSTORE0 = new ISTORE(54);
      bCELFactory0.visitLocalVariableInstruction(iSTORE0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitReturnInstruction((ReturnInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", stringArray0[5], instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" }, null);");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitRET((RET) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "8", (String) null, instructionList0, constantPoolGen0);
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, (PrintWriter) null);
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      // Undeclared exception!
      try { 
        bCELFactory0.visitLocalVariableInstruction(iSTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      LDC2_W lDC2_W0 = new LDC2_W(45);
      // Undeclared exception!
      try { 
        bCELFactory0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = new SASTORE();
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "q]=", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" }, null);");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      LDC_W lDC_W0 = new LDC_W(0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitLDC(lDC_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LDC", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitInvokeInstruction(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InvokeInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(3242);
      // Undeclared exception!
      try { 
        bCELFactory0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3242. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      PUTFIELD pUTFIELD0 = new PUTFIELD(0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitFieldInstruction(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" }, null);");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitConstantPushInstruction((ConstantPushInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(1011);
      // Undeclared exception!
      try { 
        bCELFactory0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1011. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      // Undeclared exception!
      try { 
        bCELFactory0.visitBranchInstruction(ifInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7I");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitArrayInstruction((ArrayInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BCELFactory bCELFactory0 = null;
      try {
        bCELFactory0 = new BCELFactory((MethodGen) null, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      LCONST lCONST0 = new LCONST(1L);
      bCELFactory0.visitConstantPushInstruction(lCONST0);
      assertEquals(1, lCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(56);
      // Undeclared exception!
      try { 
        bCELFactory0.visitAllocationInstruction(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 56 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3680), basicType0, typeArray0, stringArray0, "7IWY", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      bCELFactory0.visitAllocationInstruction(nEWARRAY0);
      assertEquals("newarray", nEWARRAY0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      bCELFactory0.visitArrayInstruction(sALOAD0);
      assertEquals((short)53, sALOAD0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      bCELFactory0.visitArrayInstruction(sASTORE0);
      assertEquals((short)86, sASTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      IINC iINC0 = new IINC((byte)91, 43);
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, basicType0.NO_ARGS, (String[]) null, "", "#\"Rrn?h-Y@`", instructionList0, constantPoolGen0);
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      bCELFactory0.visitLocalVariableInstruction(iINC0);
      assertEquals(91, iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3680), basicType0, typeArray0, stringArray0, "7IWY", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      bCELFactory0.visitLocalVariableInstruction(iLOAD0);
      assertEquals(1, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = new SASTORE();
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "q]=", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" }, null);");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      bCELFactory0.start();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(2027, basicType0, typeArray0, stringArray0, "7IWY", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      bCELFactory0.start();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitInvokeInstruction(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7I");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      LDC2_W lDC2_W0 = new LDC2_W(374);
      // Undeclared exception!
      try { 
        bCELFactory0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 374. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "{e+.#*]|nR", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      PUTFIELD pUTFIELD0 = new PUTFIELD(1357);
      // Undeclared exception!
      try { 
        bCELFactory0.visitFieldInstruction(pUTFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1357. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      SIPUSH sIPUSH0 = new SIPUSH((short)1);
      bCELFactory0.visitConstantPushInstruction(sIPUSH0);
      assertEquals("sipush", sIPUSH0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      LDC_W lDC_W0 = new LDC_W(1482);
      // Undeclared exception!
      try { 
        bCELFactory0.visitLDC(lDC_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1482. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        bCELFactory0.visitCHECKCAST((CHECKCAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.BCELFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      RET rET0 = new RET(0);
      bCELFactory0.visitRET(rET0);
      assertEquals("ret", rET0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      Type[] typeArray0 = new Type[6];
      String[] stringArray0 = new String[6];
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      InstructionList instructionList0 = new InstructionList(sASTORE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-3669), basicType0, typeArray0, stringArray0, "", (String) null, instructionList0, constantPoolGen0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7I");
      BCELFactory bCELFactory0 = new BCELFactory(methodGen0, mockPrintWriter0);
      ARETURN aRETURN0 = (ARETURN)InstructionConstants.ARETURN;
      bCELFactory0.visitReturnInstruction(aRETURN0);
      assertEquals((short)176, aRETURN0.getOpcode());
  }
}
