/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:25:02 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.util.EmptyStackException;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.ClassStack;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassStack_ESTest extends ClassStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      classStack0.push((JavaClass) null);
      JavaClass javaClass0 = classStack0.top();
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.top();
      assertFalse(javaClass1.isTransient());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classStack0.push(javaClass0);
      javaClass0.setClassNameIndex(226);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      javaClass0.setMinor(0);
      javaClass0.setInterfaceNames(stringArray0);
      classStack0.pop();
      javaClass0.isInterface(false);
      javaClass0.setMinor((-423));
      JavaClass javaClass1 = javaClass0.copy();
      classStack0.push(javaClass1);
      classStack0.top();
      classStack0.top();
      classStack0.top();
      classStack0.pop();
      // Undeclared exception!
      try { 
        classStack0.top();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setModifiers(954);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.top();
      assertEquals(954, javaClass1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = new ClassPath("~Dc^_ee(8m((-");
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<JavaClass> class0 = JavaClass.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      classStack0.push(javaClass1);
      JavaClass javaClass2 = classStack0.top();
      assertEquals((byte)2, javaClass2.getSource());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setSuperclassNameIndex((-2985));
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.top();
      assertSame(javaClass1, javaClass0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      javaClass0.setMinor(111);
      classStack0.push(javaClass0);
      classStack0.push((JavaClass) null);
      classStack0.pop();
      JavaClass javaClass1 = classStack0.top();
      assertTrue(javaClass1.isClass());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setModifiers(954);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertFalse(javaClass1.isStrictfp());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setModifiers(3527);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertFalse(javaClass1.isStatic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<DataInputStream> class0 = DataInputStream.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setSuperclassNameIndex((-2985));
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertTrue(javaClass1.isClass());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      javaClass0.setMinor(111);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertFalse(javaClass1.isStatic());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = new ClassPath("(_hwc}k$*cs:>7g(");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setMajor(0);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertTrue(javaClass1.isSuper());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setClassNameIndex(0);
      classStack0.push(javaClass0);
      JavaClass javaClass1 = classStack0.pop();
      assertFalse(javaClass1.isFinal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      JavaClass javaClass0 = syntheticRepository0.loadClass("org.apache.bcel.util.ClassStack");
      classStack0.push(javaClass0);
      boolean boolean0 = classStack0.empty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      // Undeclared exception!
      try { 
        classStack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassStack classStack0 = new ClassStack();
      boolean boolean0 = classStack0.empty();
      assertTrue(boolean0);
  }
}
