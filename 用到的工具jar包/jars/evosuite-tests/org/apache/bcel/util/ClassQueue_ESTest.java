/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:26:13 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.ClassQueue;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassQueue_ESTest extends ClassQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassQueue");
      classQueue0.enqueue(javaClass0);
      boolean boolean0 = classQueue0.empty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      classQueue0.enqueue((JavaClass) null);
      JavaClass javaClass0 = classQueue0.dequeue();
      assertNull(javaClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classQueue0.enqueue(javaClass0);
      JavaClass javaClass1 = classQueue0.dequeue();
      assertFalse(javaClass1.isVolatile());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      ClassPath classPath0 = new ClassPath("r+^{Ule,]F!x2");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      javaClass0.setMajor(0);
      classQueue0.enqueue(javaClass0);
      JavaClass javaClass1 = classQueue0.dequeue();
      assertFalse(javaClass1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassQueue");
      classQueue0.enqueue(javaClass0);
      javaClass0.setClassNameIndex(0);
      JavaClass javaClass1 = classQueue0.dequeue();
      assertFalse(javaClass1.isNative());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classQueue0.enqueue(javaClass0);
      JavaClass javaClass1 = classQueue0.dequeue();
      assertTrue(javaClass1.isFinal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setModifiers((-49));
      classQueue0.enqueue(javaClass0);
      JavaClass javaClass1 = classQueue0.dequeue();
      assertFalse(javaClass1.isClass());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      classQueue0.vec = null;
      // Undeclared exception!
      try { 
        classQueue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      int[] intArray0 = new int[8];
      javaClass0.setInterfaces(intArray0);
      classQueue0.enqueue(javaClass0);
      // Undeclared exception!
      try { 
        classQueue0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      classQueue0.vec = null;
      // Undeclared exception!
      try { 
        classQueue0.enqueue((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      classQueue0.vec = null;
      // Undeclared exception!
      try { 
        classQueue0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      classQueue0.vec = null;
      // Undeclared exception!
      try { 
        classQueue0.dequeue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      boolean boolean0 = classQueue0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      // Undeclared exception!
      try { 
        classQueue0.dequeue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      String string0 = classQueue0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassQueue classQueue0 = new ClassQueue();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      classQueue0.enqueue(javaClass0);
      classQueue0.toString();
      classQueue0.toString();
      classQueue0.toString();
      classQueue0.toString();
      classQueue0.toString();
      classQueue0.toString();
      // Undeclared exception!
      classQueue0.toString();
  }
}
