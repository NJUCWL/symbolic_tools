/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:21:39 GMT 2021
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.InstructionFinder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionFinder_ESTest extends InstructionFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      instructionFinder0.search("ifgt", instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      instructionFinder0.getInstructionList();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("", instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      // Undeclared exception!
      instructionFinder0.search("", instructionFinder_CodeConstraint0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-49.659F));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, (InstructionFinder.CodeConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("instruction");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("qe1.e)rGE%EXy ", instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction unknown: qe1
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      ASTORE aSTORE0 = new ASTORE(211);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aSTORE0);
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("lor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle null not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1237L));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      instructionFinder0.search("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("]|?1h5Q<X{+'A4^>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction unknown: 1h5q
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1464));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      // Undeclared exception!
      try { 
        instructionFinder0.search((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("instruction");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList1.append((CompoundInstruction) pUSH0);
      IXOR iXOR0 = (IXOR)InstructionConstants.IXOR;
      instructionList0.append(instructionHandle0, (Instruction) iXOR0);
      // Undeclared exception!
      try { 
        instructionFinder0.reread();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InstructionFinder instructionFinder0 = null;
      try {
        instructionFinder0 = new InstructionFinder((InstructionList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("instruction");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      instructionFinder0.reread();
      Iterator<InstructionHandle[]> iterator0 = instructionFinder0.search("instruction", instructionHandle0, (InstructionFinder.CodeConstraint) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IUSHR iUSHR0 = (IUSHR)InstructionConstants.IUSHR;
      InstructionList instructionList0 = new InstructionList(iUSHR0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iUSHR0, instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      Iterator<InstructionHandle[]> iterator0 = instructionFinder0.search("(goto|jsr|jsr_w|athrow|goto_w)", instructionHandle0, instructionFinder_CodeConstraint0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IRETURN iRETURN0 = new IRETURN();
      InstructionList instructionList0 = new InstructionList(iRETURN0);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList1);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search("newarray", instructionHandle0, instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle   -1: ireturn[172](1) not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("instruction");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      instructionFinder0.reread();
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(instructionFinder_CodeConstraint0).checkCode(any(org.apache.bcel.generic.InstructionHandle[].class));
      Iterator<InstructionHandle[]> iterator0 = instructionFinder0.search("instruction", instructionHandle0, instructionFinder_CodeConstraint0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      InstructionList instructionList0 = new InstructionList(dUP2_X1_0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFNE0);
      InstructionHandle instructionHandle1 = instructionList1.getEnd();
      // Undeclared exception!
      try { 
        instructionFinder0.search("istore_1", instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction handle   -1: ifne[154](3) -> -1 not found in instruction list.
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionFinder.CodeConstraint instructionFinder_CodeConstraint0 = mock(InstructionFinder.CodeConstraint.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        instructionFinder0.search(" Npzgz9%T", instructionFinder_CodeConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction unknown: npzgz9
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IUSHR iUSHR0 = (IUSHR)InstructionConstants.IUSHR;
      InstructionList instructionList0 = new InstructionList(iUSHR0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iUSHR0, instructionList0);
      Iterator<InstructionHandle[]> iterator0 = instructionFinder0.search("(goto|jsr|jsr_w|athrow|goto_w)", instructionHandle0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = (ACONST_NULL)InstructionConstants.ACONST_NULL;
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionList instructionList1 = instructionFinder0.getInstructionList();
      assertEquals(1, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = (ACONST_NULL)InstructionConstants.ACONST_NULL;
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aCONST_NULL0);
      // Undeclared exception!
      try { 
        instructionFinder0.search("6,j[II2(lVl-bGH", instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction unknown: 6
         //
         verifyException("org.apache.bcel.util.InstructionFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, false);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionFinder instructionFinder0 = new InstructionFinder(instructionList0);
      Iterator<InstructionHandle[]> iterator0 = instructionFinder0.search("(irem|lrem|iand|ior|ineg|isub|lneg|fneg|fmul|ldiv|fadd|lxor|frem|idiv|land|ixor|ishr|fsub|lshl|fdiv|iadd|lor|dmul|lsub|ishl|imul|lmul|lushr|dneg|iushr|lshr|ddiv|drem|dadd|ladd|dsub)");
      assertNotNull(iterator0);
  }
}
