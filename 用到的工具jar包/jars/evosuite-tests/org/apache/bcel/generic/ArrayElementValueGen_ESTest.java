/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:47:23 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.List;
import org.apache.bcel.classfile.ArrayElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.generic.ArrayElementValueGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayElementValueGen_ESTest extends ArrayElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 64);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      String string0 = arrayElementValueGen0.stringifyValue();
      assertEquals("[64]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, "");
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      int int0 = arrayElementValueGen0.getElementValuesSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen((ConstantPoolGen) null);
      arrayElementValueGen0.addElement((ElementValueGen) null);
      List<ElementValueGen> list0 = arrayElementValueGen0.getElementValues();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(91, constantPoolGen0, "");
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 91
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.addElement((ElementValueGen) null);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, "");
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantLong
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      MockFile mockFile0 = new MockFile("SB", "h6b;h,=2_EL5VS%N+d|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        arrayElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ArrayElementValue arrayElementValue0 = (ArrayElementValue)arrayElementValueGen0.getElementValue();
      ArrayElementValueGen arrayElementValueGen1 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, true);
      assertEquals(83, ElementValueGen.PRIMITIVE_SHORT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[7];
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, (-431), constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -431
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(249);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      assertEquals(68, ElementValueGen.PRIMITIVE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, (-431), constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      ElementValue elementValue0 = arrayElementValueGen0.getElementValue();
      ArrayElementValueGen arrayElementValueGen1 = (ArrayElementValueGen)ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      assertEquals(1, arrayElementValueGen1.getElementValuesSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen((-1), elementValueArray0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: -1
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[3];
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(91, elementValueArray0, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.addElement((ElementValueGen) null);
      MockFile mockFile0 = new MockFile("n1'x6K)=b'~B?x{b=*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      List<ElementValueGen> list0 = arrayElementValueGen0.getElementValues();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      int int0 = arrayElementValueGen0.getElementValuesSize();
      assertEquals(0, int0);
  }
}
