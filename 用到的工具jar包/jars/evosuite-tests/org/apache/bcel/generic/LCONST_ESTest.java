/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:35:41 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LCONST_ESTest extends LCONST_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LCONST lCONST0 = new LCONST(0L);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        lCONST0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LCONST lCONST0 = new LCONST(1L);
      Number number0 = lCONST0.getValue();
      assertEquals(1L, number0);
      assertEquals((short)10, lCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LCONST lCONST0 = null;
      try {
        lCONST0 = new LCONST((-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LCONST can be used only for 0 and 1: -1
         //
         verifyException("org.apache.bcel.generic.LCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCONST0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        lCONST0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      Number number0 = lCONST0.getValue();
      assertEquals(0L, number0);
  }
}
