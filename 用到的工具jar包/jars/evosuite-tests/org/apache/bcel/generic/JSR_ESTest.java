/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:37:31 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.AASTORE;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Visitor;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSR_ESTest extends JSR_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) lOOKUPSWITCH0);
      JSR jSR0 = new JSR(branchHandle0);
      int int0 = jSR0.updatePosition(32767, 32767);
      assertEquals((short)201, jSR0.getOpcode());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("!A*\"#B<[-uo`h");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('<');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      instructionHandle0.updatePosition(849, (byte) (-98));
      JSR jSR0 = new JSR(instructionHandle0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      jSR0.updatePosition('<', 32713);
      jSR0.dump(dataOutputStream0);
      assertEquals(788, jSR0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AASTORE aASTORE0 = (AASTORE)InstructionConstants.AASTORE;
      InstructionList instructionList0 = new InstructionList(aASTORE0);
      IFGT iFGT0 = new IFGT();
      IfInstruction ifInstruction0 = iFGT0.negate();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) ifInstruction0);
      JSR jSR0 = new JSR(branchHandle0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(1441, 239);
      instConstraintVisitor0.setFrame(frame0);
      jSR0.accept(instConstraintVisitor0);
      assertEquals((short)168, jSR0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('<');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      instructionHandle0.updatePosition(849, (byte) (-98));
      JSR jSR0 = new JSR(instructionHandle0);
      jSR0.setLength(32727);
      int int0 = jSR0.updatePosition('<', 32713);
      assertEquals((short)201, jSR0.getOpcode());
      assertEquals((-32722), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      I2C i2C0 = (I2C)InstructionConstants.I2C;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(i2C0);
      JSR jSR0 = new JSR(instructionHandle0);
      // Undeclared exception!
      try { 
        jSR0.updatePosition((-610), (-610));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr[168](3):-1:  -1: i2c[146](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ACMPNE0);
      instructionList0.dispose();
      JSR jSR0 = new JSR(branchHandle0);
      // Undeclared exception!
      try { 
        jSR0.updatePosition(40, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSR jSR0 = new JSR();
      // Undeclared exception!
      try { 
        jSR0.updatePosition((-1337), (-1337));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LCONST lCONST0 = new LCONST(0L);
      InstructionHandle instructionHandle0 = new InstructionHandle(lCONST0);
      JSR jSR0 = new JSR(instructionHandle0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1147);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 8192);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr[168](3):-1:  -1: lconst_0[9](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) lOOKUPSWITCH0);
      JSR jSR0 = new JSR(branchHandle0);
      // Undeclared exception!
      try { 
        jSR0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSR jSR0 = new JSR();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        jSR0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AASTORE aASTORE0 = (AASTORE)InstructionConstants.AASTORE;
      InstructionList instructionList0 = new InstructionList(aASTORE0);
      IFGT iFGT0 = new IFGT();
      IfInstruction ifInstruction0 = iFGT0.negate();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) ifInstruction0);
      JSR jSR0 = new JSR(branchHandle0);
      int int0 = jSR0.updatePosition(1441, 1441);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("!A*\"#B<[-uo`h");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('<');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      instructionHandle0.updatePosition(849, (byte) (-98));
      JSR jSR0 = new JSR(instructionHandle0);
      jSR0.setOpcode((byte) (-98));
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      jSR0.dump(dataOutputStream0);
      assertEquals(3, jSR0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSR jSR0 = new JSR();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        jSR0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ACMPNE0);
      JSR jSR0 = new JSR(branchHandle0);
      // Undeclared exception!
      try { 
        jSR0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.JSR", e);
      }
  }
}
