/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:00:00 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EnumElementValue;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumElementValueGen_ESTest extends EnumElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 5, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(enumElementValue0, constantPoolGen0, false);
      assertEquals(101, enumElementValueGen0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, ":", constantPoolGen0);
      EnumElementValue enumElementValue0 = (EnumElementValue)enumElementValueGen0.getElementValue();
      EnumElementValueGen enumElementValueGen1 = (EnumElementValueGen)ElementValueGen.copy(enumElementValue0, constantPoolGen0, true);
      assertEquals(2, enumElementValue0.getValueIndex());
      assertEquals(":", enumElementValueGen1.getEnumValueString());
      assertEquals(1, enumElementValue0.getTypeIndex());
      assertEquals("Ljava/lang/Class;", enumElementValueGen1.getEnumTypeString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "WQa\"2f<P-F*WkC", constantPoolGen0);
      String string0 = enumElementValueGen0.stringifyValue();
      assertEquals("WQa\"2f<P-F*WkC", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance(":");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "", constantPoolGen0);
      String string0 = enumElementValueGen0.stringifyValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-74), 0, constantPoolGen0);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals(0, int0);
      assertEquals((-74), enumElementValueGen0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "m`0@7IA(k b", constantPoolGen0);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, enumElementValueGen0.getValueIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-175), (-2682), constantPoolGen0);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals((-175), int0);
      assertEquals((-2682), enumElementValueGen0.getValueIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "m`0@7IA(k b", constantPoolGen0);
      String string0 = enumElementValueGen0.getEnumValueString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("=~$U/}D^iF");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "", constantPoolGen0);
      String string0 = enumElementValueGen0.getEnumValueString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance(":");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "", constantPoolGen0);
      String string0 = enumElementValueGen0.getEnumTypeString();
      assertEquals("L:;", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(101, 101, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, (-9));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1), 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(1280, 272, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 272
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1), (-1), (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantNameAndType cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-3381), (-3381), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3381
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(249, (-1), constantPoolGen0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        enumElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen(objectType0, "LgH?FtFt8C527(H", (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen(objectType0, (String) null, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-2468), (-1781), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2468
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen((EnumElementValue) null, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-608), (-608), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -608
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "m`0@7IA(k b", constantPoolGen0);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "m`0@7IA(k b", constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      enumElementValueGen0.dump(dataOutputStream0);
      assertEquals("e\u0000\u0001\u0000\u0002", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-608), (-608), constantPoolGen0);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals((-608), int0);
      assertEquals((-608), enumElementValueGen0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(25, 25, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
}
