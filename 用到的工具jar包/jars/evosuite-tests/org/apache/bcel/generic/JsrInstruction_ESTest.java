/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:50:32 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsrInstruction_ESTest extends JsrInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      instructionList0.insert((Instruction) i2S0);
      NEW nEW0 = new NEW(18);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) nEW0);
      JSR jSR0 = new JSR(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        jSR0.getType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      instructionList1.insert(instructionList0);
      InstructionHandle instructionHandle1 = jSR0.physicalSuccessor();
      assertNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      instructionList0.insert((Instruction) i2S0);
      NEW nEW0 = new NEW(18);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) nEW0);
      JSR jSR0 = new JSR(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      instructionList0.insert(instructionList1);
      InstructionHandle instructionHandle1 = jSR0.physicalSuccessor();
      assertFalse(instructionHandle1.hasTargeters());
      assertNotNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      instructionList0.setPositions(true);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      instructionList0.insert(instructionList1);
      InstructionHandle instructionHandle1 = jSR0.physicalSuccessor();
      assertEquals(0, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      instructionList0.insert(instructionList1);
      Type type0 = jSR0.getType(constantPoolGen0);
      assertEquals("<return address targeting   -1: i2s[147](1)>", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      instructionHandle0.swapInstruction(jSR0);
      instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        jSR0.physicalSuccessor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // physicalSuccessor() called on a shared JsrInstruction.
         //
         verifyException("org.apache.bcel.generic.JsrInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(86);
      InstructionList instructionList0 = new InstructionList(iNVOKEDYNAMIC0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      // Undeclared exception!
      try { 
        jSR_W0.physicalSuccessor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instructionList0.insert(instructionList0);
      // Undeclared exception!
      jSR0.getType(constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      NEW nEW0 = new NEW(18);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) nEW0);
      JSR jSR0 = new JSR(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      instructionList0.insert(instructionHandle1, instructionList0);
      // Undeclared exception!
      try { 
        jSR0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // physicalSuccessor() called on a shared JsrInstruction.
         //
         verifyException("org.apache.bcel.generic.JsrInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      I2S i2S0 = new I2S();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2S0);
      JSR jSR0 = new JSR(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      BranchHandle branchHandle0 = instructionList1.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      instructionHandle0.setNext(branchHandle0);
      instructionList0.insert(instructionList1);
      // Undeclared exception!
      jSR0.physicalSuccessor();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      NEW nEW0 = new NEW();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) nEW0);
      JSR jSR0 = new JSR(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) jSR0);
      instructionList0.insert(instructionList1);
      // Undeclared exception!
      try { 
        jSR0.getType(constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSR jSR0 = new JSR();
      assertEquals(0, jSR0.getIndex());
  }
}
