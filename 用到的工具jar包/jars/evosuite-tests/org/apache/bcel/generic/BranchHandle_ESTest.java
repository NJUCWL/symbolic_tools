/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:33:48 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.TABLESWITCH;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BranchHandle_ESTest extends BranchHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(tABLESWITCH0);
      branchHandle0.updatePosition(1105, 0);
      int int0 = branchHandle0.updatePosition(1, 0);
      assertEquals(1106, branchHandle0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFGT0);
      InstructionHandle instructionHandle1 = branchHandle0.getTarget();
      assertNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = new InstructionHandle(iSTORE0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFGT0);
      instructionHandle0.removeTargeter(iFGT0);
      InstructionHandle instructionHandle1 = branchHandle0.getTarget();
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ACMPEQ0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(branchHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      BranchHandle branchHandle1 = instructionList0.append((InstructionHandle) branchHandle0, (BranchInstruction) iF_ICMPLT0);
      InstructionHandle instructionHandle0 = branchHandle1.getTarget();
      assertSame(branchHandle0, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNONNULL0);
      InstructionHandle instructionHandle1 = branchHandle0.getTarget();
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LUSHR lUSHR0 = (LUSHR)InstructionConstants.LUSHR;
      InstructionList instructionList0 = new InstructionList(lUSHR0);
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      IfInstruction ifInstruction0 = iFNULL0.negate();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) ifInstruction0);
      branchHandle0.updatePosition(1109, 1109);
      int int0 = branchHandle0.getPosition();
      assertEquals(1109, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPNE0);
      branchHandle0.addHandle();
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      BranchHandle branchHandle1 = BranchHandle.getBranchHandle(jSR_W0);
      assertSame(branchHandle0, branchHandle1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFNULL0);
      branchHandle0.updatePosition(109, (-3115));
      assertEquals(109, branchHandle0.getPosition());
      
      BranchHandle branchHandle1 = BranchHandle.getBranchHandle(iFNULL0);
      assertEquals(109, branchHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      tABLESWITCH0.setPosition((-1107));
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(tABLESWITCH0);
      assertFalse(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFNULL0);
      branchHandle0.updateTarget((InstructionHandle) null, branchHandle0);
      // Undeclared exception!
      try { 
        branchHandle0.updateTarget((InstructionHandle) null, branchHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting null, but   -1: ifnull[198](3) -> <points to itself>
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(gOTO_W0);
      branchHandle0.dispose();
      // Undeclared exception!
      try { 
        branchHandle0.updateTarget(branchHandle0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO0);
      // Undeclared exception!
      try { 
        branchHandle0.updateTarget(branchHandle0, branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ALOAD aLOAD0 = new ALOAD();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aLOAD0);
      JSR jSR0 = new JSR(instructionHandle0);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(jSR0);
      // Undeclared exception!
      try { 
        branchHandle0.updatePosition((-2473), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(tABLESWITCH0);
      // Undeclared exception!
      try { 
        branchHandle0.setInstruction(tABLESWITCH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      LAND lAND0 = new LAND();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lAND0);
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFNULL0);
      ICONST iCONST0 = new ICONST();
      // Undeclared exception!
      try { 
        branchHandle0.setInstruction(iCONST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BranchHandle.getBranchHandle((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(tABLESWITCH0);
      branchHandle0.addHandle();
      IFNULL iFNULL0 = new IFNULL(branchHandle0);
      // Undeclared exception!
      try { 
        BranchHandle.getBranchHandle(iFNULL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Double double0 = new Double((-294.643));
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) double0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLE0);
      branchHandle0.addHandle();
      branchHandle0.addHandle();
      instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPLE0);
      // Undeclared exception!
      try { 
        BranchHandle.getBranchHandle(iF_ICMPLE0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.InstructionHandle cannot be cast to org.apache.bcel.generic.BranchHandle
         //
         verifyException("org.apache.bcel.generic.BranchHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IFLE iFLE0 = new IFLE();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFLE0);
      branchHandle0.setInstruction(iFLE0);
      assertEquals(1, iFLE0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_2;
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFGT0);
      // Undeclared exception!
      try { 
        branchHandle0.setInstruction(iSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning istore_2[61](1) to branch handle which is not a branch instruction
         //
         verifyException("org.apache.bcel.generic.BranchHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFGT0);
      branchHandle0.setTarget((InstructionHandle) null);
      assertEquals(0, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO0);
      branchHandle0.setPosition(0);
      assertEquals(0, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFGT0);
      branchHandle0.updatePosition((-31), (-31));
      int int0 = branchHandle0.getPosition();
      assertEquals((-31), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFGT0);
      int int0 = branchHandle0.getPosition();
      assertEquals(0, int0);
  }
}
