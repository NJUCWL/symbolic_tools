/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:05:59 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LDC2_W_ESTest extends LDC2_W_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Number number0 = lDC2_W0.getValue(constantPoolGen0);
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      lDC2_W0.initFromFile(byteSequence0, false);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        lDC2_W0.getValue(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13056. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        lDC2_W0.getValue(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W(1718);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        lDC2_W0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1718. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W(3254);
      // Undeclared exception!
      try { 
        lDC2_W0.getType((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W(1016);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        lDC2_W0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        lDC2_W0.getValue(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown or invalid constant type at 0
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-632.8794963725493));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Number number0 = lDC2_W0.getValue(constantPoolGen0);
      assertEquals((-632.8794963725493), number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(19);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Number number0 = lDC2_W0.getValue(constantPoolGen0);
      assertEquals(19L, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W(0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.generic.LDC2_W");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        lDC2_W0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type 20
         //
         verifyException("org.apache.bcel.generic.LDC2_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-632.8794963725493));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = lDC2_W0.getType(constantPoolGen0);
      assertEquals("D", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(19);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = lDC2_W0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LDC2_W lDC2_W0 = null;
      try {
        lDC2_W0 = new LDC2_W((-2002));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -2002
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LDC2_W lDC2_W0 = new LDC2_W();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        lDC2_W0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
}
