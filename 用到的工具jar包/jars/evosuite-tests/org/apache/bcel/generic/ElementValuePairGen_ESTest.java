/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:27:13 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.ElementValuePair;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.generic.ArrayElementValueGen;
import org.apache.bcel.generic.ClassElementValueGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementValuePairGen_ESTest extends ElementValuePairGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 90, constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair(96, simpleElementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, false);
      assertEquals(96, elementValuePairGen0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("A", (ElementValueGen) null, constantPoolGen0);
      ElementValueGen elementValueGen0 = elementValuePairGen0.getValue();
      assertNull(elementValueGen0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, false);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-21), simpleElementValueGen0, constantPoolGen0);
      elementValuePairGen0.getValue();
      assertEquals((-21), elementValuePairGen0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1), constantPoolGen0, (short)172);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("~:Ea8i3cx'I'fn", simpleElementValueGen0, constantPoolGen0);
      ElementValueGen elementValueGen0 = elementValuePairGen0.getValue();
      assertEquals(74, ElementValueGen.PRIMITIVE_LONG);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1), constantPoolGen0, (short)172);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("~:Ea8i3cx'I'fn", simpleElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.getNameString();
      assertEquals("~:Ea8i3cx'I'fn", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, classElementValueGen0, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen((-447), constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1301, classElementValueGen0, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals(1301, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, classElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      assertEquals(0, elementValuePair0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-1471), arrayElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      assertEquals((-1471), elementValuePair0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", arrayElementValueGen0, constantPoolGen0);
      arrayElementValueGen0.addElement(arrayElementValueGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1), constantPoolGen0, (short)172);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("~:Ea8i3cx'I'fn", simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type -1
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("~\"{", (ElementValueGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1030, (-4459));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "]", constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, enumElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInvokeDynamic cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-2512), constantPoolGen0, (-2512));
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-2512), simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2512
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, 73, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(73, simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (double) 0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodref cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen((-447), constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1301, classElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1301
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, enumElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getElementNameValuePair();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-164), 1514, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("iDfw?o3TDu*)~[JC?d+", enumElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getElementNameValuePair();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -164
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, true);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(99);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 0
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("=", (ElementValueGen) null, constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen((-2992), constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", classElementValueGen0, constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        elementValuePairGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(objectType0, constantPoolGen0);
      ElementValue elementValue0 = classElementValueGen0.getElementValue();
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValuePair elementValuePair0 = new ElementValuePair(127, elementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 127. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1, constantPoolGen0, 'G');
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValuePair elementValuePair0 = new ElementValuePair(0, elementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (1)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen("' occurs more than once.", (ElementValueGen) null, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(3827, 3827, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen((String) null, enumElementValueGen0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", arrayElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.getNameString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen((ElementValuePair) null, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(91, 2154, constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair(64, simpleElementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.SimpleElementValue cannot be cast to org.apache.bcel.classfile.ArrayElementValue
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(".", arrayElementValueGen0, constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      elementValuePairGen0.dump(dataOutputStream0);
      assertEquals(".", elementValuePairGen0.getNameString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", arrayElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      assertEquals(1, elementValuePair0.getNameIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-21), (-21), constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-21), simpleElementValueGen0, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals((-21), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", arrayElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.toString();
      assertEquals("ElementValuePair:[=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", arrayElementValueGen0, constantPoolGen0);
      ElementValueGen elementValueGen0 = elementValuePairGen0.getValue();
      assertSame(arrayElementValueGen0, elementValueGen0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(56, (ElementValueGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getElementNameValuePair();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
}
