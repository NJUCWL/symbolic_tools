/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:03:42 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleElementValueGen_ESTest extends SimpleElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, (short)1144);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("1144", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((byte) (-28), (byte) (-28), constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(127, constantPoolGen0, (double) 127);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, 70, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, 74, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, true);
      int int0 = simpleElementValueGen0.getValueInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, 0, constantPoolGen0);
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-533), (-4731), constantPoolGen0);
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals((-4731), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (-1193L));
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      assertEquals(1, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, "false");
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      assertEquals(1, simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((byte) (-28), (byte) (-28), constantPoolGen0);
      SimpleElementValue simpleElementValue0 = (SimpleElementValue)simpleElementValueGen0.getElementValue();
      assertEquals((-28), simpleElementValue0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 25, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      simpleElementValue0.setIndex(337);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 337
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(109, constantPoolGen0, "{ZS");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(0, (ConstantPoolGen) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(73, (ConstantPoolGen) null, (short) (-1815));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-1455), (ConstantPoolGen) null, "org.apache.bcel.generic.LSTORE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(919, constantPoolGen0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(169, (ConstantPoolGen) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(203, (ConstantPoolGen) null, (-289));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(0, (ConstantPoolGen) null, (-5074.4946F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(0, (ConstantPoolGen) null, 2829.944464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen((-2078), (ConstantPoolGen) null, '|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(6, (ConstantPoolGen) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(69, constantPoolGen0, 180);
      MockFile mockFile0 = new MockFile("]sq9DmQju`Q=fdm1jk", "]oqNDY-UkNa#[JE6W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1112);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 69
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 180);
      MockFile mockFile0 = new MockFile("]sq9DmQju`Q=fdm1jk", "]oqNDY-UkNa#[JE6W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1112);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(67, ElementValueGen.PRIMITIVE_CHAR);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&'1V4+S^");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(67, ElementValueGen.PRIMITIVE_CHAR);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 180);
      MockFile mockFile0 = new MockFile("]sq9DmQju`Q=fdm1jk", "]sq9DmQju`Q=fdm1jk");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1112);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(83, ElementValueGen.PRIMITIVE_SHORT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, "false");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals("F\u0000\u0001", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)83, constantPoolGen0, (int) (byte)73);
      MockFile mockFile0 = new MockFile("'^'^aJI'#34V4.?", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals(1, simpleElementValueGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, "false");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(66);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      simpleElementValueGen0.dump(dataOutputStream0);
      assertEquals("B\u0000\u0001", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, 115, constantPoolGen0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantLong
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 180);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("180", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, "false");
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.ConstantFloat
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)67, constantPoolGen0, (double) (byte)101);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantInteger
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)83, constantPoolGen0, (int) (byte)73);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("73", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, false);
      int int0 = simpleElementValueGen0.getValueInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 25, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((byte)83, 90, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((byte)73, 90, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 449, (ConstantPool) null);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 25, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 25, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(71, 71, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen class does not know how to copy this type 71
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((byte)115, constantPoolGen0, true);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-2015), constantPoolGen0, (byte) (-16));
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getValueString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(109, constantPoolGen0, '(');
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 109
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, 0.0);
      String string0 = simpleElementValueGen0.stringifyValue();
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)74, constantPoolGen0, 0.0F);
      assertEquals(91, ElementValueGen.ARRAY);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, "false");
      int int0 = simpleElementValueGen0.getIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(34, 2919, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(25, constantPoolGen0, 3014);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
