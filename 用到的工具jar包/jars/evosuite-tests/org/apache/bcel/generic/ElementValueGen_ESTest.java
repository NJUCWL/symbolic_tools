/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:35:14 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.bcel.classfile.ClassElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.generic.ArrayElementValueGen;
import org.apache.bcel.generic.ClassElementValueGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementValueGen_ESTest extends ElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance(", ih_");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, ", ih_", constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", ih_", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      enumElementValueGen0.dump(dataOutputStream0);
      assertEquals(74, ElementValueGen.PRIMITIVE_LONG);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (-2503.254801));
      int int0 = simpleElementValueGen0.getElementValueType();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-3271), constantPoolGen0, 0.0F);
      simpleElementValueGen0.type = (int) (byte)74;
      int int0 = simpleElementValueGen0.getElementValueType();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(74, constantPoolGen0, 3668);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      assertEquals((byte)68, ElementValue.PRIMITIVE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-2434), constantPoolGen0, (short)39);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      assertEquals((byte)67, ElementValue.PRIMITIVE_CHAR);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (-2503.254801));
      ConstantPoolGen constantPoolGen1 = simpleElementValueGen0.getConstantPool();
      assertSame(constantPoolGen0, constantPoolGen1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-3271), constantPoolGen0, (-3271));
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type -3271
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(2281, 78, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-3271), constantPoolGen0, 0.0F);
      simpleElementValueGen0.type = (int) (byte)74;
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantLong
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1118), (-1118), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1118
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue((DataInput) null, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(12);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        ElementValueGen.readElementValue(dataInputStream0, (ConstantPoolGen) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)66;
      byteArray0[6] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(106, constantPoolGen0, '2');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 106
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1236, constantPoolGen0, false);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-3271), constantPoolGen0, 0.0F);
      int int0 = simpleElementValueGen0.getElementValueType();
      assertEquals((-3271), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, 56, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (0)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(112, 761, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (112)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(106, constantPoolGen0, (byte)109);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (106)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(105, 105, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (105)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(104, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (104)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(102, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (102)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValue classElementValue0 = new ClassElementValue(67, 64, constantPool0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(classElementValue0, constantPoolGen0, false);
      ElementValue elementValue0 = classElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 64 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(97, 0, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (97)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(95, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (95)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(94, 94, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (94)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(89, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (89)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(87, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (87)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(84, (-2313), constantPool0);
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, (ConstantPoolGen) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (84)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      assertEquals(74, ElementValueGen.PRIMITIVE_LONG);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(82, (-2313), constantPool0);
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, (ConstantPoolGen) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (82)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(80, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (80)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(76, (-5), (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (76)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(75, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (75)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 74, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(simpleElementValue0, constantPoolGen0, false);
      assertEquals(74, ElementValueGen.PRIMITIVE_LONG);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValue classElementValue0 = new ClassElementValue(73, 70, constantPool0);
      // Undeclared exception!
      try { 
        ElementValueGen.copy(classElementValue0, constantPoolGen0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ClassElementValue cannot be cast to org.apache.bcel.classfile.SimpleElementValue
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(71, 71, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet! (71)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, (-2313), constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = (SimpleElementValueGen)ElementValueGen.copy(simpleElementValue0, (ConstantPoolGen) null, false);
      ConstantPoolGen constantPoolGen0 = simpleElementValueGen0.getConstantPool();
      assertNull(constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 67, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, (byte)22);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantDouble
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.classfile.ElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(115, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(5, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(99, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(99, ElementValueGen.CLASS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(90, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(83, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(74, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(73, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(70, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(68, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(67, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(66, elementValueGen0.getElementValueType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected element value kind in annotation: 65
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValue elementValue0 = arrayElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      assertEquals(74, ElementValueGen.PRIMITIVE_LONG);
  }
}
