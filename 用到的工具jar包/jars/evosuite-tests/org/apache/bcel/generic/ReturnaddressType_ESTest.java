/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:58:36 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReturnaddressType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReturnaddressType_ESTest extends ReturnaddressType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Integer integer0 = new Integer(0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) integer0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      I2D i2D0 = new I2D();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2D0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      ReturnaddressType returnaddressType1 = new ReturnaddressType(instructionHandle0);
      boolean boolean0 = returnaddressType0.equals(returnaddressType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReturnaddressType returnaddressType0 = new ReturnaddressType((InstructionHandle) null);
      boolean boolean0 = returnaddressType0.equals(returnaddressType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      InstructionHandle instructionHandle0 = returnaddressType0.getTarget();
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Integer integer0 = new Integer(0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) integer0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      I2D i2D0 = new I2D();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) i2D0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      InstructionHandle instructionHandle1 = returnaddressType0.getTarget();
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICONST iCONST0 = (ICONST)InstructionConstants.ICONST_3;
      InstructionList instructionList0 = new InstructionList(iCONST0);
      DDIV dDIV0 = (DDIV)InstructionConstants.DDIV;
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0, (Instruction) dDIV0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFGE0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(branchHandle0);
      InstructionHandle instructionHandle1 = returnaddressType0.getTarget();
      assertSame(branchHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GETFIELD gETFIELD0 = new GETFIELD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(gETFIELD0);
      instructionHandle0.dispose();
      ReturnaddressType returnaddressType0 = null;
      try {
        returnaddressType0 = new ReturnaddressType(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LREM lREM0 = (LREM)InstructionConstants.LREM;
      InstructionHandle instructionHandle0 = new InstructionHandle(lREM0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      assertEquals((byte)16, returnaddressType0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LREM lREM0 = new LREM();
      InstructionHandle instructionHandle0 = new InstructionHandle(lREM0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      returnaddressType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LREM lREM0 = new LREM();
      InstructionHandle instructionHandle0 = new InstructionHandle(lREM0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      ReturnaddressType returnaddressType1 = ReturnaddressType.NO_TARGET;
      boolean boolean0 = returnaddressType0.equals(returnaddressType1);
      assertFalse(returnaddressType1.equals((Object)returnaddressType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LREM lREM0 = new LREM();
      InstructionHandle instructionHandle0 = new InstructionHandle(lREM0);
      ReturnaddressType returnaddressType0 = new ReturnaddressType(instructionHandle0);
      boolean boolean0 = returnaddressType0.equals(instructionHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      returnaddressType0.hashCode();
  }
}
