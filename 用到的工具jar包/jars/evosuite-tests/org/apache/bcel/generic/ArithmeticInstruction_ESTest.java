/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:40:04 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArithmeticInstruction_ESTest extends ArithmeticInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISHL iSHL0 = new ISHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iSHL0.setOpcode((short) (-1065));
      // Undeclared exception!
      try { 
        iSHL0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown type -1065
         //
         verifyException("org.apache.bcel.generic.ArithmeticInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LXOR lXOR0 = new LXOR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lXOR0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISHR iSHR0 = new ISHR();
      Constant[] constantArray0 = new Constant[2];
      iSHR0.setOpcode((short)130);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = iSHR0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOR iOR0 = new IOR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iOR0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LSHL lSHL0 = new LSHL();
      lSHL0.setOpcode((short)127);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSHL0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LUSHR lUSHR0 = new LUSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lUSHR0.getType(constantPoolGen0);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IUSHR iUSHR0 = new IUSHR();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iUSHR0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      LSHR lSHR0 = new LSHR();
      Type type0 = lSHR0.getType(constantPoolGen0);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISHR iSHR0 = new ISHR();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = iSHR0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LSHL lSHL0 = new LSHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSHL0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISHL iSHL0 = new ISHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iSHL0.getType(constantPoolGen0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DNEG dNEG0 = new DNEG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dNEG0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FNEG fNEG0 = new FNEG();
      Type type0 = fNEG0.getType(constantPoolGen0);
      assertEquals("F", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      Type type0 = lNEG0.getType(constantPoolGen0);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DREM dREM0 = new DREM();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dREM0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LREM lREM0 = new LREM();
      Type type0 = lREM0.getType((ConstantPoolGen) null);
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IREM iREM0 = new IREM();
      Constant[] constantArray0 = new Constant[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = iREM0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDIV fDIV0 = new FDIV();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fDIV0.getType(constantPoolGen0);
      assertEquals((byte)6, type0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LDIV lDIV0 = new LDIV();
      Type type0 = lDIV0.getType((ConstantPoolGen) null);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iDIV0.getType(constantPoolGen0);
      assertEquals("I", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DMUL dMUL0 = new DMUL();
      Type type0 = dMUL0.getType(constantPoolGen0);
      assertEquals("D", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FMUL fMUL0 = new FMUL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fMUL0.getType(constantPoolGen0);
      assertEquals("F", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ISHL iSHL0 = new ISHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iSHL0.setOpcode((short)104);
      Type type0 = iSHL0.getType(constantPoolGen0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DSUB dSUB0 = new DSUB();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = dSUB0.getType(constantPoolGen0);
      assertEquals((byte)7, type0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      iDIV0.setOpcode((short)101);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iDIV0.getType(constantPoolGen0);
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FADD fADD0 = new FADD();
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fADD0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IAND iAND0 = new IAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iAND0.setOpcode((short)97);
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IAND iAND0 = new IAND();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iAND0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISHL iSHL0 = new ISHL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iSHL0.setOpcode((short)96);
      Type type0 = iSHL0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DADD dADD0 = new DADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dADD0.getType(constantPoolGen0);
      assertEquals(2, type0.getSize());
  }
}
