/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:28:02 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Visitor;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GOTO_ESTest extends GOTO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(f2D0);
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFEQ0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      gOTO0.setPosition(32724);
      int int0 = gOTO0.updatePosition(32724, 43);
      assertEquals((short)200, gOTO0.getOpcode());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "r(|`@u{/CLXGZ");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionList0.setPositions();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      gOTO0.setOpcode((short) (-1054));
      // Undeclared exception!
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(f2D0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      InstructionList instructionList0 = new InstructionList();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFEQ0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      gOTO0.setPosition(32725);
      gOTO0.setLength(954);
      int int0 = gOTO0.updatePosition(2, 241);
      assertEquals(5, gOTO0.getLength());
      assertEquals((-949), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      // Undeclared exception!
      try { 
        gOTO0.updatePosition((-1), (-3445));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of goto[167](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(dCMPG0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DSUB dSUB0 = new DSUB();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(dSUB0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      MockFile mockFile0 = new MockFile("", "org.apache.bcel.generic.IASTORE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for goto[167](3):-1:  -1: dsub[103](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3kW^omEGVEK*39(*^%B", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 369);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      JSR jSR0 = new JSR((InstructionHandle) null);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) jSR0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      // Undeclared exception!
      try { 
        gOTO0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.GOTO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "r(|`@u{/CL?GZ");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionList0.setPositions();
      int int0 = gOTO0.updatePosition(1038, 1038);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(f2D0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFEQ0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFEQ0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      gOTO0.setPosition(32767);
      gOTO0.updatePosition((-4917), 43);
      MockFile mockFile0 = new MockFile("org.apache.bcel.generic.LDC2_W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      gOTO0.dump(dataOutputStream0);
      assertEquals((-27850), gOTO0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      gOTO0.accept(executionVisitor0);
      assertEquals(1, gOTO0.getLength());
  }
}
