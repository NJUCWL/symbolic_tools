/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:30:44 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReturnInstruction_ESTest extends ReturnInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RETURN rETURN0 = new RETURN();
      Type type0 = rETURN0.getType();
      assertEquals("V", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RETURN rETURN0 = new RETURN();
      rETURN0.setOpcode((short) (-716));
      // Undeclared exception!
      try { 
        rETURN0.getType();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown type -716
         //
         verifyException("org.apache.bcel.generic.ReturnInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RETURN rETURN0 = new RETURN();
      rETURN0.setOpcode((short)224);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        rETURN0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown type 224
         //
         verifyException("org.apache.bcel.generic.ReturnInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType();
      assertEquals((byte)14, type0.getType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DRETURN dRETURN0 = new DRETURN();
      Type type0 = dRETURN0.getType();
      assertEquals((byte)7, type0.getType());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      Type type0 = fRETURN0.getType();
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LRETURN lRETURN0 = new LRETURN();
      Type type0 = lRETURN0.getType();
      assertEquals((byte)11, type0.getType());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IRETURN iRETURN0 = new IRETURN();
      Type type0 = iRETURN0.getType();
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DRETURN dRETURN0 = new DRETURN();
      Class<?>[] classArray0 = dRETURN0.getExceptions();
      assertEquals(1, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RETURN rETURN0 = new RETURN();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = rETURN0.getType(constantPoolGen0);
      assertEquals((byte)12, type0.getType());
  }
}
