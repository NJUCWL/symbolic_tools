/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:22:34 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayInstruction;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LocalVariableInstruction;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionFactory_ESTest extends InstructionFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[15];
      ClassGen classGen0 = new ClassGen("", "YBsFF'{]w1", (String) null, (-183), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.SHORT;
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      Type type0 = fCONST0.getType((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find instruction: org.apache.bcel.generic.S2F
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1((-346));
      assertEquals((short)90, stackInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_2(390);
      assertEquals((short)91, stackInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup(0);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop((short)0);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("4)1|.&B", "=+k&ngCJ7()_U%", "4)1|.&B", 224, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ObjectType objectType0 = ObjectType.getInstance("B");
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke("=+k&ngCJ7()_U%", "Could not find instruction: ", objectType0, objectType0.NO_ARGS, (short)1399);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Oops: Unknown invoke kind: 1399
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = instructionFactory0.getConstantPool();
      assertNull(constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ClassGen classGen0 = instructionFactory0.getClassGen();
      assertNull(classGen0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("sx<MYQ~H-'Z.", "sx<MYQ~H-'Z.", "sx<MYQ~H-'Z.", 3735, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertTrue(classGen1.isTransient());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "dstore", 34, (String[]) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertEquals(45, classGen1.getMajor());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCAB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertFalse(classGen1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      D2F d2F0 = (D2F)InstructionConstants.D2F;
      Type type0 = d2F0.getType(constantPoolGen0);
      instructionFactory0.createPutField("yt+i_n(--?*'9?g", "M6j,Hd_*Q", type0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      NEW nEW0 = instructionFactory0.createNew(objectType0);
      assertEquals("new", nEW0.getName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory((ClassGen) null, constantPoolGen0);
      ObjectType objectType0 = Type.THROWABLE;
      GETFIELD gETFIELD0 = instructionFactory0.createGetField("J}9os~3+,=", "J}9os~3+,=", objectType0);
      assertEquals(3, gETFIELD0.getLength());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createStore((Type) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createReturn((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutStatic((String) null, (String) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutField("k@%OVHW*O#", (String) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createPrintln("`wq\"ZG~$Wy_D~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createNull((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      Class<Long> class0 = Long.class;
      Type type0 = Type.getType(class0);
      // Undeclared exception!
      try { 
        instructionFactory0.createNewArray(type0, (short)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 0
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createNew("56j^jX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad((Type) null, (-721));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke("java.lang.Object", "org.apache.bcel.generic.InstructionFactory$MethodObject", objectType0, objectType0.NO_ARGS, (short) (-159));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("n");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<L2I> class0 = L2I.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createInstanceOf((ReferenceType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.CHAR;
      // Undeclared exception!
      try { 
        instructionFactory0.createInstanceOf(basicType0.NULL);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.Type$1 cannot be cast to org.apache.bcel.generic.ObjectType
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("j", ";W", ";W", (-2065), (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetStatic("j", "dUrlX4", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.InstructionFactory$MethodObject", "Can not cast ", "org.apache.bcel.generic.InstructionFactory$MethodObject", 0, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      instructionFactory0.setConstantPool((ConstantPoolGen) null);
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetField("org.apache.bcel.generic.InstructionFactory$MethodObject", ">>>", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ClassGen classGen0 = new ClassGen("W#muxAx:zp~Y", "W#muxAx:zp~Y", "W#muxAx:zp~Y", (-1026), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createFieldAccess("W#muxAx:zp~Y", "W#muxAx:zp~Y", (Type) null, (short)2204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createFieldAccess("TmHsRP~sD'LiIjmJ_)", (String) null, type0, (short)201);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1856, 1856);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createConstant(constantArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: class org.apache.bcel.classfile.ConstantMethodHandle
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      InstructionFactory instructionFactory0 = new InstructionFactory((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        instructionFactory0.createCheckCast(objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[9];
      ClassGen classGen0 = new ClassGen("", "", "org.apache.bcel.generic.InstructionFactory", (-774), stringArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      ReferenceType referenceType0 = Type.NULL;
      // Undeclared exception!
      try { 
        instructionFactory0.createCheckCast(referenceType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.Type$1 cannot be cast to org.apache.bcel.generic.ObjectType
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("", type0.FLOAT);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("7D2/Z1>", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayStore((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayLoad((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstructionFactory instructionFactory0 = null;
      try {
        instructionFactory0 = new InstructionFactory((ClassGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      // Undeclared exception!
      try { 
        instructionFactory0.createInvoke((String) null, (String) null, type0, typeArray0, (short)163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[15];
      ClassGen classGen0 = new ClassGen("", "YBsFF'{]w1", (String) null, (-183), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createNew((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup(34);
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) stackInstruction0);
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)200, instructionHandle0);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(2556);
      InstructionList instructionList0 = new InstructionList(stackInstruction0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)188, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 188
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)187, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 187
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      InstructionList instructionList0 = new InstructionList(aNEWARRAY0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aNEWARRAY0, instructionList0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)185, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 185
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      InstructionList instructionList0 = new InstructionList(aNEWARRAY0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aNEWARRAY0, instructionList0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)183, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 183
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)179, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 179
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(2556);
      InstructionHandle instructionHandle0 = new InstructionHandle(stackInstruction0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)175, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 175
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(2556);
      InstructionHandle instructionHandle0 = new InstructionHandle(stackInstruction0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)169, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 169
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFGT0);
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)161, branchHandle0);
      assertEquals(0, branchInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      InstructionList instructionList0 = new InstructionList(aNEWARRAY0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) aNEWARRAY0, instructionList0);
      BranchInstruction branchInstruction0 = InstructionFactory.createBranchInstruction((short)159, instructionHandle0);
      assertEquals(3, branchInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      // Undeclared exception!
      try { 
        InstructionFactory.createNull(returnaddressType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: <return address>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      Instruction instruction0 = InstructionFactory.createNull(type0);
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)3, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      Instruction instruction0 = InstructionFactory.createNull(type0);
      assertEquals("fconst_0", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      Instruction instruction0 = InstructionFactory.createNull(basicType0);
      assertEquals((short)3, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.CHAR;
      MULTIANEWARRAY mULTIANEWARRAY0 = (MULTIANEWARRAY)instructionFactory0.createNewArray(basicType0, (short)174);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals((short)174, mULTIANEWARRAY0.getDimensions());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("8+j7?0xr", 11);
      INSTANCEOF iNSTANCEOF0 = instructionFactory0.createInstanceOf(arrayType0);
      assertEquals("instanceof", iNSTANCEOF0.getName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("-H7%YlOVP&lH% .`&?", 156);
      CHECKCAST cHECKCAST0 = instructionFactory0.createCheckCast(arrayType0);
      assertEquals(2, cHECKCAST0.getIndex());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("", "6C4f", "Can not cast ", 3, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createCast((Type) null, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can not cast null to null
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.CHAR;
      // Undeclared exception!
      try { 
        instructionFactory0.createCast(basicType0, basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find instruction: org.apache.bcel.generic.C2C
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("-H7%YlOVP&lH% .`&?", 156);
      Instruction instruction0 = instructionFactory0.createCast(arrayType0, arrayType0.OBJECT);
      assertEquals("checkcast", instruction0.getName());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      // Undeclared exception!
      try { 
        InstructionFactory.createArrayStore(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type <unknown object>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("-H7%YlOVP&lH% .`&?", 156);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(arrayType0);
      assertEquals((short)83, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals("bastore", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(type0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(basicType0);
      assertEquals("castore", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayStore(objectType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(objectType0);
      assertEquals(1, arrayInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals("laload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals((short)46, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DCMPL dCMPL0 = (DCMPL)InstructionConstants.DCMPL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(type0);
      assertEquals("daload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(type0);
      assertEquals("faload", arrayInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals((short)52, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ArrayInstruction arrayInstruction0 = InstructionFactory.createArrayLoad(basicType0);
      assertEquals((short)51, arrayInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(type0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type <unknown object>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(objectType0, 144);
      assertEquals(144, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("@/0UoWufz", 11);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(arrayType0, 3);
      assertEquals(3, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(basicType0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LCMP lCMP0 = (LCMP)InstructionConstants.LCMP;
      Type type0 = lCMP0.getType((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        InstructionFactory.createLoad(type0, (-1548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1548
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, 29);
      assertEquals(29, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(type0, (short)185);
      assertEquals(185, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, 953);
      assertEquals(953, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createLoad(basicType0, 4);
      assertEquals(4, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(type0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type <unknown object>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(" vCqPN.sf");
      // Undeclared exception!
      try { 
        InstructionFactory.createStore(objectType0, (-2196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -2196
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 124);
      assertEquals(124, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 124);
      assertEquals(124, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 124);
      assertEquals(124, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(type0, 2928);
      assertEquals(2928, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 124);
      assertEquals(124, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      LocalVariableInstruction localVariableInstruction0 = InstructionFactory.createStore(basicType0, 2928);
      assertEquals(2928, localVariableInstruction0.getIndex());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_1(2);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createDup_2(0);
      assertEquals(1, stackInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop(2);
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(stackInstruction0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBranchInstruction((short)8, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid opcode: 8
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StackInstruction stackInstruction0 = InstructionFactory.createPop(240);
      assertEquals("pop", stackInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("java.lang.Object", objectType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type java.lang.String
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("org.apache.bcel.generic.FCMPL", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand org.apache.bcel.generic.FCMPL
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("E^XS-VCB|)@\"#X~", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand E^XS-VCB|)@\"#X~
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("AVh]M.!da992", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand AVh]M.!da992
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("org.apache.bcel.generic.FCMPL", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand o
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("E^XS-VCB|)@\"#X~", type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand E
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("org.apache.bcel.generic.FCMPL", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand org.apache.bcel.generic.FCMPL
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      // Undeclared exception!
      try { 
        InstructionFactory.createBinaryOperation("java.lang.Object", basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid operand java.lang.Object
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RET rET0 = new RET();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = rET0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        InstructionFactory.createReturn(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: <return address>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<FREM> class0 = FREM.class;
      Type type0 = Type.getType(class0);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(type0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals("ireturn", returnInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DCONST dCONST0 = new DCONST(0);
      Type type0 = dCONST0.getType((ConstantPoolGen) null);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(type0);
      assertEquals((short)175, returnInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(type0);
      assertEquals("freturn", returnInstruction0.getName());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals((short)172, returnInstruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ReturnInstruction returnInstruction0 = InstructionFactory.createReturn(basicType0);
      assertEquals(1, returnInstruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        instructionFactory0.createFieldAccess("(ht`lxE}(;_tGexRFb", "B", basicType0, (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Oops: Unknown getfield kind:-1
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("", "", "(Ljava/lang/String;)V", (-1218), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend(returnaddressType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Oops: No append for this type? <return address>
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("-H7%YlOVP&lH% .`&?", 156);
      instructionFactory0.createAppend(arrayType0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      BasicType basicType0 = Type.VOID;
      // Undeclared exception!
      try { 
        instructionFactory0.createAppend(basicType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Oops: No append for this type? void
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.LONG;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = (INVOKEVIRTUAL)instructionFactory0.createAppend(basicType0);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(12, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory((ClassGen) null, constantPoolGen0);
      BasicType basicType0 = Type.INT;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = (INVOKEVIRTUAL)instructionFactory0.createAppend(basicType0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.SHORT;
      instructionFactory0.createAppend(basicType0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^X]AS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.BYTE;
      instructionFactory0.createAppend(basicType0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      DCMPL dCMPL0 = new DCMPL();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      instructionFactory0.createAppend(type0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.CHAR;
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = (INVOKEVIRTUAL)instructionFactory0.createAppend(basicType0);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(12, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", (-904), stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      BasicType basicType0 = Type.BOOLEAN;
      instructionFactory0.createAppend(basicType0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      ArrayType arrayType0 = new ArrayType("-H7%YlOVP&lH% .`&?", 156);
      instructionFactory0.createAppend(arrayType0.STRING);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createConstant(constantArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[15];
      ClassGen classGen0 = new ClassGen("", "YBsFF'{]w1", (String) null, (-183), stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      Instruction instruction0 = instructionFactory0.createConstant("YBsFF'{]w1");
      assertEquals(2, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ClassGen classGen0 = new ClassGen("iwY!Y;*nl'h5eeE", "S", "Invalid operand ", 0, stringArray0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      BIPUSH bIPUSH0 = new BIPUSH((byte)0);
      Type type0 = bIPUSH0.getType(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createGetField("", (String) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ClassGen classGen1 = instructionFactory0.getClassGen();
      assertFalse(classGen1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      instructionFactory0.createPutStatic("", "iconst_3", type0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      instructionFactory0.createAppend(type0);
      assertEquals(13, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      ConstantPoolGen constantPoolGen1 = instructionFactory0.getConstantPool();
      assertSame(constantPoolGen1, constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("", "invokevirtual", "", 390, stringArray0);
      instructionFactory0.setClassGen(classGen0);
      assertEquals(5, classGen0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      D2F d2F0 = new D2F();
      Type type0 = d2F0.getType(constantPoolGen0);
      instructionFactory0.createGetStatic("hi|IfN@Ox3[L|0*N|8", "(ht`lxE}(;_tGexRFb", type0);
      assertEquals(11, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("hi|IfN@Ox3[L|0*N|8", "@/0UoWufz", "E^XS-VCB|)@\"#X~", 2928, stringArray0, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0);
      NEW nEW0 = instructionFactory0.createNew("");
      assertEquals((short)187, nEW0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("sx<MYQ~H-'Z.", "sx<MYQ~H-'Z.", "sx<MYQ~H-'Z.", 3735, (String[]) null, constantPoolGen0);
      InstructionFactory instructionFactory0 = new InstructionFactory(classGen0, constantPoolGen0);
      InstructionList instructionList0 = instructionFactory0.createPrintln("Oops: Unknown getfield kind:");
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionFactory.createThis();
      assertEquals(0, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstructionFactory instructionFactory0 = new InstructionFactory(constantPoolGen0);
      // Undeclared exception!
      try { 
        instructionFactory0.createPutField("T", "78x", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionFactory", e);
      }
  }
}
