/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:09:00 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ILOAD_ESTest extends ILOAD_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(1658);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      LocalVariables localVariables0 = new LocalVariables(1658);
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(1658, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      executionVisitor0.setFrame(frame0);
      iLOAD0.accept(executionVisitor0);
      assertEquals(4, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(26);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        iLOAD0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ILOAD iLOAD0 = null;
      try {
        iLOAD0 = new ILOAD((-997));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -997
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(0);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      Frame frame0 = new Frame(0, 0);
      executionVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        iLOAD0.accept(executionVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: OperandStack too small, should have thrown proper Exception elsewhere. Stack: Slots used: 0 MaxStack: 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
}
