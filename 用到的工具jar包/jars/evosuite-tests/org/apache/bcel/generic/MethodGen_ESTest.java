/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:31:19 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LineNumberGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.MethodObserver;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodGen_ESTest extends MethodGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, basicType0.NO_ARGS, (String[]) null, "Re{", "m{lz", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.75F);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      methodGen0.addLocalVariable("Re{", (Type) basicType0, instructionHandle0, instructionHandle0);
      methodGen0.addLocalVariable("Re{", (Type) basicType0, instructionHandle0, instructionHandle0);
      methodGen0.copy("m{lz", constantPoolGen0);
      assertEquals(3, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      InstructionList instructionList0 = new InstructionList(lCMP0);
      instructionList0.append((Instruction) lCMP0, (Instruction) lCMP0);
      AALOAD aALOAD0 = new AALOAD();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      String[] stringArray0 = new String[9];
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(16, type0, type0.NO_ARGS, stringArray0, "", "org.apache.bcel.generic.POP2", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 9
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPEQ0);
      MethodGen.BranchTarget methodGen_BranchTarget0 = new MethodGen.BranchTarget(branchHandle0, (-2065));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "Me?\"9n9/", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("Me?\"9n9/", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aCONST_NULL0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      methodGen0.getClassName();
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2538, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.copy("", constantPoolGen0);
      //  // Unstable assertion: assertEquals(6, constantPoolGen0.getSize());
      //  // Unstable assertion: assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IINC iINC0 = new IINC(137, 59);
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(59, type0, type0.NO_ARGS, (String[]) null, "2kX<168U", "2kX<168U", instructionList0, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IINC iINC0 = new IINC(137, 59);
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(59, type0, type0.NO_ARGS, (String[]) null, "2kX<168U", "2kX<168U", instructionList0, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        methodGen0.copy("2kX<168U", (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 53, (-3629), (Attribute[]) null, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -3629. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method method0 = new Method();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "org.apache.bcel.classfile.DescendingVisitor", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type[] typeArray0 = new Type[5];
      String[] stringArray0 = new String[5];
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(143, (Type) null, typeArray0, stringArray0, "#=g8Vio*S-Skvp", "&I9!g", instructionList0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RET rET0 = new RET();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = rET0.getType(constantPoolGen0);
      String[] stringArray0 = new String[6];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-745), type0, type0.NO_ARGS, stringArray0, "dU~S2", "D)O[ lt*", instructionList0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      assertNull(methodGen_BranchTarget0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.addAnnotationsAsAttribute(constantPoolGen0);
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      LocalVariableTable localVariableTable0 = methodGen0.getLocalVariableTable(constantPoolGen0);
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals(2, localVariableTable0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, basicType0.NO_ARGS, (String[]) null, "Re{", "m{lz", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertEquals("m{lz", methodGen0.getClassName());
      assertEquals(1, methodGen0.getMaxLocals());
      assertEquals("Re{", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2538, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.removeLocalVariables();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.getCodeAttributes();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      methodGen0.setInstructionList(instructionList0);
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.setClassName("?");
      assertEquals("?", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.setArgumentTypes(type0.NO_ARGS);
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.setMaxStack(2533);
      assertEquals(2533, methodGen0.getMaxStack());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.setArgumentNames(stringArray0);
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "~Ibc", (InstructionList) null, constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(type0.STRING, linkedList0, false, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addParameterAnnotation((-695), annotationEntryGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -695
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.getAnnotationsOnParameter((-1));
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      String string0 = methodGen0.toString();
      assertEquals("public protected synchronized volatile transient native strictfp long zM~em\"X9n9/e()", string0);
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, basicType0.NO_ARGS, (String[]) null, "R{", "m{lz", instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      assertEquals("m{lz", methodGen0.getClassName());
      assertEquals(1, methodGen0.getMaxLocals());
      assertEquals("R{", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IINC iINC0 = new IINC(137, 59);
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(59, type0, type0.NO_ARGS, (String[]) null, "2kX<168U", "2kX<168U", instructionList0, (ConstantPoolGen) null);
      methodGen0.setMaxStack();
      assertEquals(1, methodGen0.getMaxStack());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FASTORE fASTORE0 = (FASTORE)InstructionConstants.FASTORE;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fASTORE0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      IUSHR iUSHR0 = new IUSHR();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(iUSHR0);
      methodGen_BranchStack0.push(instructionHandle0, 169);
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      assertNotNull(methodGen_BranchTarget0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ic", (InstructionList) null, constantPoolGen0);
      methodGen0.removeNOPs();
      assertEquals("Ic", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicType basicType0 = Type.FLOAT;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-14), basicType0, basicType0.NO_ARGS, (String[]) null, "Re{", "m{lz", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("m{lz", constantPoolGen0);
      //  // Unstable assertion: assertEquals(4, constantPoolGen0.getSize());
      //  // Unstable assertion: assertNotSame(methodGen0, methodGen1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LCMP lCMP0 = new LCMP();
      Type type0 = lCMP0.getType((ConstantPoolGen) null);
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((-913), type0, type0.NO_ARGS, stringArray0, "LocalVariableTable", (String) null, instructionList0, (ConstantPoolGen) null);
      Character character0 = Character.valueOf('f');
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, character0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, type0.STRINGBUFFER);
      assertNotNull(codeExceptionGen0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, basicType0, basicType0.NO_ARGS, (String[]) null, "Re{", "m{lz", instructionList0, constantPoolGen0);
      methodGen0.copy("m{lz", constantPoolGen0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[5];
      InstructionList instructionList0 = new InstructionList(aRETURN0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(247, objectType0, objectType0.NO_ARGS, stringArray0, "arg", stringArray0[0], instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 5
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IINC iINC0 = new IINC(137, 59);
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(59, type0, type0.NO_ARGS, (String[]) null, "2kX<168U", "2kX<168U", instructionList0, (ConstantPoolGen) null);
      methodGen0.setMaxStack();
      assertEquals(0, methodGen0.getMaxStack());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setArgumentName(2533, "zM~em\"X9n9/e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2533
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addLineNumber((InstructionHandle) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InstructionHandle may not be null
         //
         verifyException("org.apache.bcel.generic.LineNumberGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BIPUSH bIPUSH0 = new BIPUSH();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = bIPUSH0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen((-180), type0, type0.NO_ARGS, (String[]) null, "{ao", "t", instructionList0, constantPoolGen0);
      methodGen0.setReturnType(type0);
      assertEquals("t", methodGen0.getClassName());
      assertEquals("{ao", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.addException("");
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      int int0 = methodGen0.getMaxLocals();
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("", constantPoolGen0);
      //  // Unstable assertion: assertEquals(6, constantPoolGen0.getSize());
      //  // Unstable assertion: assertEquals("", methodGen1.getClassName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.removeCodeAttributes();
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.removeException("");
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      int int0 = methodGen0.getMaxStack();
      assertEquals(0, int0);
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentType(177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 177
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.removeExceptionHandlers();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.getExceptions();
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", methodGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BIPUSH bIPUSH0 = new BIPUSH();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = bIPUSH0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(1163, type0, (Type[]) null, (String[]) null, "", "", instructionList0, constantPoolGen0);
      CodeExceptionGen[] codeExceptionGenArray0 = methodGen0.getExceptionHandlers();
      assertEquals(0, codeExceptionGenArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.getReturnType();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "zM~em\"X9n9/e", "Ibc", (InstructionList) null, constantPoolGen0);
      String string0 = methodGen0.getClassName();
      assertEquals("zM~em\"X9n9/e", methodGen0.getName());
      assertEquals("Ibc", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IINC iINC0 = new IINC(137, 59);
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(59, type0, type0.NO_ARGS, (String[]) null, "2kX<168U", "2kX<168U", instructionList0, (ConstantPoolGen) null);
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(iINC0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iF_ICMPLT0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(branchHandle0, branchHandle0, branchHandle0, type0.CLASS);
      methodGen0.removeExceptionHandler(codeExceptionGen0);
      assertEquals("2kX<168U", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aCONST_NULL0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      methodGen0.removeLineNumber((LineNumberGen) null);
      assertEquals(1, methodGen0.getMaxLocals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LCMP lCMP0 = new LCMP();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = lCMP0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      MethodGen methodGen0 = new MethodGen(2533, type0, type0.NO_ARGS, stringArray0, "Me?\"9n9/", "Ibc", (InstructionList) null, constantPoolGen0);
      methodGen0.removeLineNumbers();
      assertEquals("Ibc", methodGen0.getClassName());
      assertEquals("Me?\"9n9/", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      MethodGen.setComparator(bCELComparator0);
  }
}
