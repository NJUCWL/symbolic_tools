/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:22:53 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.util.LinkedList;
import java.util.List;
import org.apache.bcel.classfile.AnnotationElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.generic.AnnotationElementValueGen;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationElementValueGen_ESTest extends AnnotationElementValueGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Bs~2jmU,wk ^gv]", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      annotationElementValueGen0.dump(dataOutputStream0);
      assertEquals(91, ElementValueGen.ARRAY);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("interface");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationEntryGen) null, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen0 = annotationElementValueGen0.getAnnotation();
      assertNull(annotationEntryGen0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("F*3>A[FQkHR8yhN");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen1 = annotationElementValueGen0.getAnnotation();
      assertTrue(annotationEntryGen1.isRuntimeVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        annotationElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationElementValueGen annotationElementValueGen0 = null;
      try {
        annotationElementValueGen0 = new AnnotationElementValueGen(73, (AnnotationEntryGen) null, (ConstantPoolGen) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only element values of type annotation can be built with this ctor - type specified: 73
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationElementValueGen annotationElementValueGen0 = null;
      try {
        annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationElementValue) null, (ConstantPoolGen) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented yet
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen1 = annotationElementValueGen0.getAnnotation();
      assertEquals(1, annotationEntryGen1.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      ElementValue elementValue0 = annotationElementValueGen0.getElementValue();
      assertEquals((byte)73, ElementValue.PRIMITIVE_INT);
  }
}
