/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:46:51 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FCONST_ESTest extends FCONST_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      Frame frame0 = new Frame(869, 20);
      executionVisitor0.setFrame(frame0);
      fCONST0.accept(executionVisitor0);
      assertEquals(1, fCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FCONST fCONST0 = new FCONST(1.0F);
      Number number0 = fCONST0.getValue();
      assertEquals((short)12, fCONST0.getOpcode());
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      Frame frame0 = new Frame(869, (-2));
      executionVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        fCONST0.accept(executionVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: OperandStack too small, should have thrown proper Exception elsewhere. Stack: Slots used: 0 MaxStack: -2.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FCONST fCONST0 = new FCONST(1.0F);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        fCONST0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FCONST fCONST0 = new FCONST(2.0F);
      assertEquals((short)13, fCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FCONST fCONST0 = null;
      try {
        fCONST0 = new FCONST((-1.4238455F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // FCONST can be used only for 0.0, 1.0 and 2.0: -1.4238455
         //
         verifyException("org.apache.bcel.generic.FCONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FCONST fCONST0 = new FCONST(0.0F);
      assertEquals((short)11, fCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        fCONST0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      assertEquals("F", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      Number number0 = fCONST0.getValue();
      assertEquals(0.0F, number0);
  }
}
