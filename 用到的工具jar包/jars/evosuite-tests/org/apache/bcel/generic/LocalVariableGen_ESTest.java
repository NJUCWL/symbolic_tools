/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:57:22 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariableGen_ESTest extends LocalVariableGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      D2F d2F0 = new D2F();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = d2F0.getType(constantPoolGen0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(0, "VA^", type0, (InstructionHandle) null, (InstructionHandle) null);
      String string0 = localVariableGen0.toString();
      assertEquals(0, localVariableGen0.getIndex());
      assertEquals("LocalVariableGen(VA^, float, null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 10);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IADD iADD0 = new IADD();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iADD0);
      localVariableGen0.updateTarget((InstructionHandle) null, instructionHandle0);
      assertEquals(824, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2606);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, branchHandle0, branchHandle0);
      localVariableGen0.getStart();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (int) (byte)0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      instructionHandle0.updatePosition(65535, 2606);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "d2f", type0, instructionHandle0, branchHandle0);
      localVariableGen0.getStart();
      assertTrue(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle0, instructionHandle0);
      localVariableGen0.getStart();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.setName((String) null);
      localVariableGen0.getName();
      assertEquals(824, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, type0.THROWABLE);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "", type0, instructionHandle0, instructionHandle0);
      localVariableGen0.getName();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (int) (byte)0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      instructionHandle0.updatePosition(65535, 2606);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "d2f", type0, instructionHandle0, branchHandle0);
      LocalVariable localVariable0 = localVariableGen0.getLocalVariable(constantPoolGen0);
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(2606, localVariable0.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "^", type0, instructionHandle0, branchHandle0);
      localVariableGen0.setIndex((-4243));
      LocalVariable localVariable0 = localVariableGen0.getLocalVariable(constantPoolGen0);
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(4, localVariable0.getSignatureIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, branchHandle0, branchHandle0);
      int int0 = localVariableGen0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "^", type0, instructionHandle0, branchHandle0);
      localVariableGen0.getEnd();
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(2606, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle0, instructionHandle0);
      localVariableGen0.getEnd();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle1, instructionHandle1);
      // Undeclared exception!
      try { 
        localVariableGen0.updateTarget(instructionHandle0, branchHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: fcmpg[150](1), but {  -1: ldc[18](2) 2,   -1: ldc[18](2) 2}
         //
         verifyException("org.apache.bcel.generic.LocalVariableGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LALOAD lALOAD0 = new LALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(lALOAD0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(3706, "p+dvyKF{j1M+", uninitializedObjectType0, instructionHandle0, instructionHandle0);
      // Undeclared exception!
      try { 
        localVariableGen0.getLocalVariable((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LocalVariableGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(248, (String) null, type0, (InstructionHandle) null, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        localVariableGen0.getLocalVariable(constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IFGT iFGT0 = new IFGT();
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFGT0);
      LocalVariableGen localVariableGen0 = null;
      try {
        localVariableGen0 = new LocalVariableGen(1, "", (Type) null, branchHandle0, branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LocalVariableGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      LocalVariableGen localVariableGen1 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen1.setIndex(668);
      boolean boolean0 = localVariableGen0.equals(localVariableGen1);
      assertEquals(668, localVariableGen1.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "S\"{1orZ");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "S\"{1orZ", type0, instructionHandle0, instructionHandle0);
      localVariableGen0.hashCode();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "^", type0, instructionHandle0, branchHandle0);
      localVariableGen0.setEnd(branchHandle0);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(2606, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("$W%H>jeq");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LALOAD lALOAD0 = new LALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(lALOAD0);
      Integer integer0 = new Integer(214);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(214, "$W%H>jeq", uninitializedObjectType0, instructionHandle0, instructionHandle0);
      LocalVariableGen localVariableGen1 = new LocalVariableGen((int) integer0, "$W%H>jeq", objectType0, instructionHandle0, instructionHandle0);
      assertTrue(localVariableGen1.equals((Object)localVariableGen0));
      assertEquals(214, localVariableGen1.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      LocalVariableGen localVariableGen1 = (LocalVariableGen)localVariableGen0.clone();
      assertTrue(localVariableGen1.equals((Object)localVariableGen0));
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(iNSTANCEOF0);
      localVariableGen1.setStart(instructionHandle0);
      boolean boolean0 = localVariableGen0.equals(localVariableGen1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (int) (byte)0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "d2f", type0, instructionHandle0, branchHandle0);
      assertTrue(branchHandle0.hasTargeters());
      
      LocalVariableGen localVariableGen1 = new LocalVariableGen((byte)0, "d2f", type0, instructionHandle0, instructionHandle0);
      assertEquals(0, localVariableGen1.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      boolean boolean0 = localVariableGen0.equals("g\"8JPdZ?pOqYM");
      assertEquals(824, localVariableGen0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(824, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      boolean boolean0 = localVariableGen0.equals(localVariableGen0);
      assertTrue(boolean0);
      assertEquals(824, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle0, instructionHandle0);
      boolean boolean0 = localVariableGen0.containsTarget(branchHandle0);
      assertFalse(boolean0);
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "|+", type0, instructionHandle0, branchHandle0);
      boolean boolean0 = localVariableGen0.containsTarget(branchHandle0);
      assertTrue(branchHandle0.hasTargeters());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle0, instructionHandle0);
      boolean boolean0 = localVariableGen0.containsTarget(instructionHandle0);
      assertEquals(0, localVariableGen0.getIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      IFLT iFLT0 = new IFLT();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen((byte)0, "Store", type0, instructionHandle0, instructionHandle0);
      // Undeclared exception!
      try { 
        localVariableGen0.updateTarget(branchHandle0, branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fCMPG0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2614, "^", type0, instructionHandle0, (InstructionHandle) null);
      LocalVariable localVariable0 = localVariableGen0.getLocalVariable(constantPoolGen0);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, localVariable0.getLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      D2F d2F0 = new D2F();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = d2F0.getType(constantPoolGen0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(0, "VA^", type0, (InstructionHandle) null, (InstructionHandle) null);
      LocalVariable localVariable0 = localVariableGen0.getLocalVariable(constantPoolGen0);
      assertEquals(0, localVariable0.getLength());
      assertEquals(1, localVariable0.getNameIndex());
      assertEquals(0, localVariable0.getIndex());
      assertEquals(2, localVariable0.getSignatureIndex());
      assertEquals(0, localVariable0.getStartPC());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      D2F d2F0 = new D2F();
      BasicType basicType0 = Type.SHORT;
      InstructionHandle instructionHandle0 = new InstructionHandle(d2F0);
      LocalVariableGen localVariableGen0 = null;
      try {
        localVariableGen0 = new LocalVariableGen(65536, "sV\"", basicType0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid index index: 65536
         //
         verifyException("org.apache.bcel.generic.LocalVariableGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aALOAD0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = null;
      try {
        localVariableGen0 = new LocalVariableGen((-1219), "\t\t", type0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid index index: -1219
         //
         verifyException("org.apache.bcel.generic.LocalVariableGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(804, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      int int0 = localVariableGen0.getIndex();
      assertEquals(804, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(804, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.dispose();
      assertEquals(804, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(804, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.getEnd();
      assertEquals(804, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(804, "g\"8JPdZ?pOqYM", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.setType(type0);
      assertEquals(804, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(248, (String) null, type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.getType();
      assertEquals(248, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      D2F d2F0 = new D2F();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = d2F0.getType(constantPoolGen0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(0, "VA^", type0, (InstructionHandle) null, (InstructionHandle) null);
      localVariableGen0.getStart();
      assertEquals(0, localVariableGen0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FCMPG fCMPG0 = new FCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Store");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      LocalVariableGen localVariableGen0 = new LocalVariableGen(2606, "|+", type0, instructionHandle0, branchHandle0);
      localVariableGen0.getName();
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(2606, localVariableGen0.getIndex());
  }
}
