/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:49:16 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionComparator;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Instruction_ESTest extends Instruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte((-128));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iDIV0.dump(dataOutputStream0);
      assertEquals("l", byteArrayOutputStream0.toString());
      assertEquals(1, iDIV0.getLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DLOAD dLOAD0 = new DLOAD(0);
      dLOAD0.setLength(275);
      assertEquals(275, dLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_0;
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iSTORE0.initFromFile(byteSequence0, true);
      assertEquals(4, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DUP2 dUP2_0 = new DUP2();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = dUP2_0.toString(constantPool0);
      assertEquals(1, dUP2_0.getLength());
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DUP dUP0 = new DUP();
      String string0 = dUP0.toString();
      assertEquals("dup[89](1)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MONITOREXIT mONITOREXIT0 = (MONITOREXIT)InstructionConstants.MONITOREXIT;
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = mONITOREXIT0.produceStack(constantPoolGen0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instruction.setComparator((InstructionComparator) null);
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      assertNull(instructionComparator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      Instruction instruction1 = instruction0.copy();
      assertSame(instruction1, instruction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RET rET0 = new RET(1205);
      assertEquals(4, rET0.getLength());
      
      rET0.length = (short)0;
      Instruction instruction0 = rET0.copy();
      assertNotSame(rET0, instruction0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISUB iSUB0 = new ISUB();
      assertEquals(1, iSUB0.getLength());
      
      iSUB0.length = (short) (-950);
      Instruction instruction0 = iSUB0.copy();
      assertSame(iSUB0, instruction0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      I2S i2S0 = new I2S();
      i2S0.setOpcode((short)832);
      // Undeclared exception!
      try { 
        i2S0.toString(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 832
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instruction.readInstruction((ByteSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        iFLT0.produceStack(constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      // Undeclared exception!
      try { 
        iF_ACMPNE0.getName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      D2L d2L0 = new D2L();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        d2L0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RET rET0 = new RET();
      // Undeclared exception!
      try { 
        rET0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.InstructionConst", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LCONST lCONST0 = new LCONST();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        lCONST0.consumeStack(constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ISUB iSUB0 = new ISUB();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iSUB0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = Instruction.isValidShort((-128));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte(254);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      I2S i2S0 = new I2S();
      String string0 = i2S0.toString(true);
      assertEquals("i2s[147](1)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      String string0 = aRETURN0.toString(false);
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      iFNULL0.hashCode();
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short) (-1), iFNULL0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BIPUSH bIPUSH0 = new BIPUSH();
      // Undeclared exception!
      try { 
        bIPUSH0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = dUP2_X2_0.consumeStack(constantPoolGen0);
      assertEquals(4, int0);
      assertEquals(1, dUP2_X2_0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IDIV iDIV0 = new IDIV();
      String string0 = iDIV0.getName();
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        aRETURN0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DUP dUP0 = new DUP();
      short short0 = dUP0.getOpcode();
      assertEquals((short)89, short0);
      assertEquals(1, dUP0.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Instruction.isValidByte((-2907));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SWAP sWAP0 = new SWAP();
      ISUB iSUB0 = new ISUB();
      boolean boolean0 = sWAP0.equals(iSUB0);
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DMUL dMUL0 = new DMUL();
      boolean boolean0 = dMUL0.equals(instConstraintVisitor0);
      assertEquals((short)107, dMUL0.getOpcode());
      assertFalse(boolean0);
      assertEquals(1, dMUL0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-2);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 252
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 251
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 247
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-10);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 246
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-13);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 243
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 242
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 241
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 237
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-23);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 233
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-24);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 232
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-25);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 231
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-26);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 230
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 229
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 228
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-29);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 227
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 224
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-33);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 223
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 222
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 221
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-37);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 219
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 217
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 205
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)199, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode detected: 196
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-68);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(7, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-70);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[4] = (byte) (-73);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(6, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(3, instruction0.getLength());
      assertEquals((short)180, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte) (-77);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal opcode after wide: 159
         //
         verifyException("org.apache.bcel.generic.Instruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((short)64, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((short)60, instruction0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(6, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(7, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)35;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)34;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(5, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(8, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(3, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(2, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Instruction.readInstruction(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      InstructionComparator instructionComparator0 = Instruction.getComparator();
      Instruction.setComparator(instructionComparator0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        iF_ICMPGE0.toString(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 175);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(1, instructionArray0.length);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      aRETURN0.dispose();
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals(1, aRETURN0.getLength());
  }
}
