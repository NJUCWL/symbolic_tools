/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:24:33 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.RuntimeInvisibleAnnotations;
import org.apache.bcel.classfile.RuntimeVisibleAnnotations;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.ClassObserver;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassGen_ESTest extends ClassGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "", "", (-991), stringArray0);
      classGen0.setSuperclassNameIndex(3);
      assertEquals(3, classGen0.getSuperclassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.setMethodAt((Method) null, (byte)2);
      assertFalse(classGen0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("", "", "I!g`.s({k=", 47, stringArray0, constantPoolGen0);
      String string0 = classGen0.getSuperclassName();
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<AnnotationDefault> class0 = AnnotationDefault.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int int0 = classGen0.getMinor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", 0, stringArray0, constantPoolGen0);
      classGen0.setMinor((-200));
      int int0 = classGen0.getMinor();
      assertEquals((-200), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method[] methodArray0 = classGen0.getMethods();
      assertEquals(14, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      classGen0.addMethod((Method) null);
      classGen0.getMethodAt(0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(3, classGen0.getMinor());
      assertEquals("Q+UM}+KOx", classGen0.getSuperclassName());
      assertEquals(5, classGen0.getSuperclassNameIndex());
      assertEquals("", classGen0.getFileName());
      assertEquals("", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("g\",a.a%B^)?bS E 24g");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<Code> class0 = Code.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt(0);
      assertFalse(method0.isSynchronized());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<RuntimeVisibleAnnotations> class0 = RuntimeVisibleAnnotations.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.getMethodAt((byte)2);
      assertTrue(method0.isPublic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ClassGen classGen0 = new ClassGen("", "", "", (-1002), stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(3, javaClass0.getMinor());
      assertEquals(45, javaClass0.getMajor());
      assertEquals(3, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<init>";
      stringArray0[1] = "Clone Not Supported";
      stringArray0[2] = "<init>";
      ClassGen classGen0 = new ClassGen("<init>", "<init>", "Clone Not Supported", (-1653), stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(45, javaClass0.getMajor());
      assertEquals(3, javaClass0.getMinor());
      assertEquals(4, javaClass0.getSuperclassNameIndex());
      assertEquals("<init>", classGen0.getClassName());
      assertEquals("Clone Not Supported", javaClass0.getFileName());
      assertEquals("<init>", classGen0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Q+UM}+KOx";
      stringArray0[2] = "Q+UM}+KOx";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      assertEquals(45, classGen0.getMajor());
      
      classGen0.setMajor(0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(3, javaClass0.getMinor());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ClassGen classGen0 = new ClassGen("", "", "", (-991), stringArray0);
      classGen0.setMajor((-991));
      classGen0.getJavaClass();
      assertEquals((-991), classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "u>-nqX)p5TiP7?", 0, (String[]) null);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(45, javaClass0.getMajor());
      assertEquals(4, javaClass0.getSuperclassNameIndex());
      assertEquals("u>-nqX)p5TiP7?", javaClass0.getFileName());
      assertEquals("", classGen0.getClassName());
      assertEquals(3, javaClass0.getMinor());
      assertEquals("", classGen0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "j5Bx)#V[p;CM{";
      stringArray0[2] = "j5Bx)#V[p;CM{";
      ClassGen classGen0 = new ClassGen("", "", "", (-302), stringArray0);
      JavaClass javaClass0 = classGen0.getJavaClass();
      assertEquals(45, javaClass0.getMajor());
      assertEquals(3, javaClass0.getMinor());
      assertEquals(3, javaClass0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6lQj/SeABZVeB";
      stringArray0[1] = "6lQj/SeABZVeB";
      stringArray0[2] = "6lQj/SeABZVeB";
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "6lQj/SeABZVeB", "org.apache.bcel.generic.ClassGen", 3075, stringArray0);
      int[] intArray0 = classGen0.getInterfaces();
      assertEquals(6, classGen0.getSuperclassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals("6lQj/SeABZVeB", classGen0.getSuperclassName());
      assertEquals(3, classGen0.getMinor());
      assertArrayEquals(new int[] {6, 6, 6}, intArray0);
      assertEquals("org.apache.bcel.generic.ClassGen", classGen0.getFileName());
      assertEquals("org.apache.bcel.generic.ClassGen", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "6lQj/SeABZVeB", "org.apache.bcel.generic.ClassGen", 3075, stringArray0);
      String[] stringArray1 = classGen0.getInterfaceNames();
      assertEquals("6lQj/SeABZVeB", classGen0.getSuperclassName());
      assertEquals(6, classGen0.getSuperclassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, stringArray1.length);
      assertEquals("org.apache.bcel.generic.ClassGen", classGen0.getClassName());
      assertEquals("org.apache.bcel.generic.ClassGen", classGen0.getFileName());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ClassGen classGen0 = new ClassGen("z]GMuD)5]l_", "z]GMuD)5]l_", (String) null, 0, stringArray0);
      String string0 = classGen0.getFileName();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("+r", "", "jt5B\u0002G#V[p;CM{", 3235, stringArray0, constantPoolGen0);
      String string0 = classGen0.getFileName();
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals("jt5B\u0002G#V[p;CM{", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("()V", "p-[]u {5RD-(<~", "p-[]u {5RD-(<~", (-4363), stringArray0, constantPoolGen0);
      classGen0.addField((Field) null);
      classGen0.getFields();
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals("p-[]u {5RD-(<~", classGen0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("", "", "I!g`.s({k=", 47, stringArray0, constantPoolGen0);
      String string0 = classGen0.getClassName();
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "N>-nqX)p5Ti>7?", 2074, (String[]) null);
      classGen0.equals(classGen0);
      assertEquals("N>-nqX)p5Ti>7?", classGen0.getFileName());
      assertEquals(3, classGen0.getMinor());
      assertEquals("", classGen0.getSuperclassName());
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, classGen0.getSuperclassNameIndex());
      assertEquals("", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("SourceFile", "", "jt5B\u0002G#V[p;CM{", (-2), stringArray0, constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.setSuperclassName(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("M3zieX>$cY", "org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", (-841), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setMethods((Method[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ExceptionTable> class0 = ExceptionTable.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      // Undeclared exception!
      try { 
        classGen0.setMethodAt((Method) null, (-975));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClassGen classGen0 = new ClassGen("", "/n}bH@z", "", 0, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.setClassNameIndex(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(614, 614, 0, (Attribute[]) null, constantPool0);
      classGen0.replaceField(field0, field0);
      // Undeclared exception!
      try { 
        classGen0.replaceField(field0, field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(614, 614, 0, (Attribute[]) null, constantPool0);
      classGen0.replaceField(field0, field0);
      // Undeclared exception!
      try { 
        classGen0.removeField(field0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("", "Replacement method must not be null", "", (-1101), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getMethodAt((-3294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      classGen0.addMethod((Method) null);
      // Undeclared exception!
      try { 
        classGen0.containsMethod("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((byte)1, (byte)2, (-1637), attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        classGen0.containsField(field0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      // Undeclared exception!
      try { 
        classGen0.containsField((Field) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((String) null, "FWW{]Um|49esp)V~*", (String) null, 0, stringArray0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = null;
      try {
        classGen0 = new ClassGen((String) null, (String) null, (String) null, (-201), stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "6lQj/SeABZVeB", "org.apache.bcel.generic.ClassGen", 3075, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getInterfaces();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "N>-nqX)p5Ti>7?", 2074, (String[]) null);
      classGen0.getInterfaces();
      assertEquals("", classGen0.getSuperclassName());
      assertEquals(3, classGen0.getMinor());
      assertEquals("", classGen0.getClassName());
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, classGen0.getSuperclassNameIndex());
      assertEquals("N>-nqX)p5Ti>7?", classGen0.getFileName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.FMUL", "7ppcg|`A|", "org.apache.bcel.generic.FMUL", (-4419), (String[]) null, constantPoolGen0);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals("org.apache.bcel.generic.FMUL", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("SourceFile", "", "jt5B\u0002G#V[p;CM{", (-2), stringArray0, constantPoolGen0);
      classGen0.addInterface("SourceFile");
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("+r", "", "jt5B\u0002G#V[p;CM{", 3235, stringArray0, constantPoolGen0);
      classGen0.addAttribute((Attribute) null);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      String string0 = classGen0.getClassName();
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleAnnotations", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver0);
      classGen0.update();
      assertFalse(classGen0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      classGen0.update();
      assertEquals(0, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "", "", (-991), stringArray0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver0);
      ClassObserver classObserver1 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.removeObserver(classObserver1);
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "", "", (-991), stringArray0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.removeObserver(classObserver0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("]Yb]%Y4Pn", "Expecting an ObjectType as 'objectref' on the stack, not a '", "Expecting an ObjectType as 'objectref' on the stack, not a '", 2292, stringArray0, constantPoolGen0);
      ClassObserver classObserver0 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver0);
      ClassObserver classObserver1 = mock(ClassObserver.class, new ViolatedAssumptionAnswer());
      classGen0.addObserver(classObserver1);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getJavaClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen(":0ds5", "zXzqW", "", 225, stringArray0);
      Method[] methodArray0 = new Method[1];
      classGen0.setMethods(methodArray0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(":0ds5", classGen0.getClassName());
      assertEquals("zXzqW", classGen0.getSuperclassName());
      assertEquals(6, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getMinor());
      assertEquals("", classGen0.getFileName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      // Undeclared exception!
      try { 
        classGen0.replaceField((Field) null, (Field) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Replacement method must not be null
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(614, 614, 0, (Attribute[]) null, constantPool0);
      classGen0.replaceField(field0, field0);
      // Undeclared exception!
      try { 
        classGen0.containsField((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", 120, stringArray0);
      Method method0 = new Method();
      classGen0.replaceMethod(method0, method0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "Q+UM}+KOx", "", (-991), stringArray0);
      // Undeclared exception!
      try { 
        classGen0.replaceMethod((Method) null, (Method) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Replacement method must not be null
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        classGen0.replaceMethod(method0, method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Method method0 = classGen0.containsMethod("<init>", "org.apache.bcel.generic.ClassGen$1");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      Field field0 = classGen0.containsField("e+PP#/UOVFi19:");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("()V", "p-[]u {5RD-(<~", "p-[]u {5RD-(<~", (-4363), stringArray0, constantPoolGen0);
      classGen0.addField((Field) null);
      boolean boolean0 = classGen0.containsField((Field) null);
      assertEquals(6, constantPoolGen0.getSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen(":0ds5", "zXzqW", "", 225, stringArray0);
      boolean boolean0 = classGen0.containsField((Field) null);
      assertEquals("", classGen0.getFileName());
      assertFalse(boolean0);
      assertEquals(":0ds5", classGen0.getClassName());
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
      assertEquals("zXzqW", classGen0.getSuperclassName());
      assertEquals(6, classGen0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<AnnotationDefault> class0 = AnnotationDefault.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      JavaClass javaClass1 = classGen0.getJavaClass();
      assertEquals(0, javaClass1.getMinor());
      assertEquals(51, javaClass1.getMajor());
      assertEquals("org.apache.bcel.classfile.Attribute", javaClass1.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.generic.DUP");
      ClassGen classGen0 = new ClassGen(javaClass0);
      assertEquals(33, classGen0.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.DSUB", "ncKNb17-", (String) null, 220, stringArray0, constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.setClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ClassGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      ClassGen.setComparator(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      ClassGen classGen0 = new ClassGen(javaClass1);
      Field field0 = classGen0.containsField("e+PP#/UOVFi19:");
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("\"z 3G[C\"Hz:4", "", "", (-4796), stringArray0, constantPoolGen0);
      int int0 = classGen0.getClassNameIndex();
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("2C`V>", "Replacement method must not be null", "org.apache.bcel.generic.LDC_W", (-320), stringArray0, constantPoolGen0);
      classGen0.addAnnotationEntry((AnnotationEntryGen) null);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals("2C`V>", classGen0.getClassName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      classGen0.getMethods();
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ClassGen classGen0 = new ClassGen("f2l", "o}L+M@", "o}L+M@", (-19), stringArray0);
      classGen0.addEmptyConstructor(3);
      Method method0 = classGen0.getMethodAt((byte)0);
      assertEquals(6, method0.getNameIndex());
      assertEquals("o}L+M@", classGen0.getFileName());
      assertEquals(7, method0.getSignatureIndex());
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, method0.getModifiers());
      assertEquals(4, classGen0.getClassNameIndex());
      assertEquals("f2l", classGen0.getClassName());
      assertEquals("o}L+M@", classGen0.getSuperclassName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ClassGen classGen0 = new ClassGen("", "", "", 0, stringArray0);
      classGen0.hashCode();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      String[] stringArray0 = classGen0.getInterfaceNames();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      int int0 = classGen0.getMinor();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<RuntimeVisibleAnnotations> class0 = RuntimeVisibleAnnotations.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      int int0 = classGen0.getMajor();
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ClassGen classGen0 = new ClassGen("", "", "", (-991), stringArray0);
      classGen0.getAnnotationEntries();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("", "", "u>-nqX)p5TiP7?", 0, (String[]) null);
      // Undeclared exception!
      try { 
        classGen0.equals("u>-nqX)p5TiP7?");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.bcel.generic.ClassGen
         //
         verifyException("org.apache.bcel.generic.ClassGen$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", 120, stringArray0);
      int int0 = classGen0.getSuperclassNameIndex();
      assertEquals(45, classGen0.getMajor());
      assertEquals(4, int0);
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<RuntimeVisibleAnnotations> class0 = RuntimeVisibleAnnotations.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      ConstantPoolGen constantPoolGen0 = classGen0.getConstantPool();
      assertEquals(46, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<RuntimeInvisibleAnnotations> class0 = RuntimeInvisibleAnnotations.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      classGen0.setConstantPool(constantPoolGen0);
      assertEquals(51, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassGen classGen0 = new ClassGen("+r", "", "jt5B\u0002G#V[p;CM{", 3235, stringArray0, constantPoolGen0);
      classGen0.setSuperclassName("jt5B\u0002G#V[p;CM{");
      assertEquals(7, classGen0.getSuperclassNameIndex());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      classGen0.getAttributes();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      Class<RuntimeVisibleAnnotations> class0 = RuntimeVisibleAnnotations.class;
      JavaClass javaClass0 = memorySensitiveClassPathRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      // Undeclared exception!
      try { 
        classGen0.setMethodAt((Method) null, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("\"z 3G[C\"Hz:4", "", "", (-4796), stringArray0, constantPoolGen0);
      String string0 = classGen0.getFileName();
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BCELComparator bCELComparator0 = ClassGen.getComparator();
      assertNotNull(bCELComparator0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<RuntimeVisibleParameterAnnotations> class0 = RuntimeVisibleParameterAnnotations.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      ClassGen classGen0 = new ClassGen(javaClass0);
      ClassGen classGen1 = (ClassGen)classGen0.clone();
      assertEquals(33, classGen1.getAccessFlags());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      classGen0.getFields();
      assertEquals(3, classGen0.getMinor());
      assertEquals(45, classGen0.getMajor());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ClassGen classGen0 = new ClassGen(":0ds5", "zXzqW", "", 225, stringArray0);
      classGen0.removeAttribute((Attribute) null);
      assertEquals(45, classGen0.getMajor());
      assertEquals("zXzqW", classGen0.getSuperclassName());
      assertEquals(6, classGen0.getSuperclassNameIndex());
      assertEquals(":0ds5", classGen0.getClassName());
      assertEquals("", classGen0.getFileName());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      classGen0.getSuperclassName();
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ClassGen classGen0 = new ClassGen("", "", "", 3345, stringArray0);
      classGen0.setClassNameIndex(3);
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("elg4iQv,_h3<[", "E_", "elg4iQv,_h3<[", (-666), stringArray0);
      classGen0.setClassName("");
      assertEquals(7, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("elg4iQv,_h3<[", "E_", "elg4iQv,_h3<[", (-666), stringArray0);
      classGen0.removeField((Field) null);
      assertEquals(45, classGen0.getMajor());
      assertEquals(5, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getMinor());
      assertEquals("E_", classGen0.getSuperclassName());
      assertEquals("elg4iQv,_h3<[", classGen0.getClassName());
      assertEquals("elg4iQv,_h3<[", classGen0.getFileName());
      assertEquals(3, classGen0.getClassNameIndex());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ClassGen classGen0 = new ClassGen("org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", "org.apache.bcel.generic.ClassGen", 120, stringArray0);
      // Undeclared exception!
      try { 
        classGen0.getMethodAt(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ClassGen classGen0 = new ClassGen("elg4iQv,_h3<[", "E_", "elg4iQv,_h3<[", (-666), stringArray0);
      classGen0.removeInterface((String) null);
      assertEquals(5, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getClassNameIndex());
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getMinor());
      assertEquals("E_", classGen0.getSuperclassName());
      assertEquals("elg4iQv,_h3<[", classGen0.getClassName());
      assertEquals("elg4iQv,_h3<[", classGen0.getFileName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassGen classGen0 = new ClassGen("\"z 3G[C\"Hz:4", "", "", (-4796), stringArray0, constantPoolGen0);
      // Undeclared exception!
      try { 
        classGen0.setSuperclassNameIndex((-1840));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1840. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClassGen classGen0 = new ClassGen("setAttributes", "setAttributes", "setAttributes", 1619, (String[]) null);
      Method method0 = new Method();
      classGen0.removeMethod(method0);
      assertEquals(45, classGen0.getMajor());
      assertEquals(3, classGen0.getSuperclassNameIndex());
      assertEquals(3, classGen0.getMinor());
  }
}
