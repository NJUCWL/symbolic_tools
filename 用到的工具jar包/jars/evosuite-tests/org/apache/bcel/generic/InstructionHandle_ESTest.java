/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:03:40 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionTargeter;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionHandle_ESTest extends InstructionHandle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      int int0 = instructionHandle0.updatePosition(2, 65);
      assertEquals(1, instructionHandle0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      InstructionList instructionList0 = new InstructionList(sALOAD0);
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) jSR_W0);
      branchHandle0.dispose();
      Instruction instruction0 = branchHandle0.swapInstruction(sALOAD0);
      assertNull(instruction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ICONST iCONST0 = new ICONST();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iCONST0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      instructionHandle0.swapInstruction(iFLE0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MONITORENTER mONITORENTER0 = (MONITORENTER)InstructionConstants.MONITORENTER;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(mONITORENTER0);
      instructionHandle0.swapInstruction(mONITORENTER0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SALOAD sALOAD0 = (SALOAD)InstructionConstants.SALOAD;
      InstructionList instructionList0 = new InstructionList(sALOAD0);
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) jSR_W0);
      InstructionHandle instructionHandle0 = branchHandle0.setPrev((InstructionHandle) null);
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      InstructionHandle instructionHandle1 = instructionHandle0.setPrev(instructionHandle0);
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      assertEquals((-1), instructionHandle0.getPosition());
      
      instructionList0.setPositions();
      instructionHandle0.setPrev(instructionHandle0);
      assertEquals(0, instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) bASTORE0);
      instructionList0.setPositions();
      instructionHandle1.setPrev(instructionHandle0);
      assertEquals(1, instructionHandle0.getPosition());
      assertEquals(0, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DCONST dCONST0 = (DCONST)InstructionConstants.DCONST_1;
      InstructionList instructionList0 = new InstructionList(dCONST0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dCONST0, (Instruction) dCONST0);
      InstructionHandle instructionHandle1 = instructionHandle0.setNext((InstructionHandle) null);
      assertEquals((-1), instructionHandle0.getPosition());
      assertNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      InstructionHandle instructionHandle1 = instructionHandle0.setNext(instructionHandle0);
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      InstructionHandle instructionHandle0 = new InstructionHandle(fCMPL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = new Boolean("QkM  L(Q7k@;Gr$r7");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFGE0);
      instructionHandle0.setNext(branchHandle0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.i_position = 2271;
      InstructionHandle instructionHandle1 = instructionHandle0.setNext(instructionHandle0);
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle1);
      InstructionHandle instructionHandle2 = instructionHandle0.getPrev();
      assertEquals((-1), instructionHandle2.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DUP2 dUP2_0 = new DUP2();
      InstructionList instructionList0 = new InstructionList(dUP2_0);
      instructionList0.getInstructions();
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      InstructionHandle instructionHandle1 = instructionHandle0.getPrev();
      assertEquals(0, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) bASTORE0);
      instructionHandle1.setPosition(1);
      assertEquals(1, instructionHandle1.getPosition());
      
      instructionHandle0.getPrev();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DRETURN dRETURN0 = (DRETURN)InstructionConstants.DRETURN;
      InstructionHandle instructionHandle0 = new InstructionHandle(dRETURN0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFLT0);
      branchHandle0.getPosition();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DRETURN dRETURN0 = (DRETURN)InstructionConstants.DRETURN;
      InstructionHandle instructionHandle0 = new InstructionHandle(dRETURN0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iFLT0);
      iFLT0.setPosition(1);
      branchHandle0.getPosition();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.addHandle();
      instructionHandle0.getNext();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLE0);
      InstructionHandle instructionHandle0 = branchHandle0.getNext();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instructionHandle0.accept(instConstraintVisitor0);
      assertEquals(0, instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      assertEquals((-1), instructionHandle0.getPosition());
      
      instructionList0.setPositions();
      instructionHandle0.getNext();
      assertEquals(0, instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.addHandle();
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      InstructionHandle instructionHandle1 = InstructionHandle.getInstructionHandle(bASTORE0);
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.i_position = 2271;
      instructionHandle0.addHandle();
      InstructionHandle instructionHandle1 = InstructionHandle.getInstructionHandle(bASTORE0);
      assertEquals(2271, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-4636));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionHandleArray0[0] = instructionHandle0;
      instructionHandleArray0[1] = instructionHandleArray0[0];
      instructionHandle0.dispose();
      Instruction instruction0 = instructionHandleArray0[1].getInstruction();
      assertNull(instruction0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPLE0);
      Instruction instruction0 = branchHandle0.getInstruction();
      assertSame(iF_ICMPLE0, instruction0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      BranchHandle branchHandle0 = BranchHandle.getBranchHandle(iF_ICMPLE0);
      branchHandle0.addAttribute(iF_ICMPLE0, iF_ICMPLE0);
      Object object0 = branchHandle0.getAttribute(iF_ICMPLE0);
      assertSame(iF_ICMPLE0, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1819.0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionHandle0.toString(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FSUB fSUB0 = (FSUB)InstructionConstants.FSUB;
      InstructionList instructionList0 = new InstructionList(fSUB0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      // Undeclared exception!
      try { 
        instructionHandle1.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionList instructionList0 = new InstructionList(dUP2_0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      instructionList0.dispose();
      // Undeclared exception!
      try { 
        instructionHandle0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RET rET0 = new RET();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(rET0);
      // Undeclared exception!
      try { 
        instructionHandle0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      // Undeclared exception!
      try { 
        instructionHandle0.setInstruction(iF_ICMPGE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(dSUB0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      // Undeclared exception!
      try { 
        InstructionHandle.getInstructionHandle(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction iflt[155](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      // Undeclared exception!
      try { 
        InstructionHandle.getInstructionHandle(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      Integer integer0 = new Integer(0);
      instructionHandle0.addAttribute(integer0, (Object) null);
      // Undeclared exception!
      try { 
        instructionHandle0.getAttribute(constantUtf8_0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_0;
      InstructionHandle instructionHandle0 = new InstructionHandle(fCONST0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionHandle0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InstructionHandle instructionHandle0 = null;
      try {
        instructionHandle0 = new InstructionHandle((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionHandle instructionHandle0 = null;
      try {
        instructionHandle0 = new InstructionHandle(gOTO0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DUP dUP0 = (DUP)InstructionConstants.DUP;
      InstructionHandle instructionHandle0 = new InstructionHandle(dUP0);
      instructionHandle0.hasTargeters();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      instructionHandle0.addTargeter(ifInstruction0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DUP dUP0 = (DUP)InstructionConstants.DUP;
      InstructionHandle instructionHandle0 = new InstructionHandle(dUP0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      instructionHandle0.removeTargeter(iF_ICMPLT0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DUP dUP0 = (DUP)InstructionConstants.DUP;
      InstructionHandle instructionHandle0 = new InstructionHandle(dUP0);
      instructionHandle0.removeAllTargeters();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      NEWARRAY nEWARRAY0 = new NEWARRAY(basicType0);
      InstructionList instructionList0 = new InstructionList(nEWARRAY0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      instructionList0.delete((Instruction) nEWARRAY0, (Instruction) nEWARRAY0);
      instructionHandle0.setInstruction(nEWARRAY0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      String string0 = instructionHandle0.toString(true);
      assertEquals("  -1: bastore[84](1)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.getInstruction();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionHandle0.getPrev();
      assertEquals((-1), instructionHandle0.getPosition());
      assertNull(instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DRETURN dRETURN0 = (DRETURN)InstructionConstants.DRETURN;
      InstructionHandle instructionHandle0 = new InstructionHandle(dRETURN0);
      int int0 = instructionHandle0.getPosition();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionHandle0.getNext();
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fADD0);
      instructionHandle0.getAttributes();
      instructionHandle0.getAttributes();
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      Integer integer0 = new Integer(0);
      instructionHandle0.addAttribute(integer0, (Object) null);
      instructionHandle0.getAttribute(constantUtf8_0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.getAttribute(bASTORE0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fADD0);
      instructionHandle0.getAttributes();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      instructionHandle0.removeAttribute(iF_ICMPEQ0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0L);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      instructionHandle0.removeAttribute(dataInputStream0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fADD0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      instructionHandle0.getAttributes();
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      instructionHandle0.addAttribute(iF_ICMPLE0, iF_ACMPEQ0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionTargeter[] instructionTargeterArray0 = instructionHandle0.getTargeters();
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, instructionTargeterArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      instructionHandle0.getTargeters();
      assertTrue(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fADD0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      boolean boolean0 = instructionHandle0.hasTargeters();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FADD fADD0 = new FADD();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fADD0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle0);
      assertTrue(instructionHandle0.hasTargeters());
      
      iF_ICMPLE0.dispose();
      boolean boolean0 = instructionHandle0.hasTargeters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1819.0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionHandle0.removeTargeter((InstructionTargeter) null);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(dSUB0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      instructionHandle0.removeAllTargeters();
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      instructionHandle0.setInstruction(bASTORE0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) (-837));
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        instructionHandle0.setInstruction((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) bASTORE0);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE(instructionHandle1);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      instructionHandle0.addTargeter(ifInstruction0);
      InstructionHandle instructionHandle2 = instructionHandle1.getNext();
      assertEquals((-1), instructionHandle2.getPosition());
      assertSame(instructionHandle2, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BASTORE bASTORE0 = (BASTORE)InstructionConstants.BASTORE;
      InstructionList instructionList0 = new InstructionList(bASTORE0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bASTORE0);
      String string0 = instructionHandle0.toString();
      assertEquals("  -1: bastore[84](1)", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(mONITORENTER0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instructionHandle0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
