/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:08:09 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Type_ESTest extends Type_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypeSize("[6Q'lxZxFH3kXq2O:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Q'lxZxFH3kXq2O:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("#31k`082~f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #31k`082~f
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("%iJUO)tl*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %iJUO)tl*
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType("[cQ'lxZxFG3kXK2O:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cQ'lxZxFG3kXK2O:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      basicType0.hashCode();
      assertEquals((byte)7, basicType0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Type.size(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Type.size(10);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<ObjectType>[] classArray0 = (Class<ObjectType>[]) Array.newInstance(Class.class, 0);
      Type[] typeArray0 = Type.getTypes(classArray0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      objectType0.setSignature("");
      String string0 = objectType0.getSignature();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.getReturnType("!V\"?Ketdy7");
      assertEquals(0, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      ArrayType arrayType0 = new ArrayType(objectType0, 179);
      arrayType0.equals(arrayType0);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Ljava/lang/Object;", arrayType0.getSignature());
      assertEquals((byte)13, arrayType0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      boolean boolean0 = basicType0.CLASS.equals(basicType0.STRINGBUFFER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = Type.encode(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = Type.encode(104, 104);
      assertEquals(488, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Type.encode(0, (-2449));
      assertEquals((-9796), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = Type.consumed(198);
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = Type.consumed((-13));
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      String string0 = basicType0.UNKNOWN.toString();
      assertEquals("<unknown object>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypes((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypeSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class must not be null
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectType objectType0 = (ObjectType)Type.getType("Ljava/lang/Class;");
      assertEquals("java.lang.Class", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = Type.getType("!V\"?Ketdy7");
      assertEquals((byte)12, type0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      int int0 = uninitializedObjectType0.THROWABLE.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = aALOAD0.getType(constantPoolGen0);
      String string0 = type0.getSignature();
      assertEquals("Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      byte byte0 = basicType0.STRINGBUFFER.getType();
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize("LocalVariableGen(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableGen(
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getTypeSize("[cQ'lxZxFG3kXK2O:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cQ'lxZxFG3kXK2O:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        Type.getTypeSize("*[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = Type.getReturnTypeSize("()Ljava/lang/Object;");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypesSize("e@;P?CB(W+B#6=aU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e@;P?CB(W+B#6=aU
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = Type.getArgumentTypesSize("()I");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<BasicType>[] classArray0 = (Class<BasicType>[]) Array.newInstance(Class.class, 4);
      Class<BasicType> class0 = BasicType.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = class0;
      classArray0[3] = classArray0[0];
      Type[] typeArray0 = Type.getTypes(classArray0);
      assertEquals(4, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      assertEquals((byte)14, type0.getType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<BasicType>[] classArray0 = (Class<BasicType>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        Type.getTypes(classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class must not be null
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = Type.getType(class0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("EiJUO)tl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EiJUO)tl
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Type[] typeArray0 = Type.getArgumentTypes("()Ljava/lang/Object;");
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Type.getType("[>L6E'TmVv&DuJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >L6E'TmVv&DuJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        Type.getMethodSignature(basicType0, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String string0 = Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      assertEquals("()Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String string0 = Type.getMethodSignature(objectType0, (Type[]) null);
      assertEquals("()Ljava/lang/Class;", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = Type.getTypeSize("Invalid signature: ");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = Type.getReturnTypeSize("JsR2($vm_A7F3A=o61}");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      int int0 = basicType0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Type type0 = Type.getReturnType("St3-n=%A-ynOk28;h6");
      Type type1 = type0.normalizeForStackOrLocal();
      assertNotSame(type1, type0);
      assertEquals("S", type0.getSignature());
      assertEquals((byte)10, type1.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BasicType basicType0 = new BasicType((byte)8);
      Type type0 = basicType0.normalizeForStackOrLocal();
      assertEquals((byte)8, type0.getType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BasicType basicType0 = new BasicType((byte)8);
      basicType0.UNKNOWN.toString();
      assertEquals((byte)8, basicType0.getType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = Type.consumed(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Type type0 = Type.getReturnType("()L=W!;");
      assertEquals("L=W!;", type0.getSignature());
      assertEquals((byte)14, type0.getType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = Type.getReturnTypeSize("VhMCMy46B!zN<e");
      assertEquals(0, int0);
  }
}
