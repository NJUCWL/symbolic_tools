/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:04:46 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldGenOrMethodGen_ESTest extends FieldGenOrMethodGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(457, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      String string0 = methodGen0.getSignature();
      assertEquals("()F", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      FieldGen fieldGen0 = new FieldGen(1, basicType0, (String) null, (ConstantPoolGen) null);
      String string0 = fieldGen0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      Type type0 = fCONST0.getType((ConstantPoolGen) null);
      FieldGen fieldGen0 = new FieldGen((-2686), type0, "w?x7Zy#=NOk", (ConstantPoolGen) null);
      String string0 = fieldGen0.getName();
      assertEquals("w?x7Zy#=NOk", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(457, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = methodGen0.getConstantPool();
      assertSame(constantPoolGen1, constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, objectType0, (String) null, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = fieldGen0.getAnnotationEntries();
      assertEquals(1, annotationEntryGenArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(1074, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(457, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      methodGen0.setType(type0);
      assertEquals("", methodGen0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(1074, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      String string0 = methodGen0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, type0, (String) null, constantPoolGen0);
      ConstantValue constantValue0 = new ConstantValue(0, (byte)0, 13, (ConstantPool) null);
      fieldGen0.removeAttribute(constantValue0);
      assertFalse(fieldGen0.isInterface());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1, objectType0, "d", constantPoolGen0);
      Object object0 = fieldGen0.clone();
      assertNotSame(fieldGen0, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      Type type0 = fCMPL0.getType((ConstantPoolGen) null);
      String[] stringArray0 = new String[0];
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      MethodGen methodGen0 = new MethodGen(157, type0, type0.NO_ARGS, stringArray0, "org.apache.bcel.classfile.StackMapType", "org.apache.bcel.classfile.StackMapType", instructionList0, (ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = methodGen0.getConstantPool();
      assertNull(constantPoolGen0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      Type type0 = fCONST0.getType((ConstantPoolGen) null);
      String[] stringArray0 = new String[0];
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      IfInstruction ifInstruction0 = iF_ACMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, stringArray0, "9`", "w?x7Zy#=NOk", instructionList0, (ConstantPoolGen) null);
      Type type1 = methodGen0.getType();
      assertEquals("F", type1.getSignature());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      Type type0 = fCONST0.getType((ConstantPoolGen) null);
      String[] stringArray0 = new String[0];
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      IfInstruction ifInstruction0 = iF_ACMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, stringArray0, "9`", "w?x7Zy#=NOk", instructionList0, (ConstantPoolGen) null);
      Attribute[] attributeArray0 = methodGen0.getAttributes();
      assertEquals(0, attributeArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReferenceType referenceType0 = Type.NULL;
      String[] stringArray0 = new String[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen(0, referenceType0, referenceType0.NO_ARGS, stringArray0, "w/hf(Z^h'1Q1$YD", "", instructionList0, constantPoolGen0);
      LocalVariableTable localVariableTable0 = methodGen0.getLocalVariableTable(constantPoolGen0);
      methodGen0.addAttribute(localVariableTable0);
      assertFalse(methodGen0.isVolatile());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, type0, (String) null, constantPoolGen0);
      fieldGen0.setName("3']'\"MGuk(");
      assertFalse(fieldGen0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, type0, (String) null, constantPoolGen0);
      fieldGen0.setConstantPool(constantPoolGen0);
      assertTrue(fieldGen0.isVolatile());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, type0, (String) null, constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = fieldGen0.getAnnotationEntries();
      assertEquals(0, annotationEntryGenArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(457, type0, type0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      // Undeclared exception!
      try { 
        methodGen0.setType(returnaddressType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, objectType0, (String) null, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      fieldGen0.removeAnnotationEntry(annotationEntryGen0);
      assertFalse(fieldGen0.isEnum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.FLOAT;
      String[] stringArray0 = new String[0];
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      MethodGen methodGen0 = new MethodGen(1074, basicType0, basicType0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      methodGen0.removeAttributes();
      assertFalse(methodGen0.isInterface());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1236, type0, (String) null, constantPoolGen0);
      fieldGen0.removeAnnotationEntries();
      assertEquals("Ljava/lang/Object;", fieldGen0.getSignature());
  }
}
