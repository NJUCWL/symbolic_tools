/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 16:38:45 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSR_W_ESTest extends JSR_W_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2F0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFLE0);
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      jSR_W0.dump(dataOutputStream0);
      assertEquals(5, jSR_W0.getLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        jSR_W0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      // Undeclared exception!
      try { 
        jSR_W0.initFromFile((ByteSequence) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.JSR_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        jSR_W0.initFromFile(byteSequence0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Byte byte0 = new Byte((byte)0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) ifInstruction0, (CompoundInstruction) pUSH0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        jSR_W0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr_w[201](5):-1:  -1: iconst_0[3](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList(d2F0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2F0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      IfInstruction ifInstruction0 = iFGT0.negate();
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      // Undeclared exception!
      try { 
        jSR_W0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.JSR_W", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        jSR_W0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) d2F0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFLE0);
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      jSR_W0.initFromFile(byteSequence0, true);
      assertEquals(5, jSR_W0.getLength());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        jSR_W0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
}
