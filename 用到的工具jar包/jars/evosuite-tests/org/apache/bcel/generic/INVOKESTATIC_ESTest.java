/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 14:56:01 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class INVOKESTATIC_ESTest extends INVOKESTATIC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      // Undeclared exception!
      try { 
        iNVOKESTATIC0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.INVOKESTATIC", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        iNVOKESTATIC0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      executionVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        iNVOKESTATIC0.accept(executionVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodHandle cannot be cast to org.apache.bcel.classfile.ConstantCP
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3;?uJ{/O");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iNVOKESTATIC0.dump(dataOutputStream0);
      assertEquals(0, iNVOKESTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        iNVOKESTATIC0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(33);
      Class<?>[] classArray0 = iNVOKESTATIC0.getExceptions();
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = null;
      try {
        iNVOKESTATIC0 = new INVOKESTATIC((-2176));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -2176
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
}
