/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:04:06 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LineNumberGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineNumberGen_ESTest extends LineNumberGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      // Undeclared exception!
      try { 
        lineNumberGen0.updateTarget((InstructionHandle) null, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting null, but   -1: impdep1[254](1)}
         //
         verifyException("org.apache.bcel.generic.LineNumberGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionList instructionList0 = new InstructionList(f2D0);
      Boolean boolean0 = Boolean.valueOf("org.apache.bcel.generic.LineNumberGen");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, (-1084));
      lineNumberGen0.setSourceLine(0);
      int int0 = lineNumberGen0.getSourceLine();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionList instructionList0 = new InstructionList(f2D0);
      Boolean boolean0 = Boolean.valueOf("org.apache.bcel.generic.LineNumberGen");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, (-1084));
      int int0 = lineNumberGen0.getSourceLine();
      assertEquals((-1084), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      LineNumber lineNumber0 = lineNumberGen0.getLineNumber();
      assertEquals(1, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      GOTO_W gOTO_W0 = new GOTO_W();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) gOTO_W0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 0);
      LineNumber lineNumber0 = lineNumberGen0.getLineNumber();
      assertEquals(0, lineNumber0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1087);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      GOTO_W gOTO_W0 = new GOTO_W();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) gOTO_W0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 1087);
      branchHandle0.removeAllTargeters();
      lineNumberGen0.getInstruction();
      assertEquals(1087, lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "The operand sizes on the stack do not match any of the four forms of usage of this instruction.");
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 0);
      instructionList0.setPositions();
      lineNumberGen0.getInstruction();
      assertEquals(0, lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionList instructionList0 = new InstructionList(f2D0);
      Boolean boolean0 = Boolean.valueOf("org.apache.bcel.generic.LineNumberGen");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, (-1084));
      lineNumberGen0.getInstruction();
      assertEquals((-1084), lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      instructionList0.delete(instructionHandle1);
      // Undeclared exception!
      try { 
        lineNumberGen0.updateTarget(instructionHandle1, instructionHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      iMPDEP1_0.setOpcode((short)496);
      // Undeclared exception!
      try { 
        lineNumberGen0.updateTarget(instructionHandle1, instructionHandle1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 496
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineNumberGen lineNumberGen0 = null;
      try {
        lineNumberGen0 = new LineNumberGen((InstructionHandle) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InstructionHandle may not be null
         //
         verifyException("org.apache.bcel.generic.LineNumberGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      // Undeclared exception!
      try { 
        lineNumberGen0.setInstruction((InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InstructionHandle may not be null
         //
         verifyException("org.apache.bcel.generic.LineNumberGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      F2D f2D0 = (F2D)InstructionConstants.F2D;
      InstructionList instructionList0 = new InstructionList(f2D0);
      Boolean boolean0 = Boolean.valueOf("org.apache.bcel.generic.LineNumberGen");
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, boolean0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, (-1084));
      lineNumberGen0.setInstruction(instructionHandle0);
      assertEquals((-1084), lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "A|FJ$R5/6%xE`7j)J");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 2908);
      // Undeclared exception!
      try { 
        lineNumberGen0.updateTarget(branchHandle0, (InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // InstructionHandle may not be null
         //
         verifyException("org.apache.bcel.generic.LineNumberGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "A|FJ$R5/6%xE`7j)");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 2908);
      lineNumberGen0.updateTarget(branchHandle0, branchHandle0);
      assertEquals(2908, lineNumberGen0.getSourceLine());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "A|FJ$R5/6%xE`7j)");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 2908);
      boolean boolean0 = lineNumberGen0.containsTarget(branchHandle0);
      assertEquals(2908, lineNumberGen0.getSourceLine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP1_0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(instructionHandle0, 1);
      boolean boolean0 = lineNumberGen0.containsTarget(instructionHandle1);
      assertEquals(1, lineNumberGen0.getSourceLine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "A|FJ$R5/6%xE`7j)");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 2908);
      int int0 = lineNumberGen0.getSourceLine();
      assertEquals(2908, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "A|FJ$R5/6%xE`7j)");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      LineNumberGen lineNumberGen0 = new LineNumberGen(branchHandle0, 2908);
      LineNumberGen lineNumberGen1 = (LineNumberGen)lineNumberGen0.clone();
      assertEquals(2908, lineNumberGen1.getSourceLine());
  }
}
