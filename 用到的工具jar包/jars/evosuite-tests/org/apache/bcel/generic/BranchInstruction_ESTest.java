/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 17:02:48 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BranchInstruction_ESTest extends BranchInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ARRAYLENGTH aRRAYLENGTH0 = (ARRAYLENGTH)InstructionConstants.ARRAYLENGTH;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aRRAYLENGTH0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        iF_ICMPLT0.updateTarget(instructionHandle0, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: arraylength[190](1), but null
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(branchHandle0);
      iF_ICMPGE0.updateTarget(branchHandle0, instructionHandle0);
      assertTrue(instructionHandle0.hasTargeters());
      assertFalse(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      String string0 = instructionList0.toString(false);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("  -1: ifne -> -1\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      iFGT0.setPosition(3430);
      int int0 = iFGT0.updatePosition(3430, 3430);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      int[] intArray0 = new int[7];
      intArray0[3] = 2113;
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[7];
      instructionHandleArray0[5] = (InstructionHandle) branchHandle0;
      instructionHandleArray0[6] = instructionHandle0;
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandleArray0[5]);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionList1.getInstructions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for lookupswitch[171](68):-1:  -1: freturn[174](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      iFEQ0.dump(dataOutputStream0);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(1, iFEQ0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      instructionHandle0.swapInstruction(iFEQ0);
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifeq[153](3) -> <points to itself> to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      int int0 = lOOKUPSWITCH0.updatePosition((byte)0, (short)226);
      assertEquals(3, lOOKUPSWITCH0.getLength());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      int int0 = iFEQ0.getTargetOffset(instructionHandle0);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      iF_ACMPNE0.setPosition(49);
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      int int0 = iF_ACMPNE0.getTargetOffset(instructionHandle0);
      assertEquals((-49), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FNEG fNEG0 = (FNEG)InstructionConstants.FNEG;
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fNEG0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR_W0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) jSR_W0);
      IFNULL iFNULL0 = new IFNULL(branchHandle0);
      int int0 = iFNULL0.getTargetOffset();
      assertTrue(branchHandle0.hasTargeters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      instructionHandle0.dispose();
      InstructionHandle instructionHandle1 = iFEQ0.getTarget();
      assertEquals((-1), instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte)0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      iF_ACMPEQ0.getTarget();
      assertTrue(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 2872.0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      int int0 = gOTO_W0.getPosition();
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      int int0 = jSR_W0.updatePosition(2113, 1);
      assertEquals(0, int0);
      
      int int1 = jSR_W0.getPosition();
      assertEquals(2113, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      iFGT0.setPosition((-817));
      int int0 = iFGT0.getPosition();
      assertEquals((-817), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      IFLE iFLE0 = (IFLE)iFGT0.negate();
      iFLE0.setIndex(1660);
      int int0 = iFLE0.getIndex();
      assertEquals(1660, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte)0);
      IFGT iFGT0 = new IFGT(instructionHandle0);
      iFGT0.dispose();
      int int0 = iFGT0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      // Undeclared exception!
      try { 
        lOOKUPSWITCH0.updateTarget(branchHandle0, (InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "AJJ-]&QuC:Lj");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      instructionHandle0.swapInstruction(iFNE0);
      // Undeclared exception!
      try { 
        iFNE0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(15, 2113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for goto[167](3):-1:  -1: iconst_1[4](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IFEQ iFEQ0 = new IFEQ();
      // Undeclared exception!
      try { 
        iFEQ0.toString(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      // Undeclared exception!
      try { 
        iF_ICMPNE0.initFromFile((ByteSequence) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        iFLT0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      // Undeclared exception!
      try { 
        jSR_W0.getTargetOffset((InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of jsr_w[201](5) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IFLE iFLE0 = new IFLE();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, true);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        iFLE0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      IF_ICMPGE iF_ICMPGE0 = (IF_ICMPGE)iF_ICMPLT0.negate();
      // Undeclared exception!
      try { 
        iF_ICMPGE0.getTargetOffset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmpge[162](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      // Undeclared exception!
      try { 
        iFNONNULL0.getTargetOffset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPLE0.negate();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(96);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        ifInstruction0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of if_icmpgt[163](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      // Undeclared exception!
      try { 
        iF_ACMPNE0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        iF_ICMPGT0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" T0EVa<7&<Xdm.x4+Ek", true);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        iFGT0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(branchHandle0);
      String string0 = iF_ICMPGE0.toString(true);
      assertTrue(branchHandle0.hasTargeters());
      assertEquals("if_icmpge[162](3) -> 0", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      IfInstruction ifInstruction0 = iFGT0.negate();
      int int0 = ifInstruction0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      InstructionHandle instructionHandle0 = iFGT0.getTarget();
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      iFNE0.setTarget((InstructionHandle) null);
      assertEquals(0, iFNE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      boolean boolean0 = iF_ACMPEQ0.containsTarget((InstructionHandle) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      boolean boolean0 = iF_ICMPNE0.containsTarget(instructionHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fRETURN0);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNE0);
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFNE0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(branchHandle0);
      BranchInstruction.notifyTarget(branchHandle0, branchHandle0, iF_ICMPGE0);
      assertTrue(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      String string0 = iF_ICMPLE0.toString(false);
      assertEquals("if_icmple -> null", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifeq[153](3) -> <null instruction!!!?> to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      String string0 = iFNE0.toString(true);
      assertEquals("ifne[154](3) -> null", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      String string0 = iFEQ0.toString(false);
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifeq -> 0", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        iFEQ0.getTargetOffset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iFNE0.initFromFile(byteSequence0, true);
      assertEquals(3, iFNE0.getLength());
  }
}
