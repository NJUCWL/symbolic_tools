/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:06:22 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariableInstruction_ESTest extends LocalVariableInstruction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FSTORE fSTORE0 = new FSTORE(65535);
      assertEquals((short)56, fSTORE0.getOpcode());
      assertEquals(65535, fSTORE0.getIndex());
      assertEquals(4, fSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DSTORE dSTORE0 = (DSTORE)Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(3572);
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iSTORE0.initFromFile(byteSequence0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction instruction0 = Instruction.readInstruction(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, instruction0.getLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(0);
      String string0 = iSTORE0.toString(true);
      assertEquals(0, iSTORE0.getIndex());
      assertEquals("istore_0[59](1)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      String string0 = iLOAD0.toString(false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      //  // Unstable assertion: assertEquals(1333, aLOAD0.getIndex());
      
      aLOAD0.setIndex(255);
      //  // Unstable assertion: assertEquals(2, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(0);
      lSTORE0.setIndexOnly(0);
      assertEquals(1, lSTORE0.getLength());
      assertEquals(0, lSTORE0.getIndex());
      assertEquals((short)63, lSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISTORE iSTORE0 = (ISTORE)InstructionConstants.ISTORE_1;
      int int0 = iSTORE0.getIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE();
      int int0 = lSTORE0.getIndex();
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IINC iINC0 = new IINC(45, 45);
      short short0 = iINC0.getCanonicalTag();
      assertEquals((short) (-1), short0);
      assertEquals(45, iINC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FLOAD fLOAD0 = new FLOAD(1500);
      // Undeclared exception!
      try { 
        fLOAD0.initFromFile((ByteSequence) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_0;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        iLOAD0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        aLOAD0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_2;
      //  // Unstable assertion: assertEquals(1, aLOAD0.getLength());
      
      aLOAD0.setIndex(1333);
      //  // Unstable assertion: assertEquals(1333, aLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      aLOAD0.setIndex(0);
      assertEquals((short)42, aLOAD0.getOpcode());
      assertEquals(0, aLOAD0.getIndex());
      assertEquals(1, aLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FLOAD fLOAD0 = new FLOAD();
      // Undeclared exception!
      try { 
        fLOAD0.setIndex((-2464));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -2464
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DLOAD dLOAD0 = new DLOAD(0);
      String string0 = dLOAD0.toString(true);
      assertEquals("dload_0[38](1)", string0);
      assertEquals((short)38, dLOAD0.getOpcode());
      assertEquals(0, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FLOAD fLOAD0 = new FLOAD();
      // Undeclared exception!
      try { 
        fLOAD0.toString(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(0);
      lSTORE0.setIndex(68);
      lSTORE0.toString(true);
      assertEquals(68, lSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      String string0 = aLOAD0.toString(true);
      assertEquals("aload_1[43](1)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(0);
      int int0 = lSTORE0.getIndex();
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)63, lSTORE0.getOpcode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DSTORE dSTORE0 = new DSTORE(4540);
      dSTORE0.getType(constantPoolGen0);
      assertEquals(4540, dSTORE0.getIndex());
      assertEquals(4, dSTORE0.getLength());
      assertEquals((short)57, dSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FSTORE fSTORE0 = new FSTORE();
      Type type0 = fSTORE0.getType((ConstantPoolGen) null);
      assertEquals((-1), fSTORE0.getIndex());
      assertEquals((byte)6, type0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(0);
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      iSTORE0.getType(constantPoolGen0);
      assertEquals(1, iSTORE0.getLength());
      assertEquals((short)59, iSTORE0.getOpcode());
      assertEquals(0, iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      assertEquals("Ljava/lang/Object;", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DLOAD dLOAD0 = new DLOAD(45);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      dLOAD0.getType(constantPoolGen0);
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals(2, dLOAD0.getLength());
      assertEquals(45, dLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FLOAD fLOAD0 = new FLOAD();
      Type type0 = fLOAD0.getType(constantPoolGen0);
      assertEquals((-1), fLOAD0.getIndex());
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      lLOAD0.getType((ConstantPoolGen) null);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LSTORE lSTORE0 = new LSTORE(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lSTORE0.getType(constantPoolGen0);
      assertEquals(0, lSTORE0.getIndex());
      assertEquals(1, lSTORE0.getLength());
      assertEquals((short)63, lSTORE0.getOpcode());
      assertEquals("J", type0.getSignature());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = iLOAD0.getType(constantPoolGen0);
      assertEquals((byte)10, type0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ILOAD iLOAD0 = null;
      try {
        iLOAD0 = new ILOAD(65561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: 65561
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(78);
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iLOAD0.initFromFile(byteSequence0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE();
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iSTORE0.initFromFile(byteSequence0, false);
      assertEquals((-3), iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD();
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iLOAD0.initFromFile(byteSequence0, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(4, iLOAD0.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(3572);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iSTORE0.dump(dataOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(4, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(57);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(57);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iSTORE0.dump(dataOutputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals(2, iSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iLOAD0.dump(dataOutputStream0);
      assertEquals((-1), iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE(3572);
      short short0 = iSTORE0.getCanonicalTag();
      assertEquals((short)54, short0);
      assertEquals(4, iSTORE0.getLength());
      assertEquals(3572, iSTORE0.getIndex());
      assertEquals((short)54, iSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ASTORE aSTORE0 = new ASTORE(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.getType(constantPoolGen0);
      assertEquals((short)75, aSTORE0.getOpcode());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(1, aSTORE0.getLength());
      assertEquals(0, aSTORE0.getIndex());
  }
}
