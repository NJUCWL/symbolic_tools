/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 18:10:41 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.SWITCH;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionList_ESTest extends InstructionList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(9, instructionList0.size());
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertNotNull(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aCONST_NULL0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.getLength());
      assertEquals(10, instructionList0.size());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) aCONST_NULL0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(11, instructionList0.size());
      assertEquals(11, instructionList0.getLength());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle1, instructionHandle0, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid range: From   -1: aconst_null[1](1) to   -1: aconst_null[1](1) contains target   -1: aconst_null[1](1)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = new ObjectType("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals(0, constantArray0.length);
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertEquals(0, constantArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) null, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[5] = (byte) (-58);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-58), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(6, instructionList0.size());
      assertEquals(6, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      String string0 = instructionList0.toString(false);
      assertNotNull(string0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      String string0 = instructionList0.toString();
      assertNotNull(string0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("  -1: bipush[16](2) 110\n", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList0);
      assertNotNull(instructionHandle1);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) null, instructionList0);
      assertNull(instructionHandle0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, iFLT0.getIndex());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertNotNull(instructionHandle1);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      assertNotNull(lLOAD0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lLOAD0);
      assertNotNull(instructionHandle0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertNotNull(iFEQ0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      assertEquals(0, iFEQ0.getIndex());
      
      IFNE iFNE0 = (IFNE)iFEQ0.negate();
      assertNotNull(iFNE0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      
      iFNE0.setPosition(182);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFNE0);
      assertNotNull(branchHandle0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(3, iFEQ0.getLength());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(182, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = (ACONST_NULL)InstructionConstants.ACONST_NULL;
      assertNotNull(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      assertNotNull(instructionList0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      
      int int0 = iFGE0.updatePosition((-173), (-173));
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertEquals(0, int0);
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFGE0);
      assertNotNull(branchHandle0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-173), branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      GOTO gOTO0 = new GOTO();
      assertNotNull(gOTO0);
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) gOTO0);
      assertNotNull(branchHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) gOTO0, instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(1, gOTO0.getLength());
      assertEquals(0, gOTO0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertSame(instructionHandle0, branchHandle0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[6];
      D2F d2F0 = new D2F();
      assertNotNull(d2F0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      
      InstructionList instructionList0 = new InstructionList(d2F0);
      assertNotNull(instructionList0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) d2F0, (Instruction) d2F0);
      assertNotNull(instructionHandle0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      int[] intArray0 = new int[5];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, 3244);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, instructionHandleArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(sWITCH0);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) sWITCH0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, instructionHandleArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(instructionHandle1);
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals(3, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(0, instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      
      iFNULL0.dispose();
      assertEquals((-1), iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNULL0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      assertEquals((-1), branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      assertNotNull(instructionList0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(0, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      assertNotNull(character0);
      assertEquals('`', (char)character0);
      
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, character0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      int int0 = instructionList0.getLength();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      Instruction[] instructionArray0 = instructionList0.getInstructions();
      assertEquals(0, instructionArray0.length);
      assertNotNull(instructionArray0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, true);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertNull(intArray0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W();
      assertNotNull(gOTO_W0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(1, gOTO_W0.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      assertNotNull(instructionList0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertNotNull(instructionHandle0);
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      assertNotNull(dSUB0);
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals("dsub", dSUB0.getName());
      assertEquals(1, dSUB0.getLength());
      
      InstructionList instructionList0 = new InstructionList(dSUB0);
      assertNotNull(instructionList0);
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals("dsub", dSUB0.getName());
      assertEquals(1, dSUB0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertNotNull(instructionHandle0);
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals("dsub", dSUB0.getName());
      assertEquals(1, dSUB0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      assertEquals(9, instructionList0.getLength());
      
      RET rET0 = new RET();
      assertNotNull(rET0);
      assertEquals((short) (-1), rET0.getOpcode());
      assertEquals(1, rET0.getLength());
      assertEquals(0, rET0.getIndex());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) rET0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertEquals((short) (-1), rET0.getOpcode());
      assertEquals(1, rET0.getLength());
      assertEquals(0, rET0.getIndex());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.findHandle(0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      assertNotNull(instructionHandle1);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle1.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.append((InstructionHandle) null, instructionList0);
      assertNull(instructionHandle0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList0);
      assertNotNull(instructionHandle1);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      assertNotNull(lSHL0);
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals(1, lSHL0.getLength());
      
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(lSHL0);
      assertNotNull(instructionHandle0);
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals(1, lSHL0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      assertNotNull(iF_ICMPGE0);
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPGE0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      
      int int0 = iF_ICMPGE0.updatePosition(22, 181);
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertEquals(0, int0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle1);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals(1, lSHL0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(22, instructionHandle1.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.insert(instructionHandle1, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionHandle2);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals(1, lSHL0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(1, iF_ICMPGE0.getLength());
      assertEquals((short) (-1), iF_ICMPGE0.getOpcode());
      assertEquals(0, iF_ICMPGE0.getIndex());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals(22, instructionHandle1.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals(22, instructionHandle2.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle1, instructionHandle2);
      assertSame(instructionHandle2, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      
      int int0 = iFLT0.updatePosition(2, 321);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertEquals(0, int0);
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(2, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(3, iFLT0.getLength());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)155, iFLT0.getOpcode());
      
      iFLT0.dispose();
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals((-1), iFLT0.getIndex());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      assertNotNull(branchHandle0);
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals(1, bREAKPOINT0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals("iflt", iFLT0.getName());
      assertEquals((-1), iFLT0.getIndex());
      assertEquals(3, iFLT0.getLength());
      assertEquals((short)155, iFLT0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      
      IfInstruction ifInstruction0 = iFNULL0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals("ifnonnull", ifInstruction0.getName());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals("ifnonnull", ifInstruction0.getName());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) ifInstruction0, instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals("ifnonnull", ifInstruction0.getName());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      INEG iNEG0 = (INEG)InstructionConstants.INEG;
      assertNotNull(iNEG0);
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(iNEG0);
      assertNotNull(instructionList0);
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iNEG0, instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals(1, iNEG0.getLength());
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      assertNotNull(dSUB0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      
      InstructionList instructionList0 = new InstructionList(dSUB0);
      assertNotNull(instructionList0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "org.apache.bcel.generic.InstructionList$1");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dSUB0, (CompoundInstruction) pUSH0);
      assertNotNull(instructionHandle0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPNE0);
      assertNotNull(branchHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ACMPNE0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      IfInstruction ifInstruction0 = iF_ICMPNE0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)159, ifInstruction0.getOpcode());
      assertEquals("if_icmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      assertNotNull(fCMPG0);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      
      InstructionList instructionList0 = new InstructionList(fCMPG0);
      assertNotNull(instructionList0);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) fCMPG0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionHandle0);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.setPositions(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-2103L));
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      INEG iNEG0 = (INEG)InstructionConstants.INEG;
      assertNotNull(iNEG0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      
      InstructionList instructionList0 = new InstructionList(iNEG0);
      assertNotNull(instructionList0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (Instruction) iNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPEQ0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iF_ACMPEQ0);
      assertNotNull(branchHandle0);
      assertEquals(0, iF_ACMPEQ0.getIndex());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) branchHandle0, (Instruction) iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (-607));
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      JSR_W jSR_W0 = new JSR_W();
      assertNotNull(jSR_W0);
      assertEquals(1, jSR_W0.getLength());
      assertEquals((short) (-1), jSR_W0.getOpcode());
      assertEquals(0, jSR_W0.getIndex());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((InstructionHandle) null, (BranchInstruction) jSR_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      GOTO gOTO0 = new GOTO();
      assertNotNull(gOTO0);
      assertEquals((short) (-1), gOTO0.getOpcode());
      assertEquals(0, gOTO0.getIndex());
      assertEquals(1, gOTO0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) gOTO0, instructionList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) null, (Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      D2L d2L0 = (D2L)InstructionConstants.D2L;
      assertNotNull(d2L0);
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(d2L0);
      assertNotNull(instructionList0);
      assertEquals(1, d2L0.getLength());
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(0, iFNONNULL0.getIndex());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) d2L0, (Instruction) iFNONNULL0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      assertNotNull(iF_ACMPNE0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ACMPNE0.getLength());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals((short) (-1), iF_ACMPNE0.getOpcode());
      assertEquals((short)165, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("if_acmpeq", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      INEG iNEG0 = (INEG)InstructionConstants.INEG;
      assertNotNull(iNEG0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1209.85257889999));
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iNEG0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ineg[116](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(9, instructionList0.size());
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertNotNull(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) aCONST_NULL0, (CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSR_W jSR_W0 = new JSR_W();
      assertNotNull(jSR_W0);
      assertEquals((short) (-1), jSR_W0.getOpcode());
      assertEquals(0, jSR_W0.getIndex());
      assertEquals(1, jSR_W0.getLength());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1018.222F);
      assertNotNull(pUSH0);
      assertEquals(2, constantPoolGen0.getSize());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) jSR_W0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      assertNotNull(iF_ICMPNE0);
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPNE0);
      assertNotNull(instructionList0);
      assertEquals("if_icmpne", iF_ICMPNE0.getName());
      assertEquals(3, iF_ICMPNE0.getLength());
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short)160, iF_ICMPNE0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction if_icmpne[160](3) -> null to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      assertNotNull(lOOKUPSWITCH0);
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) lOOKUPSWITCH0);
      assertNotNull(instructionList0);
      assertEquals(1, lOOKUPSWITCH0.getLength());
      assertEquals(0, lOOKUPSWITCH0.getIndex());
      assertEquals((short) (-1), lOOKUPSWITCH0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) lOOKUPSWITCH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(5, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.insert((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      assertNotNull(iF_ICMPEQ0);
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      assertNotNull(instructionList0);
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CASTORE cASTORE0 = new CASTORE();
      assertNotNull(cASTORE0);
      assertEquals((short)85, cASTORE0.getOpcode());
      assertEquals("castore", cASTORE0.getName());
      assertEquals(1, cASTORE0.getLength());
      
      InstructionList instructionList0 = new InstructionList(cASTORE0);
      assertNotNull(instructionList0);
      assertEquals((short)85, cASTORE0.getOpcode());
      assertEquals("castore", cASTORE0.getName());
      assertEquals(1, cASTORE0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(cASTORE0);
      assertNotNull(instructionHandle0);
      assertEquals((short)85, cASTORE0.getOpcode());
      assertEquals("castore", cASTORE0.getName());
      assertEquals(1, cASTORE0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (Instruction) cASTORE0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals((short)85, cASTORE0.getOpcode());
      assertEquals("castore", cASTORE0.getName());
      assertEquals(1, cASTORE0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      // Undeclared exception!
      try { 
        instructionList0.getInstructionHandles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      
      IfInstruction ifInstruction0 = iFNULL0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals("ifnonnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals(0, iFNULL0.getIndex());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(1, iFNULL0.getLength());
      assertEquals((short)199, ifInstruction0.getOpcode());
      assertEquals("ifnonnull", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Target of ifnonnull[199](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionList.findHandle((InstructionHandle[]) null, (int[]) null, 244, 244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, intArray0, 2203, 5284);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1101
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.getLength());
      assertEquals(5, instructionList0.size());
      
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      assertNotNull(iMPDEP2_0);
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals("impdep2", iMPDEP2_0.getName());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iMPDEP2_0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(6, instructionList0.getLength());
      assertEquals(6, instructionList0.size());
      assertEquals((short)255, iMPDEP2_0.getOpcode());
      assertEquals(1, iMPDEP2_0.getLength());
      assertEquals("impdep2", iMPDEP2_0.getName());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.findHandle((-35));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      assertNotNull(iF_ICMPEQ0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      assertNotNull(ifInstruction0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)160, ifInstruction0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      assertNotNull(instructionList0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      assertNotNull(branchHandle0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle0.equals((Object)branchHandle0));
      assertNotNull(instructionHandle0);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, instructionList0.getLength());
      assertEquals(3, instructionList0.size());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(branchHandle0, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle0, branchHandle0);
      
      instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short) (-1), iF_ICMPEQ0.getOpcode());
      assertEquals(1, iF_ICMPEQ0.getLength());
      assertEquals("if_icmpne", ifInstruction0.getName());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals((-1), ifInstruction0.getIndex());
      assertEquals((short)160, ifInstruction0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertNotSame(instructionList0, instructionList1);
      
      // Undeclared exception!
      try { 
        instructionList1.delete((InstructionHandle) branchHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      assertNotNull(lLOAD0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-1), lLOAD0.getIndex());
      
      InstructionList instructionList0 = new InstructionList(lLOAD0);
      assertNotNull(instructionList0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lLOAD0);
      assertNotNull(instructionHandle0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertNotNull(iFEQ0);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(3, iFEQ0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.delete(instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      F2D f2D0 = new F2D();
      assertNotNull(f2D0);
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals("f2d", f2D0.getName());
      assertEquals(1, f2D0.getLength());
      
      InstructionList instructionList0 = new InstructionList(f2D0);
      assertNotNull(instructionList0);
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals("f2d", f2D0.getName());
      assertEquals(1, f2D0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) null, (Instruction) f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      assertNotNull(iFNE0);
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      
      IfInstruction ifInstruction0 = iFNE0.negate();
      assertNotNull(ifInstruction0);
      assertEquals("ifne", iFNE0.getName());
      assertEquals(3, iFNE0.getLength());
      assertEquals(0, iFNE0.getIndex());
      assertEquals((short)154, iFNE0.getOpcode());
      assertEquals((short)153, ifInstruction0.getOpcode());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals(3, ifInstruction0.getLength());
      assertEquals("ifeq", ifInstruction0.getName());
      
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) ifInstruction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ifeq[153](3) -> null is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionHandle0.dispose();
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IFLT iFLT0 = new IFLT();
      assertNotNull(iFLT0);
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLT0);
      assertNotNull(instructionList0);
      assertEquals(1, iFLT0.getLength());
      assertEquals((short) (-1), iFLT0.getOpcode());
      assertEquals(0, iFLT0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      assertNotNull(lLOAD0);
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lLOAD0);
      assertNotNull(instructionHandle0);
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      assertNotNull(iFEQ0);
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(0, iFEQ0.getIndex());
      
      IfInstruction ifInstruction0 = iFEQ0.negate();
      assertNotNull(ifInstruction0);
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("ifne", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)154, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) ifInstruction0);
      assertNotNull(branchHandle0);
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((-1), lLOAD0.getIndex());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((short)153, iFEQ0.getOpcode());
      assertEquals(3, iFEQ0.getLength());
      assertEquals("ifeq", iFEQ0.getName());
      assertEquals(0, iFEQ0.getIndex());
      assertEquals("ifne", ifInstruction0.getName());
      assertEquals(0, ifInstruction0.getIndex());
      assertEquals((short)154, ifInstruction0.getOpcode());
      assertEquals(3, ifInstruction0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) branchHandle0, (Instruction) iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifeq[153](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      IALOAD iALOAD0 = (IALOAD)InstructionConstants.IALOAD;
      assertNotNull(iALOAD0);
      assertEquals(1, iALOAD0.getLength());
      assertEquals((short)46, iALOAD0.getOpcode());
      assertEquals("iaload", iALOAD0.getName());
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (Instruction) iALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      assertNotNull(iF_ICMPLT0);
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short) (-1), iF_ICMPLT0.getOpcode());
      assertEquals(1, iF_ICMPLT0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) branchHandle0, (Instruction) iF_ICMPLT0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
      assertEquals(7, instructionList0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = Character.valueOf('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (CompoundInstruction) pUSH0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PUTFIELD pUTFIELD0 = new PUTFIELD(82);
      assertNotNull(pUTFIELD0);
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(82, pUTFIELD0.getIndex());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals("putfield", pUTFIELD0.getName());
      
      InstructionList instructionList0 = new InstructionList(pUTFIELD0);
      assertNotNull(instructionList0);
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(82, pUTFIELD0.getIndex());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals("putfield", pUTFIELD0.getName());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(l2I0);
      assertNotNull(instructionHandle0);
      assertEquals(1, l2I0.getLength());
      assertEquals("l2i", l2I0.getName());
      assertEquals((short)136, l2I0.getOpcode());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandle0, (BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CALOAD cALOAD0 = (CALOAD)InstructionConstants.CALOAD;
      assertNotNull(cALOAD0);
      assertEquals((short)52, cALOAD0.getOpcode());
      assertEquals("caload", cALOAD0.getName());
      assertEquals(1, cALOAD0.getLength());
      
      InstructionList instructionList0 = new InstructionList(cALOAD0);
      assertNotNull(instructionList0);
      assertEquals((short)52, cALOAD0.getOpcode());
      assertEquals("caload", cALOAD0.getName());
      assertEquals(1, cALOAD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      assertNotNull(iF_ACMPEQ0);
      assertEquals((short) (-1), iF_ACMPEQ0.getOpcode());
      assertEquals(1, iF_ACMPEQ0.getLength());
      assertEquals(0, iF_ACMPEQ0.getIndex());
      
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionHandle) null, (BranchInstruction) iF_ACMPEQ0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      assertNotNull(iFGE0);
      assertEquals(1, iFGE0.getLength());
      assertEquals((short) (-1), iFGE0.getOpcode());
      assertEquals(0, iFGE0.getIndex());
      
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(5, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(5, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFGE0, instructionList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      IMUL iMUL0 = (IMUL)InstructionConstants.IMUL;
      assertNotNull(iMUL0);
      assertEquals(1, iMUL0.getLength());
      assertEquals((short)104, iMUL0.getOpcode());
      assertEquals("imul", iMUL0.getName());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iMUL0, (Instruction) iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction imul[104](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      FADD fADD0 = new FADD();
      assertNotNull(fADD0);
      assertEquals(1, fADD0.getLength());
      assertEquals("fadd", fADD0.getName());
      assertEquals((short)98, fADD0.getOpcode());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) fADD0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction fadd[98](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      
      ISHL iSHL0 = new ISHL();
      assertNotNull(iSHL0);
      assertEquals((short)120, iSHL0.getOpcode());
      assertEquals(1, iSHL0.getLength());
      assertEquals("ishl", iSHL0.getName());
      
      iSHL0.setOpcode((short) (-953));
      assertEquals((short) (-953), iSHL0.getOpcode());
      assertEquals(1, iSHL0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iSHL0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FMUL fMUL0 = (FMUL)InstructionConstants.FMUL;
      assertNotNull(fMUL0);
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      
      InstructionHandle instructionHandle0 = new InstructionHandle(fMUL0);
      assertNotNull(instructionHandle0);
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFGT iFGT0 = new IFGT(instructionHandle0);
      assertNotNull(iFGT0);
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals("ifgt", iFGT0.getName());
      assertEquals((short)157, iFGT0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGT0);
      assertNotNull(instructionList0);
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iFGT0.getLength());
      assertEquals(0, iFGT0.getIndex());
      assertEquals("ifgt", iFGT0.getName());
      assertEquals((short)157, iFGT0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction ifgt[157](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      assertNotNull(instructionList0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFNONNULL0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LUSHR lUSHR0 = (LUSHR)InstructionConstants.LUSHR;
      assertNotNull(lUSHR0);
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      
      InstructionList instructionList0 = new InstructionList(lUSHR0);
      assertNotNull(instructionList0);
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      // Undeclared exception!
      try { 
        instructionList0.append((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 0.0);
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.append((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      assertNotNull(iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
      assertEquals((short) (-1), iF_ICMPNE0.getOpcode());
      assertEquals(1, iF_ICMPNE0.getLength());
      
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) iF_ICMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((BranchInstruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ACONST_NULL aCONST_NULL0 = (ACONST_NULL)InstructionConstants.ACONST_NULL;
      assertNotNull(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      assertNotNull(instructionList0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      byte[] byteArray0 = instructionList0.getByteCode();
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      instructionList0.setPositions(false);
      assertEquals(1, constantPoolGen0.getSize());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      assertNotNull(instructionList0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      boolean boolean0 = instructionList0.contains((Instruction) iFNONNULL0);
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      assertEquals(0, constantArray0.length);
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(0, constantArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(0, constantArray0.length);
      assertNotNull(instructionHandle1);
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle1, instructionHandle0);
      
      instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle1);
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertEquals(0, constantArray0.length);
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) bREAKPOINT0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList1.size());
      assertEquals(2, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle2 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle2);
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
      
      instructionList1.move(instructionHandle2, instructionHandle0, instructionHandle1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle2));
      assertFalse(instructionHandle1.equals((Object)instructionHandle2));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertFalse(instructionHandle2.equals((Object)instructionHandle0));
      assertEquals(4, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(4, instructionList0.getLength());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertFalse(instructionHandle2.hasTargeters());
      assertEquals((-1), instructionHandle2.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle2);
      assertNotSame(instructionHandle1, instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle2, instructionHandle1);
      assertNotSame(instructionHandle2, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      IFNULL iFNULL0 = new IFNULL();
      assertNotNull(iFNULL0);
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, iFNULL0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNULL0);
      assertNotNull(branchHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals((short) (-1), iFNULL0.getOpcode());
      assertEquals(0, iFNULL0.getIndex());
      assertEquals(1, iFNULL0.getLength());
      assertEquals(0, branchHandle0.getPosition());
      assertFalse(branchHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FREM fREM0 = (FREM)InstructionConstants.FREM;
      assertNotNull(fREM0);
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      
      InstructionList instructionList0 = new InstructionList(fREM0);
      assertNotNull(instructionList0);
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) fREM0, (Instruction) fREM0);
      assertNotNull(instructionHandle0);
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertEquals((short)114, fREM0.getOpcode());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, 125);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = new InstructionList(pUSH0);
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      FREM fREM0 = new FREM();
      assertNotNull(fREM0);
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) fREM0, instructionList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction frem[114](1) is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle1.equals((Object)instructionHandle0));
      assertNotNull(instructionHandle1);
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList1.append(instructionHandle0, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionHandle0.equals((Object)instructionHandle1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionHandle2.equals((Object)instructionHandle1));
      assertNotNull(instructionHandle2);
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(2, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertEquals(2, instructionList1.size());
      assertEquals((-1), instructionHandle2.getPosition());
      assertFalse(instructionHandle2.hasTargeters());
      assertNotSame(instructionList0, instructionList1);
      assertSame(instructionHandle0, instructionHandle2);
      assertNotSame(instructionHandle0, instructionHandle1);
      assertNotSame(instructionList1, instructionList0);
      assertSame(instructionHandle2, instructionHandle0);
      assertNotSame(instructionHandle2, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSUB dSUB0 = (DSUB)InstructionConstants.DSUB;
      assertNotNull(dSUB0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      
      InstructionList instructionList0 = new InstructionList(dSUB0);
      assertNotNull(instructionList0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[8];
      // Undeclared exception!
      try { 
        instructionList0.append(instructionHandleArray0[0], instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      int[] intArray0 = new int[5];
      InstructionHandle instructionHandle0 = InstructionList.findHandle(instructionHandleArray0, intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, instructionHandleArray0.length);
      assertEquals(5, intArray0.length);
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      boolean boolean0 = instructionList0.isEmpty();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      boolean boolean0 = instructionList0.isEmpty();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNONNULL0);
      assertNotNull(branchHandle0);
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      instructionList0.delete((InstructionHandle) branchHandle0, (InstructionHandle) branchHandle0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertEquals((-1), iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals((-1), branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LLOAD lLOAD0 = new LLOAD();
      assertNotNull(lLOAD0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      
      InstructionList instructionList0 = new InstructionList(lLOAD0);
      assertNotNull(instructionList0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) lLOAD0);
      assertNotNull(instructionHandle0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals(2, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionList0.delete(instructionHandle0);
      assertEquals((-1), lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals((short) (-1), lLOAD0.getOpcode());
      assertEquals(1, lLOAD0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      // Undeclared exception!
      try { 
        instructionList0.move(instructionHandle0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      instructionList0.update();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PUTFIELD pUTFIELD0 = new PUTFIELD(82);
      assertNotNull(pUTFIELD0);
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(82, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(3, pUTFIELD0.getLength());
      
      InstructionList instructionList0 = new InstructionList(pUTFIELD0);
      assertNotNull(instructionList0);
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(82, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(3, pUTFIELD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      instructionList0.update();
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(82, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals(3, pUTFIELD0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver1);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IFNONNULL iFNONNULL0 = new IFNONNULL();
      assertNotNull(iFNONNULL0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      assertNotNull(instructionList0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.removeObserver(instructionListObserver0);
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals((short) (-1), iFNONNULL0.getOpcode());
      assertEquals(1, iFNONNULL0.getLength());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionListObserver instructionListObserver1 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      instructionList0.addObserver(instructionListObserver1);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = new ObjectType("");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      assertEquals(0, constantArray0.length);
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      assertEquals(0, constantArray0.length);
      assertNotNull(instructionHandle0);
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      assertEquals(0, constantArray0.length);
      assertNotNull(instructionHandle1);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertFalse(instructionHandle1.hasTargeters());
      assertEquals((-1), instructionHandle1.getPosition());
      assertSame(instructionHandle0, instructionHandle1);
      assertSame(instructionHandle1, instructionHandle0);
      
      InstructionHandle instructionHandle2 = instructionList0.findHandle(3545);
      assertNull(instructionHandle2);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[2];
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle2, (InstructionHandle) null, instructionHandle2, objectType0);
      assertNotNull(codeExceptionGen0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      
      codeExceptionGenArray0[0] = codeExceptionGen0;
      // Undeclared exception!
      try { 
        instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle1, instructionHandle1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(9, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.size());
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertNotNull(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aCONST_NULL0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[2];
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(codeExceptionGen0);
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      instructionList0.redirectExceptionHandlers(codeExceptionGenArray0, instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(2, codeExceptionGenArray0.length);
      assertEquals(10, instructionList0.size());
      assertEquals(10, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals(1, aCONST_NULL0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSR jSR0 = new JSR();
      assertNotNull(jSR0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
      
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR0);
      assertNotNull(instructionList0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[4];
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertNotNull(instructionHandle0);
      assertEquals(0, jSR0.getIndex());
      assertEquals((short) (-1), jSR0.getOpcode());
      assertEquals(1, jSR0.getLength());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(0, instructionHandle0.getPosition());
      
      // Undeclared exception!
      try { 
        instructionList0.redirectLocalVariables(localVariableGenArray0, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      
      LocalVariableGen[] localVariableGenArray0 = new LocalVariableGen[0];
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(instructionHandle0);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(8, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      instructionList0.redirectLocalVariables(localVariableGenArray0, instructionHandle0, instructionHandle0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, localVariableGenArray0.length);
      assertEquals(9, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(9, instructionList0.getLength());
      assertEquals(8, instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      assertNotNull(bREAKPOINT0);
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IFLT iFLT0 = new IFLT(instructionHandle0);
      assertNotNull(iFLT0);
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)155, iFLT0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      assertNotNull(branchHandle0);
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)155, iFLT0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      instructionList0.redirectBranches(instructionHandle0, branchHandle0);
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((short)202, bREAKPOINT0.getOpcode());
      assertEquals("breakpoint", bREAKPOINT0.getName());
      assertEquals(1, bREAKPOINT0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, iFLT0.getLength());
      assertEquals("iflt", iFLT0.getName());
      assertEquals(0, iFLT0.getIndex());
      assertEquals((short)155, iFLT0.getOpcode());
      assertEquals(0, branchHandle0.getPosition());
      assertTrue(branchHandle0.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      INEG iNEG0 = (INEG)InstructionConstants.INEG;
      assertNotNull(iNEG0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      
      InstructionList instructionList0 = new InstructionList(iNEG0);
      assertNotNull(instructionList0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      GOTO_W gOTO_W0 = new GOTO_W();
      assertNotNull(gOTO_W0);
      assertEquals(1, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO_W0);
      assertNotNull(branchHandle0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
      
      instructionList0.redirectBranches(branchHandle0, branchHandle0);
      assertEquals("ineg", iNEG0.getName());
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals(1, iNEG0.getLength());
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, gOTO_W0.getLength());
      assertEquals(0, gOTO_W0.getIndex());
      assertEquals((short) (-1), gOTO_W0.getOpcode());
      assertFalse(branchHandle0.hasTargeters());
      assertEquals(0, branchHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      instructionList0.dispose();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      
      int int0 = instructionList0.size();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "fconst_1");
      assertNotNull(pUSH0);
      assertEquals(3, constantPoolGen0.getSize());
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionList1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionList1, instructionList0);
      
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertNotNull(instructionHandle0);
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertTrue(instructionList1.isEmpty());
      assertEquals(0, instructionList1.getLength());
      assertEquals(0, instructionList1.size());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotSame(instructionList0, instructionList1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(instructionList0);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      instructionList0.replaceConstantPool(constantPoolGen0, constantPoolGen0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(2, instructionList0.size());
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[2];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[2];
      FCONST fCONST0 = (FCONST)InstructionConstants.FCONST_2;
      assertNotNull(fCONST0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(fCONST0);
      assertNotNull(instructionHandle0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0, 6);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, instructionHandleArray0.length);
      assertNotNull(sWITCH0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      
      InstructionList instructionList0 = new InstructionList(sWITCH0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, instructionHandleArray0.length);
      assertNotNull(instructionList0);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      
      InstructionList instructionList1 = instructionList0.copy();
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, instructionHandleArray0.length);
      assertNotNull(instructionList1);
      assertEquals(1, fCONST0.getLength());
      assertEquals("fconst_2", fCONST0.getName());
      assertEquals((short)13, fCONST0.getOpcode());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      IFLT iFLT0 = new IFLT(instructionHandle0);
      instructionList0.append(instructionHandle0, (BranchInstruction) iFLT0);
      instructionList0.copy();
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(2, instructionHandleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(0, instructionList0.getLength());
      
      InstructionHandle[] instructionHandleArray0 = instructionList0.getInstructionHandles();
      assertEquals(0, instructionHandleArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      String string0 = instructionList0.toString(false);
      assertEquals(5, instructionList0.size());
      assertEquals("   0: nop\n   1: nop\n   2: nop\n   3: nop\n   4: nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PUTFIELD pUTFIELD0 = new PUTFIELD(82);
      InstructionList instructionList0 = new InstructionList(pUTFIELD0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = (int) (byte) (-84);
      intArray0[2] = (int) (byte) (-84);
      intArray0[3] = (int) (byte) (-84);
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[9];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      instructionList0.append((CompoundInstruction) sWITCH0);
      // Undeclared exception!
      try { 
        instructionList0.getInstructions();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for tableswitch[170](32):-1:  -1: putfield[181](3) 82
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('Y');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      boolean boolean0 = instructionList0.contains((Instruction) dUP_X1_0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('5');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      assertNotNull(instructionHandle0);
      
      boolean boolean0 = instructionList0.contains(instructionHandle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      boolean boolean0 = instructionList0.contains((InstructionHandle) null);
      assertFalse(boolean0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aCONST_NULL0);
      boolean boolean0 = instructionList0.contains(instructionHandle0);
      assertEquals(10, instructionList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, "Aa=y&~*qVB$C M$ou");
      InstructionList instructionList0 = pUSH0.getInstructionList();
      JSR jSR0 = new JSR();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) jSR0, (Instruction) jSR0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ICONST iCONST0 = new ICONST();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) iCONST0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      BranchInstruction.notifyTarget(branchHandle0, branchHandle0, ifInstruction0);
      try { 
        instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {   -1: if_icmpne[160](3) -> null }
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PUTFIELD pUTFIELD0 = new PUTFIELD(82);
      InstructionList instructionList0 = new InstructionList(pUTFIELD0);
      InstructionList instructionList1 = instructionList0.copy();
      instructionList0.insert((Instruction) pUTFIELD0, instructionList1);
      assertEquals(2, instructionList0.getLength());
      
      instructionList0.delete((Instruction) pUTFIELD0, (Instruction) pUTFIELD0);
      assertEquals(1, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      InstructionHandle instructionHandle1 = instructionList0.insert((CompoundInstruction) pUSH0);
      instructionList0.move(instructionHandle0, instructionHandle1);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, instructionList0);
      InstructionHandle instructionHandle2 = instructionList0.findHandle(3545);
      instructionList0.move(instructionHandle1, instructionHandle2);
      assertFalse(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        instructionList0.move((InstructionHandle) null, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid null handle: From null to null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      ALOAD aLOAD0 = new ALOAD(231);
      // Undeclared exception!
      try { 
        instructionList0.insert((Instruction) aLOAD0, instructionList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction aload[25](2) 231 is not contained in this list.
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      instructionList0.insert(instructionHandle0, instructionList0);
      assertTrue(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NEW nEW0 = new NEW(6);
      InstructionList instructionList0 = new InstructionList(nEW0);
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(nEW0);
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Inserting null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.append(instructionList0);
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      // Undeclared exception!
      try { 
        instructionList0.append((InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IFNULL iFNULL0 = new IFNULL();
      instructionList0.insert((BranchInstruction) iFNULL0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFNULL0, (InstructionList) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Appending null InstructionList
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)66;
      byteArray0[0] = (byte) (-103);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't find target for branch: ifeq[153](3) -> null
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.findHandle((int) (byte)0);
      assertNotNull(instructionHandle0);
      assertEquals(0, instructionHandle0.getPosition());
      assertEquals(9, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('Y');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      instructionList0.getInstructions();
      InstructionHandle instructionHandle0 = instructionList0.findHandle(28872);
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('Y');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      // Undeclared exception!
      try { 
        instructionList0.findHandle(28872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3800);
      InstructionHandle instructionHandle0 = InstructionList.findHandle((InstructionHandle[]) null, intArray0, 0, 0);
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-97);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(7, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-58);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.setPositions(true);
      assertFalse(instructionList0.isEmpty());
      assertEquals(7, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) bREAKPOINT0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.insert(instructionHandle0, (BranchInstruction) iFEQ0);
      InstructionList instructionList1 = new InstructionList();
      instructionList0.append((InstructionHandle) branchHandle0, instructionList1);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPEQ0);
      instructionList0.insert((InstructionHandle) branchHandle0, instructionList1);
      instructionList0.delete((Instruction) iF_ICMPEQ0);
      branchHandle0.addHandle();
      // Undeclared exception!
      try { 
        instructionList0.delete((Instruction) ifInstruction0, (Instruction) ifInstruction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      int[] intArray0 = instructionList0.getInstructionPositions();
      assertFalse(instructionList0.isEmpty());
      assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8}, intArray0);
      assertEquals(9, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ();
      IfInstruction ifInstruction0 = iF_ICMPEQ0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      int int0 = instructionList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Boolean boolean0 = new Boolean(" is not contained in this list.");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      // Undeclared exception!
      try { 
        instructionList0.insert(instructionHandle0, (Instruction) gOTO0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning branch instruction goto[167](3) -> -1 to plain handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      IfInstruction ifInstruction0 = iFGT0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iFGT0, (CompoundInstruction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getStart();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) iF_ICMPGE0, (Instruction) lSHL0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.valueOf(true);
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      instructionList0.append((InstructionHandle) branchHandle0, (CompoundInstruction) pUSH0);
      assertFalse(instructionList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('5');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      instructionList0.insert((BranchInstruction) iF_ACMPNE0);
      // Undeclared exception!
      try { 
        instructionList0.getByteCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      InstructionList instructionList0 = new InstructionList(fCMPG0);
      instructionList0.setPositions();
      assertEquals(1, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.iterator();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = instructionList0.copy();
      assertEquals(0, instructionList0.size());
      assertEquals(0, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.toString();
      assertEquals(0, instructionList0.getLength());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.getEnd();
      assertEquals(0, instructionList0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FREM fREM0 = (FREM)InstructionConstants.FREM;
      InstructionList instructionList0 = new InstructionList(fREM0);
      int int0 = instructionList0.getLength();
      assertEquals(1, int0);
  }
}
