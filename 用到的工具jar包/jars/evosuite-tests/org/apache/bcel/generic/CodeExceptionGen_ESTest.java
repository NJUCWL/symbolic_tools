/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 16 15:36:32 GMT 2021
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CodeExceptionGen;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeExceptionGen_ESTest extends CodeExceptionGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      // Undeclared exception!
      try { 
        codeExceptionGen0.updateTarget(instructionHandle1, instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("faload");
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      InstructionHandle instructionHandle0 = codeExceptionGen0.getStartPC();
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      ObjectType objectType0 = new ObjectType("iSHmYqT$");
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.removeTargeter(codeExceptionGen0);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getStartPC();
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.updatePosition(1, 2445);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getStartPC();
      assertEquals(0, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.setPosition(6);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getStartPC();
      assertTrue(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      InstructionHandle instructionHandle0 = codeExceptionGen0.getHandlerPC();
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      ObjectType objectType0 = new ObjectType("iSHmYqT$");
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.removeTargeter(codeExceptionGen0);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getHandlerPC();
      assertSame(instructionHandle1, instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.updatePosition(1, 2445);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getHandlerPC();
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      instructionHandle0.setPosition(80);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getHandlerPC();
      assertEquals(80, instructionHandle1.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      InstructionHandle instructionHandle0 = codeExceptionGen0.getEndPC();
      assertNull(instructionHandle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.removeAllTargeters();
      InstructionHandle instructionHandle1 = codeExceptionGen0.getEndPC();
      assertSame(instructionHandle0, instructionHandle1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.updatePosition(1, 2445);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getEndPC();
      assertTrue(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.updatePosition(2445, 2445);
      InstructionHandle instructionHandle1 = codeExceptionGen0.getEndPC();
      assertTrue(instructionHandle1.hasTargeters());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      instructionHandle0.setPosition(80);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      CodeException codeException0 = codeExceptionGen0.getCodeException((ConstantPoolGen) null);
      assertEquals(0, codeException0.getCatchType());
      assertEquals(81, codeException0.getEndPC());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISTORE iSTORE0 = new ISTORE();
      InstructionList instructionList0 = new InstructionList(iSTORE0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ICMPLT0);
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList1);
      ObjectType objectType0 = Type.STRING;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      CodeException codeException0 = codeExceptionGen0.getCodeException(constantPoolGen0);
      assertEquals(1, codeException0.getEndPC());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      instructionHandle0.setPosition((-1410));
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      CodeException codeException0 = codeExceptionGen0.getCodeException((ConstantPoolGen) null);
      assertEquals((-1409), codeException0.getEndPC());
      assertEquals(0, codeException0.getCatchType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FNEG fNEG0 = new FNEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(fNEG0);
      ObjectType objectType0 = new ObjectType("iSHmYqT$");
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      ObjectType objectType1 = codeExceptionGen0.getCatchType();
      assertEquals("LiSHmYqT$;", objectType1.getSignature());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.OBJECT;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.dispose();
      codeExceptionGen0.updateTarget(instructionHandle0, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        codeExceptionGen0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionHandle0.dispose();
      // Undeclared exception!
      try { 
        codeExceptionGen0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      codeExceptionGen0.setHandlerPC(instructionHandle1);
      // Undeclared exception!
      try { 
        codeExceptionGen0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 55);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      ObjectType objectType0 = new ObjectType("B");
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      // Undeclared exception!
      try { 
        codeExceptionGen0.getCodeException((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CodeExceptionGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGen0.setEndPC(instructionHandle0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGen0.setStartPC(instructionHandle0);
      assertEquals((-1), instructionHandle0.getPosition());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      codeExceptionGen0.setHandlerPC(instructionHandle1);
      boolean boolean0 = codeExceptionGen0.containsTarget(instructionHandle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      ObjectType objectType0 = Type.OBJECT;
      InstructionHandle instructionHandle0 = instructionList0.append(instructionList0);
      InstructionHandle instructionHandle1 = instructionList0.append((CompoundInstruction) pUSH0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      boolean boolean0 = codeExceptionGen0.containsTarget(instructionHandle1);
      assertTrue(instructionHandle1.hasTargeters());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.THROWABLE;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionList0);
      boolean boolean0 = codeExceptionGen0.containsTarget(instructionHandle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      boolean boolean0 = codeExceptionGen0.containsTarget(instructionHandle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGen0.updateTarget(instructionHandle0, (InstructionHandle) null);
      // Undeclared exception!
      try { 
        codeExceptionGen0.updateTarget(instructionHandle0, instructionHandle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: fconst_0[11](1), but {null, null, null}
         //
         verifyException("org.apache.bcel.generic.CodeExceptionGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      CodeException codeException0 = codeExceptionGen0.getCodeException((ConstantPoolGen) null);
      assertEquals(0, codeException0.getCatchType());
      assertEquals(0, codeException0.getEndPC());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      String string0 = codeExceptionGen0.toString();
      assertEquals("CodeExceptionGen(  -1: fconst_0[11](1),   -1: fconst_0[11](1),   -1: fconst_0[11](1))", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      Object object0 = codeExceptionGen0.clone();
      assertFalse(object0.equals((Object)codeExceptionGen0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) gOTO0, (CompoundInstruction) pUSH0);
      ObjectType objectType0 = Type.OBJECT;
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      codeExceptionGen0.setCatchType(objectType0);
      assertEquals(1, objectType0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      InstructionHandle instructionHandle0 = new InstructionHandle(aALOAD0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen(instructionHandle0, instructionHandle0, instructionHandle0, (ObjectType) null);
      ObjectType objectType0 = codeExceptionGen0.getCatchType();
      assertNull(objectType0);
  }
}
