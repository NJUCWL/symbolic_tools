
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class MULTIANEWARRAYMergedTest_10s {

  public static boolean debug = false;

  @Test
  public void test0001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0001"); }

    org.apache.bcel.util.ByteSequence byteSequence0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Instruction instruction1 = org.apache.bcel.generic.Instruction.readInstruction(byteSequence0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0002"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)1, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0003"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0004"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0005"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0006"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0007"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0008"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0009"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0010"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0011"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0012"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0013"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0014"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0015"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = mULTIANEWARRAY2.toString(constantPool4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0016"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0017"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0018"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test0019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0019"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0020"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType4 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0021"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType5 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0022"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0023"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0024"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0025"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0026"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0027"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0028"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0029"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0030"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0031"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0032"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)197, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0033"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0034"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0035"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0036"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0037"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0038"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0039"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0040"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0041"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0042"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0043"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)0, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0044"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0045"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0046"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0047"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0048"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)100, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0049"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0050"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0051"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0052"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0053"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0054"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0055"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0056"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)' ', (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0057"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0058"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0059"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0060"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0061"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0062"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0063"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0064"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0065"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0066"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0067"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type12 = mULTIANEWARRAY2.getType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0068"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0069"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0070"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0071"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0072"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0073"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0074"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0075"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = mULTIANEWARRAY2.toString(constantPool3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0076"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0077"); }

    org.apache.bcel.generic.InstructionComparator instructionComparator0 = null;
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);

  }

  @Test
  public void test0078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0078"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0079"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0080"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0081"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0082"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0083"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)100, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0084"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(1, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0085"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0086"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0087"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0088"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'a', (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0089"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0090"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0091"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0092"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0093"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0094"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Visitor visitor3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0095"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0096"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0097"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0098"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0099"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type4 = mULTIANEWARRAY2.getType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0100"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str11 = mULTIANEWARRAY7.toString(true);
    int i12 = mULTIANEWARRAY7.getIndex();
    java.lang.String str13 = mULTIANEWARRAY7.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0101"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0102"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0103"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0104"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0105"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0106"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)100, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0107"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0108"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0109"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0110"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0111"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)' ', (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0112"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0113"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0114"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0115"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(100, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0116"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0117"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0118"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0119"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0120"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0121"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0122"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0123"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0124"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0125"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0126"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type5 = mULTIANEWARRAY2.getType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0127"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0128"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0129"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0130"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0131"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0132"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0133"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = mULTIANEWARRAY2.toString(constantPool3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0134"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0135"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0136"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type4 = mULTIANEWARRAY2.getType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0137"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0138"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0139"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType5 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0140"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type5 = mULTIANEWARRAY2.getType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0141"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0142"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0143"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0144"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0145"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getIndex();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY12.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = null;
    int i16 = instruction14.produceStack(constantPoolGen15);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)instruction14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test0146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0146"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)' ', (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0147"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0148"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0149"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0150"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0151"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0152"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0153"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0154"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0155"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0156"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0157"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0158"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0159"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0160"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0161"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type5 = mULTIANEWARRAY2.getType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0162"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0163"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0164"); }

    org.apache.bcel.generic.InstructionComparator instructionComparator0 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator0);

  }

  @Test
  public void test0165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0165"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType4 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0166"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    org.apache.bcel.generic.Visitor visitor3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0167"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0168"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0169"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0170"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = mULTIANEWARRAY2.toString(constantPool4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0171"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0172"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0173"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0174"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)197);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0175"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0176"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0177"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0178"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0179"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0180"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType5 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0181"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0182"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0183"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0184"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0185"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0186"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0187"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0188"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)10, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0189"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0190"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0191"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidByte(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0192"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0193"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0194"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0195"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0196"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0197"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    org.apache.bcel.generic.Visitor visitor12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0198"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0199"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0200"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0201"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0202"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0203"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0204"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0205"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0206"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0207"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0208"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0209"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0210"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0211"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test0212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0212"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0213"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0214"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0215"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test0216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0216"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0217"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0218"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0219"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0220"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0221"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0222"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0223"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0224"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    int i10 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0225"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType4 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0226"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0227"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0228"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.Visitor visitor11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0229"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0230"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0231"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(1, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0232"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)(byte)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0233"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0234"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0235"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)0, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0236"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test0237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0237"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0238"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0239"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0240"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0241"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType4 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0242"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0243"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0244"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0245"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0246"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)(byte)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0247"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0248"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(0, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0249"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    java.io.DataOutputStream dataOutputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0250"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0251"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0252"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0253"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0254"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type4 = mULTIANEWARRAY2.getType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0255"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0256"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test0257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0257"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0258"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0259"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0260"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = mULTIANEWARRAY2.toString(constantPool3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0261"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0262"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0263"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0264"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0265"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0266"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(4, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0267"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(100, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0268"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0269"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)0, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0270"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0271"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0272"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    java.io.DataOutputStream dataOutputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0273"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0274"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0275"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0276"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0277"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType5 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0278"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0279"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0280"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0281"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0282"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0283"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0284"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor13 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0285"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0286"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0287"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0288"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0289"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0290"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)197);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0291"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0292"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0293"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0294"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0295"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0296"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0297"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0298"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0299"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0300"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0301"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0302"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0303"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0304"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)(byte)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0305"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0306"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0307"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0308"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0309"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type5 = mULTIANEWARRAY2.getType(constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0310"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0311"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0312"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0313"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0314"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0315"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0316"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0317"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0318"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0319"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0320"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(10, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0321"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0322"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0323"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0324"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0325"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0326"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream4 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0327"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0328"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getIndex();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY12.copy();
    int i15 = instruction14.getLength();
    java.lang.String str16 = instruction14.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)instruction14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray"+ "'", str16.equals("multianewarray"));

  }

  @Test
  public void test0329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0329"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0330"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0331"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0332"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0333"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)197, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0334"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0335"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0336"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0337"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(1, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0338"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0339"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0340"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0341"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType13 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0342"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0343"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0344"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0345"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0346"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)100, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0347"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0348"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0349"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    org.apache.bcel.generic.Visitor visitor3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0350"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0351"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0352"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type14 = mULTIANEWARRAY2.getType(constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0353"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0354"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0355"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)1, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0356"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0357"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0358"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0359"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0360"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0361"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0362"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0363"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0364"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0365"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0366"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0367"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType12 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0368"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0369"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0370"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0371"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'a', (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0372"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = mULTIANEWARRAY2.toString(constantPool11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0373"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0374"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0375"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0376"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0377"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0378"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(4, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0379"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0380"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0381"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0382"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0383"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0384"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = mULTIANEWARRAY2.toString(constantPool4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0385"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0386"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0387"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0388"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0389"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0390"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0391"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0392"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0393"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = mULTIANEWARRAY2.toString(constantPool3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0394"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0395"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0396"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    int i10 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.classfile.ConstantPool constantPool11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = mULTIANEWARRAY2.toString(constantPool11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0397"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0398"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0399"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0400"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0401"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0402"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0403"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0404"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0405"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0406"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0407"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0408"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0409"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.generic.Visitor visitor3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0410"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0411"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'a', (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0412"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0413"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0414"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0415"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0416"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType13 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0417"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0418"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0419"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0420"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0421"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0422"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0423"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0424"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0425"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(4, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0426"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0427"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0428"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0429"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0430"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0431"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0432"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0433"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)1, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0434"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0435"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0436"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0437"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)1, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0438"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0439"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0440"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0441"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0442"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0443"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0444"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0445"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0446"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0447"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0448"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0449"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0450"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0451"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0452"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0453"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)(byte)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0454"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0455"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0456"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0457"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0458"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0459"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0460"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    java.io.DataOutputStream dataOutputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0461"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0462"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0463"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0464"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0465"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0466"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0467"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0468"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0469"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0470"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0471"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)0, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0472"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0473"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0474"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0475"); }

    boolean b1 = org.apache.bcel.generic.Instruction.isValidShort((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test0476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0476"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0477"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0478"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.io.DataOutputStream dataOutputStream3 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0479"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0480"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0481"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0482"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0483"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0484"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0485"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0486"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0487"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0488"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0489"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0490"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0491"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'a', (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0492"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(1, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0493"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0494"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)1, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0495"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0496"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0497"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0498"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0499"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0500"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)(byte)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0501() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0501"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    org.apache.bcel.classfile.ConstantPool constantPool11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = mULTIANEWARRAY2.toString(constantPool11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0502() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0502"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0503() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0503"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0504() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0504"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0505() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0505"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0506() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0506"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0507() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0507"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0508() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0508"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0509() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0509"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0510() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0510"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0511() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0511"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0512() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0512"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    java.io.DataOutputStream dataOutputStream11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0513() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0513"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0514() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0514"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0515() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0515"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0516() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0516"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0517() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0517"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0518() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0518"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0519() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0519"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0520() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0520"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0521() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0521"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0522() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0522"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0523() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0523"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0524() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0524"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0525() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0525"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0526() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0526"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0527() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0527"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0528() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0528"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0529() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0529"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0530() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0530"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0531() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0531"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType12 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0532() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0532"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0533() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0533"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = mULTIANEWARRAY2.toString(constantPool12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0534() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0534"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0535() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0535"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0536() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0536"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0537() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0537"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(0, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0538() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0538"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = mULTIANEWARRAY2.toString(constantPool11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0539() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0539"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0540() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0540"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0541() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0541"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    boolean b6 = instruction4.equals((java.lang.Object)10L);
    int i7 = instruction4.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    java.lang.String str14 = mULTIANEWARRAY10.toString(true);
    int i15 = mULTIANEWARRAY10.getIndex();
    java.lang.String str16 = mULTIANEWARRAY10.toString();
    int i17 = mULTIANEWARRAY10.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = instruction4.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);

  }

  @Test
  public void test0542() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0542"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0543() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0543"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0544() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0544"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0545() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0545"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)100, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0546() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0546"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0547() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0547"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0548() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0548"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType10 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0549() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0549"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0550() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0550"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0551() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0551"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0552() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0552"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0553() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0553"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0554() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0554"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0555() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0555"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type13 = mULTIANEWARRAY2.getType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0556() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0556"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)' ', (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0557() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0557"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)1, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0558() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0558"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)197, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0559() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0559"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream13 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0560() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0560"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0561() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0561"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0562() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0562"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test0563() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0563"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0564() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0564"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(10, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0565() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0565"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type4 = mULTIANEWARRAY2.getType(constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0566() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0566"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0567() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0567"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0568() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0568"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);

  }

  @Test
  public void test0569() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0569"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0570() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0570"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0571() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0571"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0572() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0572"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0573() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0573"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0574() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0574"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0575() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0575"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0576() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0576"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0577() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0577"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0578() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0578"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0579() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0579"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0580() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0580"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0581() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0581"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0582() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0582"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0583() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0583"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0584() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0584"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0585() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0585"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0586() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0586"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0587() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0587"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0588() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0588"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    java.io.DataOutputStream dataOutputStream11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0589() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0589"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0590() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0590"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0591() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0591"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0592() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0592"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type12 = mULTIANEWARRAY2.getType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0593() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0593"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0594() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0594"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array12 = mULTIANEWARRAY9.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array12);

  }

  @Test
  public void test0595() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0595"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    java.io.DataOutputStream dataOutputStream5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0596() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0596"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0597() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0597"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0598() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0598"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0599() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0599"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0600() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0600"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0601() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0601"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0602() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0602"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType6 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0603() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0603"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0604() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0604"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0605() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0605"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0606() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0606"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0607() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0607"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0608() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0608"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    int i10 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType12 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0609() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0609"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    java.io.DataOutputStream dataOutputStream6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0610() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0610"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = mULTIANEWARRAY2.toString(constantPool4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0611() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0611"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0612() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0612"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0613() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0613"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0614() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0614"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    org.apache.bcel.generic.Visitor visitor12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0615() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0615"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0616() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0616"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0617() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0617"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0618() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0618"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)1, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0619() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0619"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0620() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0620"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0621() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0621"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    mULTIANEWARRAY7.setIndex((int)(byte)10);
    mULTIANEWARRAY7.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array14 = mULTIANEWARRAY7.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array14);

  }

  @Test
  public void test0622() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0622"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0623() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0623"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(10, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0624() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0624"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0625() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0625"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0626() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0626"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0627() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0627"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0628() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0628"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    java.io.DataOutputStream dataOutputStream12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0629() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0629"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0630() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0630"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0631() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0631"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0632() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0632"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0633() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0633"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)0, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0634() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0634"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0635() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0635"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0636() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0636"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0637() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0637"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)197, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0638() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0638"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0639() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0639"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    java.lang.String str14 = mULTIANEWARRAY11.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray"+ "'", str14.equals("multianewarray"));

  }

  @Test
  public void test0640() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0640"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool7 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str8 = mULTIANEWARRAY2.toString(constantPool7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0641() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0641"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0642() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0642"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0643() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0643"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0644() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0644"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0645() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0645"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(0, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0646() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0646"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0647() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0647"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    int i10 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0648() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0648"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0649() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0649"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0650() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0650"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(100, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0651() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0651"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = mULTIANEWARRAY2.toString(constantPool13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0652() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0652"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0653() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0653"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = mULTIANEWARRAY2.toString(constantPool12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0654() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0654"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0655() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0655"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0656() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0656"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type13 = mULTIANEWARRAY2.getType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0657() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0657"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0658() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0658"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0659() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0659"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0660() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0660"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0661() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0661"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0662() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0662"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)10, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0663() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0663"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.produceStack(constantPoolGen12);
    short s14 = mULTIANEWARRAY11.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s14 == (short)1);

  }

  @Test
  public void test0664() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0664"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0665() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0665"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0666() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0666"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY11.copy();
    boolean b14 = instruction12.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test0667() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0667"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0668() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0668"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0669() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0669"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0670() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0670"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type12 = mULTIANEWARRAY2.getType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0671() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0671"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0672() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0672"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0673() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0673"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0674() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0674"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Visitor visitor5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0675() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0675"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0676() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0676"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0677() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0677"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    java.io.DataOutputStream dataOutputStream12 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0678() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0678"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0679() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0679"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0680() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0680"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = instruction4.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = instruction4.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);

  }

  @Test
  public void test0681() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0681"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(100, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0682() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0682"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0683() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0683"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0684() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0684"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(0, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0685() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0685"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0686() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0686"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0687() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0687"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0688() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0688"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0689() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0689"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0690() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0690"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getIndex();
    org.apache.bcel.generic.Instruction instruction11 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction11);

  }

  @Test
  public void test0691() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0691"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = mULTIANEWARRAY2.toString(constantPool5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0692() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0692"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0693() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0693"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY8.consumeStack(constantPoolGen9);
    java.lang.String str12 = mULTIANEWARRAY8.toString(true);
    int i13 = mULTIANEWARRAY8.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str12.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test0694() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0694"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0695() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0695"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)100, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0696() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0696"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0697() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0697"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0698() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0698"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)(byte)1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0699() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0699"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY12.consumeStack(constantPoolGen13);
    java.lang.String str16 = mULTIANEWARRAY12.toString(true);
    int i17 = mULTIANEWARRAY12.getIndex();
    java.lang.String str19 = mULTIANEWARRAY12.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen20 = null;
    int i21 = mULTIANEWARRAY12.produceStack(constantPoolGen20);
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "multianewarray 10 10 1"+ "'", str19.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test0700() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0700"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)100, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0701() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0701"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0702() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0702"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType13 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0703() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0703"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0704() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0704"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0705() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0705"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0706() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0706"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)10, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0707() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0707"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0708() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0708"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);

  }

  @Test
  public void test0709() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0709"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = instruction4.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY9.copy();
    boolean b12 = instruction10.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = instruction4.equals((java.lang.Object)instruction10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0710() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0710"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0711() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0711"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0712() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0712"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType12 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0713() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0713"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType14 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0714() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0714"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)(byte)10);
    org.apache.bcel.generic.Visitor visitor11 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test0715() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0715"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0716() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0716"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0717() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0717"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0718() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0718"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.Visitor visitor9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0719() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0719"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type9 = mULTIANEWARRAY2.getType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0720() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0720"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)(byte)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0721() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0721"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    int i10 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type12 = mULTIANEWARRAY2.getType(constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0722() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0722"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str10 = mULTIANEWARRAY6.toString(true);
    int i11 = mULTIANEWARRAY6.getIndex();
    java.lang.String str12 = mULTIANEWARRAY6.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str10.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str12.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0723() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0723"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0724() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0724"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0725() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0725"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)100, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0726() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0726"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0727() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0727"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0728() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0728"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s13 = mULTIANEWARRAY12.getOpcode();
    mULTIANEWARRAY12.setIndex(10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)197);

  }

  @Test
  public void test0729() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0729"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.Visitor visitor10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0730() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0730"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Visitor visitor6 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0731() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0731"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.io.DataOutputStream dataOutputStream9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0732() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0732"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)197);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0733() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0733"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0734() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0734"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    short s7 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0735() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0735"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0736() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0736"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type13 = mULTIANEWARRAY2.getType(constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0737() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0737"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0738() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0738"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0739() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0739"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY9.produceStack(constantPoolGen12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0740() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0740"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0741() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0741"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    java.io.DataOutputStream dataOutputStream7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0742() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0742"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0743() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0743"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType8 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0744() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0744"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType14 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0745() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0745"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0746() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0746"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0747() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0747"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY7.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0748() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0748"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.Visitor visitor8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0749() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0749"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY5 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY5.consumeStack(constantPoolGen6);
    mULTIANEWARRAY5.setIndex((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0750() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0750"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0751() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0751"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0752() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0752"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0753() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0753"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type6 = mULTIANEWARRAY2.getType(constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0754() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0754"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0755() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0755"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0756() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0756"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0757() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0757"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)0, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0758() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0758"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0759() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0759"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType9 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0760() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0760"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)0, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0761() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0761"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str10 = mULTIANEWARRAY6.toString(true);
    int i11 = mULTIANEWARRAY6.getIndex();
    java.lang.String str12 = mULTIANEWARRAY6.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str10.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str12.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0762() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0762"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    java.io.DataOutputStream dataOutputStream13 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0763() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0763"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.classfile.ConstantPool constantPool8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = mULTIANEWARRAY2.toString(constantPool8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test0764() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0764"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0765() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0765"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0766() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0766"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0767() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0767"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0768() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0768"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0769() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0769"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0770() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0770"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getIndex();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY12.copy();
    mULTIANEWARRAY12.setIndex(4);
    java.lang.Class<?>[] cls_array17 = mULTIANEWARRAY12.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array17);

  }

  @Test
  public void test0771() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0771"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)1, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0772() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0772"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0773() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0773"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0774() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0774"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type7 = mULTIANEWARRAY2.getType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0775() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0775"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.io.DataOutputStream dataOutputStream8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.dump(dataOutputStream8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);

  }

  @Test
  public void test0776() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0776"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = mULTIANEWARRAY2.toString(constantPool12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0777() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0777"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(10, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0778() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0778"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getLength();
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY8.getExceptions();
    int i11 = mULTIANEWARRAY8.getIndex();
    java.lang.Class<?>[] cls_array12 = mULTIANEWARRAY8.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator13 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    boolean b18 = mULTIANEWARRAY8.equals((java.lang.Object)instructionComparator13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test0779() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0779"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type10 = mULTIANEWARRAY2.getType(constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0780() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0780"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0781() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0781"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b13 = mULTIANEWARRAY11.equals((java.lang.Object)0.0d);
    int i14 = mULTIANEWARRAY11.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0782() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0782"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)-1, (short)(byte)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0783() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0783"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0784() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0784"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType7 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0785() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0785"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)10, (short)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0786() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0786"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0787() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0787"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    short s8 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0788() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0788"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0789() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0789"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0790() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0790"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ObjectType objectType11 = mULTIANEWARRAY2.getLoadClassType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0791() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0791"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY7.produceStack(constantPoolGen10);
    int i12 = mULTIANEWARRAY7.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY7.consumeStack(constantPoolGen13);
    java.lang.Class<?>[] cls_array15 = mULTIANEWARRAY7.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array15);

  }

  @Test
  public void test0792() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0792"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY(4, (short)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0793() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0793"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0794() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0794"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0795() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0795"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(short)0, (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0796() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0796"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0797() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0797"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0798() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0798"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0799() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0799"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0800() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0800"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0801() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0801"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getLength();
    java.lang.Class<?>[] cls_array11 = mULTIANEWARRAY9.getExceptions();
    int i12 = mULTIANEWARRAY9.getIndex();
    java.lang.Class<?>[] cls_array13 = mULTIANEWARRAY9.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator14 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    boolean b19 = mULTIANEWARRAY9.equals((java.lang.Object)instructionComparator14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = instruction6.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test0802() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0802"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    mULTIANEWARRAY11.setIndex((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0803() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0803"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)100);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0804() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0804"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0805() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0805"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getIndex();
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY11.copy();
    int i14 = instruction13.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0806() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0806"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY11.copy();
    mULTIANEWARRAY11.setIndex(100);
    org.apache.bcel.generic.Instruction instruction15 = mULTIANEWARRAY11.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction15);

  }

  @Test
  public void test0807() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0807"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type11 = mULTIANEWARRAY2.getType(constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0808() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0808"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0809() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0809"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0810() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0810"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY8.consumeStack(constantPoolGen9);
    mULTIANEWARRAY8.setIndex((int)(byte)10);
    mULTIANEWARRAY8.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array15 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array15);

  }

  @Test
  public void test0811() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0811"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((-1), (short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0812() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0812"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY12.consumeStack(constantPoolGen13);
    java.lang.Class<?>[] cls_array15 = mULTIANEWARRAY12.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array15);

  }

  @Test
  public void test0813() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0813"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0814() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0814"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.classfile.ConstantPool constantPool13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = mULTIANEWARRAY2.toString(constantPool13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0815() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0815"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0816() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0816"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0817() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0817"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0818() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0818"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY8.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY8.produceStack(constantPoolGen11);
    int i13 = mULTIANEWARRAY8.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY8.consumeStack(constantPoolGen14);
    java.lang.Class<?>[] cls_array16 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array16);

  }

  @Test
  public void test0819() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0819"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.Visitor visitor13 = null;
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.accept(visitor13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0820() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0820"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0821() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0821"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY10.produceStack(constantPoolGen13);
    int i15 = mULTIANEWARRAY10.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen16 = null;
    int i17 = mULTIANEWARRAY10.consumeStack(constantPoolGen16);
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test0822() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0822"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b10 = mULTIANEWARRAY8.equals((java.lang.Object)0.0d);
    short s11 = mULTIANEWARRAY8.getDimensions();
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY8.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)instruction12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);

  }

  @Test
  public void test0823() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0823"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0824() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0824"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getIndex();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY12.copy();
    java.lang.String str15 = mULTIANEWARRAY12.toString();
    short s16 = mULTIANEWARRAY12.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str15.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s16 == (short)197);

  }

  @Test
  public void test0825() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0825"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0826() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0826"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.classfile.ConstantPool constantPool9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = mULTIANEWARRAY2.toString(constantPool9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0827() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0827"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0828() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0828"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.classfile.ConstantPool constantPool10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mULTIANEWARRAY2.toString(constantPool10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0829() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0829"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0830() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0830"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test0831() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0831"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY5 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY5.consumeStack(constantPoolGen6);
    mULTIANEWARRAY5.setIndex((int)(byte)10);
    mULTIANEWARRAY5.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array12 = mULTIANEWARRAY5.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array12);

  }

  @Test
  public void test0832() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0832"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)-1, (short)(byte)10);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0833() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0833"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test0834() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0834"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b12 = mULTIANEWARRAY10.equals((java.lang.Object)0.0d);
    short s13 = mULTIANEWARRAY10.getDimensions();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY10.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);

  }

  @Test
  public void test0835() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0835"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0836() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0836"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test0837() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0837"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b14 = mULTIANEWARRAY12.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test0838() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0838"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str9 = mULTIANEWARRAY6.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray"+ "'", str9.equals("multianewarray"));

  }

  @Test
  public void test0839() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0839"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY13 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY13.produceStack(constantPoolGen14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test0840() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0840"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    java.lang.String str13 = mULTIANEWARRAY10.getName();
    java.lang.Class<?>[] cls_array14 = mULTIANEWARRAY10.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray"+ "'", str13.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array14);

  }

  @Test
  public void test0841() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0841"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b9 = mULTIANEWARRAY7.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY7.consumeStack(constantPoolGen10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0842() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0842"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)instruction12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);

  }

  @Test
  public void test0843() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0843"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b9 = mULTIANEWARRAY7.equals((java.lang.Object)0.0d);
    int i10 = mULTIANEWARRAY7.getLength();
    java.lang.String str11 = mULTIANEWARRAY7.toString();
    short s12 = mULTIANEWARRAY7.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)197);

  }

  @Test
  public void test0844() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0844"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0845() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0845"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction7 = instruction6.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    java.lang.String str14 = mULTIANEWARRAY10.toString(true);
    int i15 = mULTIANEWARRAY10.getIndex();
    java.lang.String str16 = mULTIANEWARRAY10.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = instruction6.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0846() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0846"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0847() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0847"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0848() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0848"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0849() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0849"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0850() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0850"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0851() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0851"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type8 = mULTIANEWARRAY2.getType(constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0852() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0852"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0853() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0853"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0854() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0854"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0855() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0855"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.Type type14 = mULTIANEWARRAY2.getType(constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0856() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0856"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test0857() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0857"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    int i14 = mULTIANEWARRAY9.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test0858() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0858"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0859() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0859"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str9 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0860() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0860"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i8 = mULTIANEWARRAY7.getIndex();
    java.lang.String str9 = mULTIANEWARRAY7.toString();
    mULTIANEWARRAY7.setIndex((int)(short)197);
    java.lang.String str12 = mULTIANEWARRAY7.toString();
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY7.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str9.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str12.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);

  }

  @Test
  public void test0861() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0861"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b13 = mULTIANEWARRAY11.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator14 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator14);
    boolean b18 = mULTIANEWARRAY11.equals((java.lang.Object)instructionComparator14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test0862() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0862"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    java.lang.String str14 = mULTIANEWARRAY9.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0863() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0863"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);

  }

  @Test
  public void test0864() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0864"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getLength();
    java.lang.String str10 = mULTIANEWARRAY8.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str10.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0865() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0865"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    java.lang.String str14 = mULTIANEWARRAY9.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0866() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0866"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0867() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0867"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0868() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0868"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0869() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0869"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    java.lang.String str8 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0870() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0870"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b12 = mULTIANEWARRAY10.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator13 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator13);
    boolean b17 = mULTIANEWARRAY10.equals((java.lang.Object)instructionComparator13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test0871() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0871"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test0872() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0872"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.produceStack(constantPoolGen10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0873() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0873"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0874() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0874"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test0875() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0875"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0876() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0876"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = instruction4.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getLength();
    short s11 = mULTIANEWARRAY9.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = instruction4.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)1);

  }

  @Test
  public void test0877() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0877"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0878() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0878"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i8 = mULTIANEWARRAY7.getLength();
    boolean b10 = mULTIANEWARRAY7.equals((java.lang.Object)(-1.0d));
    java.lang.String str12 = mULTIANEWARRAY7.toString(true);
    int i13 = mULTIANEWARRAY7.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str12.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test0879() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0879"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0880() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0880"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY14 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b16 = mULTIANEWARRAY14.equals((java.lang.Object)0.0d);
    int i17 = mULTIANEWARRAY14.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);

  }

  @Test
  public void test0881() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0881"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);

  }

  @Test
  public void test0882() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0882"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0883() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0883"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0884() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0884"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str10 = mULTIANEWARRAY7.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray"+ "'", str10.equals("multianewarray"));

  }

  @Test
  public void test0885() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0885"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY12.consumeStack(constantPoolGen13);
    java.lang.Class<?>[] cls_array15 = mULTIANEWARRAY12.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array15);

  }

  @Test
  public void test0886() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0886"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test0887() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0887"); }

    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0888() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0888"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0889() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0889"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0890() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0890"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0891() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0891"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY13 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i14 = mULTIANEWARRAY13.getLength();
    boolean b16 = mULTIANEWARRAY13.equals((java.lang.Object)(-1.0d));
    java.lang.String str18 = mULTIANEWARRAY13.toString(true);
    int i19 = mULTIANEWARRAY13.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str18.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);

  }

  @Test
  public void test0892() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0892"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    int i14 = mULTIANEWARRAY9.getIndex();
    java.lang.String str15 = mULTIANEWARRAY9.toString();
    int i16 = mULTIANEWARRAY9.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str15.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);

  }

  @Test
  public void test0893() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0893"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test0894() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0894"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0895() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0895"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.produceStack(constantPoolGen7);
    short s9 = mULTIANEWARRAY6.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test0896() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0896"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY15 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0897() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0897"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b12 = mULTIANEWARRAY10.equals((java.lang.Object)0.0d);
    short s13 = mULTIANEWARRAY10.getOpcode();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY10.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);

  }

  @Test
  public void test0898() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0898"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0899() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0899"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getIndex();
    java.lang.String str11 = mULTIANEWARRAY9.toString();
    short s12 = mULTIANEWARRAY9.getOpcode();
    java.lang.String str13 = mULTIANEWARRAY9.getName();
    java.lang.String str15 = mULTIANEWARRAY9.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray"+ "'", str13.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray 10 10 1"+ "'", str15.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0900() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0900"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0901() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0901"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);

  }

  @Test
  public void test0902() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0902"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.consumeStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getLength();
    java.lang.String str13 = mULTIANEWARRAY11.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0903() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0903"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);

  }

  @Test
  public void test0904() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0904"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i11 = mULTIANEWARRAY10.getIndex();
    java.lang.String str12 = mULTIANEWARRAY10.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY10.consumeStack(constantPoolGen13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str12.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test0905() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0905"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0906() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0906"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test0907() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0907"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0908() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0908"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0909() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0909"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.classfile.ConstantPool constantPool6 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = mULTIANEWARRAY2.toString(constantPool6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0910() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0910"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getLength();
    boolean b14 = mULTIANEWARRAY11.equals((java.lang.Object)(-1.0d));
    java.lang.String str16 = mULTIANEWARRAY11.toString(true);
    int i17 = mULTIANEWARRAY11.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);

  }

  @Test
  public void test0911() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0911"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0912() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0912"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test0913() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0913"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0914() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0914"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getIndex();
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY11.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)instruction13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);

  }

  @Test
  public void test0915() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0915"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0916() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0916"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getIndex();
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY11.copy();
    int i14 = instruction13.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0917() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0917"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0918() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0918"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b13 = mULTIANEWARRAY11.equals((java.lang.Object)0.0d);
    short s14 = mULTIANEWARRAY11.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s14 == (short)1);

  }

  @Test
  public void test0919() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0919"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0920() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0920"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0921() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0921"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0922() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0922"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction9 = mULTIANEWARRAY8.copy();
    mULTIANEWARRAY8.setIndex(100);
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY8.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY8.produceStack(constantPoolGen13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test0923() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0923"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0924() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0924"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b10 = mULTIANEWARRAY8.equals((java.lang.Object)0.0d);
    short s11 = mULTIANEWARRAY8.getOpcode();
    short s12 = mULTIANEWARRAY8.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)197);

  }

  @Test
  public void test0925() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0925"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    int i5 = instruction4.getLength();
    java.lang.String str6 = instruction4.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    mULTIANEWARRAY9.setIndex((int)(byte)10);
    mULTIANEWARRAY9.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array16 = mULTIANEWARRAY9.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = instruction4.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array16);

  }

  @Test
  public void test0926() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0926"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY13 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s14 = mULTIANEWARRAY13.getOpcode();
    mULTIANEWARRAY13.setIndex(1);
    int i17 = mULTIANEWARRAY13.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s14 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test0927() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0927"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY2.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY13 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b15 = mULTIANEWARRAY13.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator16 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    boolean b20 = mULTIANEWARRAY13.equals((java.lang.Object)instructionComparator16);
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test0928() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0928"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.produceStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0929() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0929"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i11 = mULTIANEWARRAY10.getLength();
    boolean b13 = mULTIANEWARRAY10.equals((java.lang.Object)(-1.0d));
    java.lang.String str15 = mULTIANEWARRAY10.toString(true);
    java.lang.String str16 = mULTIANEWARRAY10.toString();
    short s17 = mULTIANEWARRAY10.getDimensions();
    int i18 = mULTIANEWARRAY10.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str15.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s17 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);

  }

  @Test
  public void test0930() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0930"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = instruction4.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY9.copy();
    mULTIANEWARRAY9.setIndex(100);
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = instruction4.equals((java.lang.Object)instruction13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);

  }

  @Test
  public void test0931() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0931"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0932() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0932"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0933() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0933"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY9.consumeStack(constantPoolGen12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0934() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0934"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getLength();
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY8.getExceptions();
    java.lang.Class<?>[] cls_array11 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array11);

  }

  @Test
  public void test0935() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0935"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    short s8 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s8 == (short)197);

  }

  @Test
  public void test0936() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0936"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b13 = mULTIANEWARRAY11.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY11.consumeStack(constantPoolGen14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test0937() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0937"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test0938() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0938"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0939() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0939"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str12 = mULTIANEWARRAY9.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY9.consumeStack(constantPoolGen13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray"+ "'", str12.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test0940() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0940"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0941() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0941"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0942() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0942"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY9.copy();
    mULTIANEWARRAY9.setIndex(100);
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY9.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY9.produceStack(constantPoolGen14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test0943() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0943"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    java.lang.String str4 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0944() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0944"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0945() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0945"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getLength();
    boolean b14 = mULTIANEWARRAY11.equals((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test0946() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0946"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test0947() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0947"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0948() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0948"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test0949() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0949"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test0950() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0950"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0951() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0951"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0952() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0952"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    mULTIANEWARRAY9.setIndex((int)(byte)10);
    mULTIANEWARRAY9.setIndex((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0953() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0953"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s13 = mULTIANEWARRAY12.getOpcode();
    short s14 = mULTIANEWARRAY12.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s14 == (short)197);

  }

  @Test
  public void test0954() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0954"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b10 = mULTIANEWARRAY8.equals((java.lang.Object)0.0d);
    short s11 = mULTIANEWARRAY8.getDimensions();
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY8.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)instruction12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);

  }

  @Test
  public void test0955() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0955"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str10 = mULTIANEWARRAY7.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY7.consumeStack(constantPoolGen11);
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray"+ "'", str10.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0956() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0956"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0957() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0957"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test0958() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0958"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test0959() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0959"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0960() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0960"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    java.lang.String str14 = mULTIANEWARRAY9.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0961() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0961"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    int i5 = instruction4.getLength();
    java.lang.String str6 = instruction4.getName();
    short s7 = instruction4.getOpcode();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i11 = mULTIANEWARRAY10.getLength();
    boolean b13 = mULTIANEWARRAY10.equals((java.lang.Object)(-1.0d));
    java.lang.String str15 = mULTIANEWARRAY10.toString(true);
    int i16 = mULTIANEWARRAY10.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = null;
    int i18 = mULTIANEWARRAY10.consumeStack(constantPoolGen17);
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = instruction4.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str15.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test0962() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0962"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0963() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0963"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    java.lang.String str8 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray 10 10 1"+ "'", str8.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0964() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0964"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b12 = mULTIANEWARRAY10.equals((java.lang.Object)(-1L));
    java.lang.String str14 = mULTIANEWARRAY10.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = null;
    int i16 = mULTIANEWARRAY10.produceStack(constantPoolGen15);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray 10 10 1"+ "'", str14.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test0965() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0965"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.produceStack(constantPoolGen10);
    short s12 = mULTIANEWARRAY9.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test0966() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0966"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b10 = mULTIANEWARRAY8.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY8.consumeStack(constantPoolGen11);
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0967() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0967"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i12 = mULTIANEWARRAY11.getLength();
    java.lang.Class<?>[] cls_array13 = mULTIANEWARRAY11.getExceptions();
    int i14 = mULTIANEWARRAY11.getIndex();
    java.lang.Class<?>[] cls_array15 = mULTIANEWARRAY11.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator16 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator16);
    boolean b21 = mULTIANEWARRAY11.equals((java.lang.Object)instructionComparator16);
    // The following exception was thrown during execution in test generation
    try {
    boolean b22 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test0968() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0968"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    int i14 = mULTIANEWARRAY9.getIndex();
    java.lang.String str16 = mULTIANEWARRAY9.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = null;
    int i18 = mULTIANEWARRAY9.produceStack(constantPoolGen17);
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray 10 10 1"+ "'", str16.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test0969() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0969"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str11 = mULTIANEWARRAY7.toString(true);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY7.consumeStack(constantPoolGen12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0970() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0970"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY12.copy();
    mULTIANEWARRAY12.setIndex(100);
    org.apache.bcel.generic.Instruction instruction16 = mULTIANEWARRAY12.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction16);

  }

  @Test
  public void test0971() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0971"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    java.lang.String str8 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray"+ "'", str8.equals("multianewarray"));

  }

  @Test
  public void test0972() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0972"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0973() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0973"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);

  }

  @Test
  public void test0974() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0974"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    mULTIANEWARRAY11.setIndex((int)(byte)10);
    mULTIANEWARRAY11.setIndex((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0975() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0975"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);

  }

  @Test
  public void test0976() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0976"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getLength();
    boolean b11 = mULTIANEWARRAY8.equals((java.lang.Object)(-1.0d));
    java.lang.String str13 = mULTIANEWARRAY8.toString(true);
    int i14 = mULTIANEWARRAY8.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = null;
    int i16 = mULTIANEWARRAY8.consumeStack(constantPoolGen15);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test0977() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0977"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);

  }

  @Test
  public void test0978() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0978"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0979() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0979"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0980() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0980"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    boolean b6 = instruction4.equals((java.lang.Object)10L);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str12 = mULTIANEWARRAY9.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = instruction4.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "multianewarray"+ "'", str12.equals("multianewarray"));

  }

  @Test
  public void test0981() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0981"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getIndex();
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY8.copy();
    int i11 = instruction10.getLength();
    int i12 = instruction10.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)instruction10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0982() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0982"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);

  }

  @Test
  public void test0983() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0983"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(100);
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    int i7 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0984() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0984"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test0985() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0985"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test0986() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0986"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test0987() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0987"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getLength();
    java.lang.Class<?>[] cls_array11 = mULTIANEWARRAY9.getExceptions();
    int i12 = mULTIANEWARRAY9.getIndex();
    java.lang.Class<?>[] cls_array13 = mULTIANEWARRAY9.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array13);

  }

  @Test
  public void test0988() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0988"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = instruction4.produceStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = instruction4.equals((java.lang.Object)instruction10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);

  }

  @Test
  public void test0989() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0989"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    java.lang.Class<?>[] cls_array7 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    mULTIANEWARRAY10.setIndex((int)(byte)10);
    mULTIANEWARRAY10.setIndex((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0990() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0990"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    short s4 = mULTIANEWARRAY2.getOpcode();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    mULTIANEWARRAY7.setIndex((int)(byte)10);
    mULTIANEWARRAY7.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array14 = mULTIANEWARRAY7.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = null;
    int i16 = mULTIANEWARRAY7.consumeStack(constantPoolGen15);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test0991() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0991"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0992() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0992"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY13 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY13.consumeStack(constantPoolGen14);
    mULTIANEWARRAY13.setIndex((int)(byte)10);
    mULTIANEWARRAY13.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array20 = mULTIANEWARRAY13.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen21 = null;
    int i22 = mULTIANEWARRAY13.consumeStack(constantPoolGen21);
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test0993() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0993"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = null;
    int i5 = mULTIANEWARRAY2.produceStack(constantPoolGen4);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0994() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0994"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    int i4 = mULTIANEWARRAY2.getIndex();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test0995() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0995"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test0996() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0996"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test0997() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0997"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    short s7 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)197);

  }

  @Test
  public void test0998() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0998"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getIndex();
    java.lang.String str14 = mULTIANEWARRAY12.toString();
    short s15 = mULTIANEWARRAY12.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s15 == (short)197);

  }

  @Test
  public void test0999() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0999"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    java.lang.String str6 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray"+ "'", str6.equals("multianewarray"));

  }

  @Test
  public void test1000() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1000"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getIndex();
    java.lang.String str11 = mULTIANEWARRAY9.toString();
    mULTIANEWARRAY9.setIndex((int)(short)197);
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1001"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b10 = mULTIANEWARRAY8.equals((java.lang.Object)0.0d);
    short s11 = mULTIANEWARRAY8.getDimensions();
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY8.copy();
    org.apache.bcel.generic.Instruction instruction13 = instruction12.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)instruction12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s11 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);

  }

  @Test
  public void test1002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1002"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    int i14 = mULTIANEWARRAY9.getIndex();
    java.lang.String str16 = mULTIANEWARRAY9.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = instruction6.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray 10 10 1"+ "'", str16.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test1003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1003"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    int i6 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test1004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1004"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY8.consumeStack(constantPoolGen9);
    java.lang.Class<?>[] cls_array11 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array11);

  }

  @Test
  public void test1005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1005"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    java.lang.String str6 = mULTIANEWARRAY2.toString();
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY10.produceStack(constantPoolGen13);
    int i15 = mULTIANEWARRAY10.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test1006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1006"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test1007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1007"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getIndex();
    org.apache.bcel.generic.Instruction instruction11 = mULTIANEWARRAY9.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction11);

  }

  @Test
  public void test1008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1008"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test1009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1009"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test1010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1010"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str11 = mULTIANEWARRAY7.toString(true);
    int i12 = mULTIANEWARRAY7.getIndex();
    java.lang.String str14 = mULTIANEWARRAY7.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray 10 10 1"+ "'", str14.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test1011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1011"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    short s9 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s9 == (short)1);

  }

  @Test
  public void test1012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1012"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str9 = mULTIANEWARRAY6.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray"+ "'", str9.equals("multianewarray"));

  }

  @Test
  public void test1013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1013"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY14 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b16 = mULTIANEWARRAY14.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test1014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1014"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test1015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1015"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getIndex();
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY8.copy();
    mULTIANEWARRAY8.setIndex(4);
    java.lang.Class<?>[] cls_array13 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array13);

  }

  @Test
  public void test1016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1016"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    java.lang.String str14 = mULTIANEWARRAY11.getName();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray"+ "'", str14.equals("multianewarray"));

  }

  @Test
  public void test1017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1017"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    java.lang.Class<?>[] cls_array8 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    mULTIANEWARRAY11.setIndex((int)(byte)10);
    mULTIANEWARRAY11.setIndex((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test1018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1018"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test1019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1019"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test1020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1020"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    int i9 = mULTIANEWARRAY2.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b14 = mULTIANEWARRAY12.equals((java.lang.Object)0.0d);
    short s15 = mULTIANEWARRAY12.getDimensions();
    org.apache.bcel.generic.Instruction instruction16 = mULTIANEWARRAY12.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)instruction16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s15 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction16);

  }

  @Test
  public void test1021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1021"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY7.consumeStack(constantPoolGen8);
    java.lang.String str11 = mULTIANEWARRAY7.toString(true);
    int i12 = mULTIANEWARRAY7.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test1022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1022"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getIndex();
    org.apache.bcel.generic.Instruction instruction11 = mULTIANEWARRAY9.copy();
    int i12 = instruction11.getLength();
    java.lang.String str13 = instruction11.getName();
    short s14 = instruction11.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray"+ "'", str13.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s14 == (short)197);

  }

  @Test
  public void test1023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1023"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test1024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1024"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getLength();
    boolean b11 = mULTIANEWARRAY8.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array12 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array12);

  }

  @Test
  public void test1025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1025"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));

  }

  @Test
  public void test1026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1026"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));

  }

  @Test
  public void test1027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1027"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test1028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1028"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    int i5 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test1029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1029"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)0.0d);
    int i12 = mULTIANEWARRAY9.getLength();
    java.lang.String str13 = mULTIANEWARRAY9.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY9.produceStack(constantPoolGen14);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test1030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1030"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)0.0d);
    short s12 = mULTIANEWARRAY9.getOpcode();
    short s13 = mULTIANEWARRAY9.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s13 == (short)1);

  }

  @Test
  public void test1031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1031"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1032"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test1033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1033"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1034"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction9 = mULTIANEWARRAY8.copy();
    boolean b11 = instruction9.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instruction9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test1035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1035"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction12 = mULTIANEWARRAY11.copy();
    mULTIANEWARRAY11.setIndex(100);
    org.apache.bcel.generic.Instruction instruction15 = mULTIANEWARRAY11.copy();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen16 = null;
    int i17 = mULTIANEWARRAY11.produceStack(constantPoolGen16);
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = instruction8.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test1036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1036"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1037"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str9 = mULTIANEWARRAY6.getName();
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY6.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = instruction3.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray"+ "'", str9.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test1038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1038"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test1039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1039"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY9.consumeStack(constantPoolGen10);
    java.lang.String str13 = mULTIANEWARRAY9.toString(true);
    java.lang.String str14 = mULTIANEWARRAY9.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str13.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str14.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1040"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'4', (short)(byte)1);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY5 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY5.consumeStack(constantPoolGen6);
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1041"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);

  }

  @Test
  public void test1042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1042"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i13 = mULTIANEWARRAY12.getLength();
    java.lang.Class<?>[] cls_array14 = mULTIANEWARRAY12.getExceptions();
    int i15 = mULTIANEWARRAY12.getIndex();
    java.lang.Class<?>[] cls_array16 = mULTIANEWARRAY12.getExceptions();
    short s17 = mULTIANEWARRAY12.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b18 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s17 == (short)1);

  }

  @Test
  public void test1043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1043"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY15 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b17 = mULTIANEWARRAY15.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator18 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator18);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator18);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator18);
    boolean b22 = mULTIANEWARRAY15.equals((java.lang.Object)instructionComparator18);
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test1044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1044"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY15 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i16 = mULTIANEWARRAY15.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);

  }

  @Test
  public void test1045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1045"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.String str7 = mULTIANEWARRAY2.toString(true);
    int i8 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str7.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test1046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1046"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);

  }

  @Test
  public void test1047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1047"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(10);
    boolean b7 = mULTIANEWARRAY2.equals((java.lang.Object)'#');
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test1048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1048"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    java.lang.String str5 = mULTIANEWARRAY2.toString();
    short s6 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str5.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test1049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1049"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction3 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY6 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY6.consumeStack(constantPoolGen7);
    java.lang.String str9 = mULTIANEWARRAY6.getName();
    java.lang.Class<?>[] cls_array10 = mULTIANEWARRAY6.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray"+ "'", str9.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array10);

  }

  @Test
  public void test1050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1050"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    short s12 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s12 == (short)1);

  }

  @Test
  public void test1051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1051"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test1052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1052"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex(1);
    int i6 = mULTIANEWARRAY2.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1053"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = null;
    int i7 = mULTIANEWARRAY2.consumeStack(constantPoolGen6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.produceStack(constantPoolGen8);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test1054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1054"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test1055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1055"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);

  }

  @Test
  public void test1056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1056"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);

  }

  @Test
  public void test1057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1057"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1058"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str9 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "multianewarray 10 10 1"+ "'", str9.equals("multianewarray 10 10 1"));

  }

  @Test
  public void test1059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1059"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    int i11 = mULTIANEWARRAY2.consumeStack(constantPoolGen10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY14 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test1060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1060"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }

  }

  @Test
  public void test1061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1061"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    java.lang.Class<?>[] cls_array14 = mULTIANEWARRAY11.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array14);

  }

  @Test
  public void test1062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1062"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.produceStack(constantPoolGen5);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = null;
    int i9 = mULTIANEWARRAY2.consumeStack(constantPoolGen8);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY12.consumeStack(constantPoolGen13);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = null;
    int i16 = mULTIANEWARRAY12.produceStack(constantPoolGen15);
    int i17 = mULTIANEWARRAY12.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen18 = null;
    int i19 = mULTIANEWARRAY12.consumeStack(constantPoolGen18);
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test1063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1063"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    short s3 = mULTIANEWARRAY2.getOpcode();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s3 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test1064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1064"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = null;
    int i14 = mULTIANEWARRAY10.produceStack(constantPoolGen13);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test1065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1065"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    short s7 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s7 == (short)1);

  }

  @Test
  public void test1066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1066"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    mULTIANEWARRAY2.setIndex((int)(short)197);
    java.lang.String str7 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    java.lang.String str15 = mULTIANEWARRAY11.toString(true);
    int i16 = mULTIANEWARRAY11.getIndex();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = instruction8.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str7.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str15.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);

  }

  @Test
  public void test1067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1067"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.produceStack(constantPoolGen3);
    short s5 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = null;
    int i10 = mULTIANEWARRAY8.consumeStack(constantPoolGen9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY8.produceStack(constantPoolGen11);
    int i13 = mULTIANEWARRAY8.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY8.consumeStack(constantPoolGen14);
    java.lang.Class<?>[] cls_array16 = mULTIANEWARRAY8.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array16);

  }

  @Test
  public void test1068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1068"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    mULTIANEWARRAY2.setIndex(4);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);

  }

  @Test
  public void test1069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1069"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);

  }

  @Test
  public void test1070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1070"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1071"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str5 = mULTIANEWARRAY2.getName();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getIndex();
    java.lang.String str10 = mULTIANEWARRAY8.toString();
    mULTIANEWARRAY8.setIndex((int)(short)197);
    java.lang.String str13 = mULTIANEWARRAY8.toString();
    org.apache.bcel.generic.Instruction instruction14 = mULTIANEWARRAY8.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = mULTIANEWARRAY2.equals((java.lang.Object)instruction14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "multianewarray"+ "'", str5.equals("multianewarray"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str10.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "multianewarray[197](4) 197 197 1"+ "'", str13.equals("multianewarray[197](4) 197 197 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction14);

  }

  @Test
  public void test1072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1072"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    org.apache.bcel.generic.Instruction instruction4 = mULTIANEWARRAY2.copy();
    boolean b6 = instruction4.equals((java.lang.Object)10L);
    int i7 = instruction4.getLength();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY10 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = null;
    int i12 = mULTIANEWARRAY10.consumeStack(constantPoolGen11);
    mULTIANEWARRAY10.setIndex((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b15 = instruction4.equals((java.lang.Object)mULTIANEWARRAY10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test1073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1073"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getDimensions();
    short s6 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test1074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1074"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1075"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    java.lang.Class<?>[] cls_array4 = mULTIANEWARRAY2.getExceptions();
    int i5 = mULTIANEWARRAY2.getIndex();
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.InstructionComparator instructionComparator7 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator7);
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator7);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY15 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction16 = mULTIANEWARRAY15.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction16);

  }

  @Test
  public void test1076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1076"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);

  }

  @Test
  public void test1077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1077"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.String str6 = mULTIANEWARRAY2.toString(true);
    int i7 = mULTIANEWARRAY2.getIndex();
    java.lang.String str8 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)'#', (short)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    boolean b12 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str6.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str8.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1078"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = null;
    int i8 = mULTIANEWARRAY2.produceStack(constantPoolGen7);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1079"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test1080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1080"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    java.lang.Class<?>[] cls_array5 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY8 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i9 = mULTIANEWARRAY8.getIndex();
    org.apache.bcel.generic.Instruction instruction10 = mULTIANEWARRAY8.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = mULTIANEWARRAY2.equals((java.lang.Object)instruction10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction10);

  }

  @Test
  public void test1081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1081"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    short s5 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test1082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1082"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    mULTIANEWARRAY2.setIndex((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);

  }

  @Test
  public void test1083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1083"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b9 = mULTIANEWARRAY7.equals((java.lang.Object)(-1L));
    // The following exception was thrown during execution in test generation
    try {
    boolean b10 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test1084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1084"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator12 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    boolean b16 = mULTIANEWARRAY9.equals((java.lang.Object)instructionComparator12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test1085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1085"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    mULTIANEWARRAY2.setIndex((int)(byte)10);
    mULTIANEWARRAY2.setIndex((int)(short)10);
    java.lang.Class<?>[] cls_array9 = mULTIANEWARRAY2.getExceptions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY12 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction13 = mULTIANEWARRAY12.copy();
    mULTIANEWARRAY12.setIndex(100);
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction13);

  }

  @Test
  public void test1086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1086"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    short s5 = mULTIANEWARRAY2.getOpcode();
    short s6 = mULTIANEWARRAY2.getOpcode();
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((-1));
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s5 == (short)197);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s6 == (short)197);

  }

  @Test
  public void test1087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1087"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator5 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator5);
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instructionComparator5);
    java.lang.String str11 = mULTIANEWARRAY2.toString(true);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY14 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i15 = mULTIANEWARRAY14.getLength();
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str11.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test1088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1088"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    short s4 = mULTIANEWARRAY2.getDimensions();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b9 = mULTIANEWARRAY7.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator10 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator10);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator10);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator10);
    boolean b14 = mULTIANEWARRAY7.equals((java.lang.Object)instructionComparator10);
    java.lang.String str16 = mULTIANEWARRAY7.toString(true);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(s4 == (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str16.equals("multianewarray[197](4) 10 10 1"));

  }

  @Test
  public void test1089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1089"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    org.apache.bcel.generic.Instruction instruction5 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.Instruction instruction6 = mULTIANEWARRAY2.copy();
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b11 = mULTIANEWARRAY9.equals((java.lang.Object)0.0d);
    org.apache.bcel.generic.InstructionComparator instructionComparator12 = org.apache.bcel.generic.Instruction.getComparator();
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    org.apache.bcel.generic.Instruction.setComparator(instructionComparator12);
    boolean b16 = mULTIANEWARRAY9.equals((java.lang.Object)instructionComparator12);
    // The following exception was thrown during execution in test generation
    try {
    boolean b17 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(instructionComparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test1090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1090"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getIndex();
    java.lang.String str4 = mULTIANEWARRAY2.toString();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = null;
    int i6 = mULTIANEWARRAY2.consumeStack(constantPoolGen5);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY9 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i10 = mULTIANEWARRAY9.getLength();
    java.lang.Class<?>[] cls_array11 = mULTIANEWARRAY9.getExceptions();
    java.lang.Class<?>[] cls_array12 = mULTIANEWARRAY9.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "multianewarray[197](4) 10 10 1"+ "'", str4.equals("multianewarray[197](4) 10 10 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array12);

  }

  @Test
  public void test1091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1091"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    int i4 = mULTIANEWARRAY2.consumeStack(constantPoolGen3);
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY7 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.Instruction instruction8 = mULTIANEWARRAY7.copy();
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = mULTIANEWARRAY2.equals((java.lang.Object)instruction8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instruction8);

  }

  @Test
  public void test1092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1092"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    int i3 = mULTIANEWARRAY2.getLength();
    boolean b5 = mULTIANEWARRAY2.equals((java.lang.Object)(-1.0d));
    java.lang.Class<?>[] cls_array6 = mULTIANEWARRAY2.getExceptions();
    mULTIANEWARRAY2.setIndex((int)'#');
    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY11 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    int i13 = mULTIANEWARRAY11.consumeStack(constantPoolGen12);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    int i15 = mULTIANEWARRAY11.produceStack(constantPoolGen14);
    int i16 = mULTIANEWARRAY11.getIndex();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = null;
    int i18 = mULTIANEWARRAY11.consumeStack(constantPoolGen17);
    java.lang.Class<?>[] cls_array19 = mULTIANEWARRAY11.getExceptions();
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = mULTIANEWARRAY2.equals((java.lang.Object)mULTIANEWARRAY11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cls_array19);

  }

  @Test
  public void test1093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1093"); }

    org.apache.bcel.generic.MULTIANEWARRAY mULTIANEWARRAY2 = new org.apache.bcel.generic.MULTIANEWARRAY((int)(byte)10, (short)(byte)1);
    boolean b4 = mULTIANEWARRAY2.equals((java.lang.Object)(-1L));
    java.lang.String str6 = mULTIANEWARRAY2.toString(false);
    // The following exception was thrown during execution in test generation
    try {
    mULTIANEWARRAY2.setIndex((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.apache.bcel.generic.ClassGenException");
    } catch (org.apache.bcel.generic.ClassGenException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "multianewarray 10 10 1"+ "'", str6.equals("multianewarray 10 10 1"));

  }

}
