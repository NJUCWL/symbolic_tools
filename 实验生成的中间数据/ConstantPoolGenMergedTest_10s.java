
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ConstantPoolGenMergedTest_10s {

  public static boolean debug = false;

  @Test
  public void test0001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0001"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.MethodGen methodGen2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen1.lookupMethodref(methodGen2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0002"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.Constant constant5 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant((int)(byte)-1, constant5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0003"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0004"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.generic.MethodGen methodGen1 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i2 = constantPoolGen0.lookupInterfaceMethodref(methodGen1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0005"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0006"); }

    org.apache.bcel.classfile.ConstantPool constantPool0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constantPool0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0007"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);

  }

  @Test
  public void test0008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0008"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.generic.MethodGen methodGen1 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i2 = constantPoolGen0.addMethodref(methodGen1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0009"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0010"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.MethodGen methodGen2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen1.lookupInterfaceMethodref(methodGen2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0011"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0012"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i10 = constantPoolGen0.lookupMethodref("", "hi!", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0013"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen6.addFieldref("", "", "hi!");
    int i12 = constantPoolGen6.lookupUtf8("");
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.addConstant(constant5, constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0014"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen10.getConstant(0);
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addConstant(constant8, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);

  }

  @Test
  public void test0015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0015"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0016"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupUtf8("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0017"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0018"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0019"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0020"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen2.addMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);

  }

  @Test
  public void test0021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0021"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);

  }

  @Test
  public void test0022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0022"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0023"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant2 = null;
    org.apache.bcel.classfile.Constant[] constant_array3 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array3);
    int i6 = constantPoolGen4.addDouble((double)' ');
    int i9 = constantPoolGen4.lookupNameAndType("hi!", "hi!");
    int i11 = constantPoolGen4.addInteger(10);
    int i13 = constantPoolGen4.addString("hi!");
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addConstant(constant2, constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test0024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0024"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0025"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0026"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant3 = null;
    org.apache.bcel.classfile.Constant[] constant_array4 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array4);
    int i7 = constantPoolGen5.addLong((long)(byte)100);
    int i9 = constantPoolGen5.lookupDouble((double)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addConstant(constant3, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0027"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);

  }

  @Test
  public void test0028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0028"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen3.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);

  }

  @Test
  public void test0029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0029"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen2.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);

  }

  @Test
  public void test0030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0030"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.classfile.Constant[] constant_array5 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    int i8 = constantPoolGen6.addLong((long)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addConstant(constant4, constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0031"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);

  }

  @Test
  public void test0032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0032"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0033"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0034"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0035"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);

  }

  @Test
  public void test0036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0036"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.generic.ObjectType objectType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addClass(objectType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0037"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.addInteger(9);
    int i11 = constantPoolGen7.lookupDouble((double)100.0f);
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0038"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);

  }

  @Test
  public void test0039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0039"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0040"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0041"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);

  }

  @Test
  public void test0042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0042"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.generic.MethodGen methodGen1 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i2 = constantPoolGen0.lookupMethodref(methodGen1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0043"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.generic.ObjectType objectType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addClass(objectType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0044"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0045"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0046"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0047"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "hi!", "");
    int i19 = constantPoolGen1.lookupInterfaceMethodref("", "", "hi!");
    int i23 = constantPoolGen1.lookupMethodref("", "", "hi!");
    org.apache.bcel.classfile.Constant constant24 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen25 = new org.apache.bcel.generic.ConstantPoolGen();
    int i27 = constantPoolGen25.addInteger(9);
    int i29 = constantPoolGen25.lookupDouble((double)1.0f);
    // The following exception was thrown during execution in test generation
    try {
    int i30 = constantPoolGen1.addConstant(constant24, constantPoolGen25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));

  }

  @Test
  public void test0048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0048"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0049"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0050"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0051"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    int i6 = constantPoolGen1.addLong((long)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0052"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0053"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);

  }

  @Test
  public void test0054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0054"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0055"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.lookupInterfaceMethodref("", "", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(10, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0056"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0057"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0058"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen0.addMethodref(methodGen2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);

  }

  @Test
  public void test0059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0059"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0060"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.lookupLong(1L);
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0061"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant2 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen3.getSize();
    int i8 = constantPoolGen3.lookupInterfaceMethodref("", "", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addConstant(constant2, constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0062"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0063"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    java.lang.String str4 = constantPoolGen1.toString();
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));

  }

  @Test
  public void test0064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0064"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "hi!", "");
    int i17 = constantPoolGen1.lookupString("hi!");
    int i21 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0065"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0066"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.lookupLong((long)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0067"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen1.setConstant(3, constant13);
    int i18 = constantPoolGen1.lookupInterfaceMethodref("", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i21 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen22 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen1.addInterfaceMethodref(methodGen22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0068"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    int i13 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i14 = constantPoolGen1.getSize();
    int i16 = constantPoolGen1.lookupLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0069"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test0070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0070"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addDouble((double)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);

  }

  @Test
  public void test0071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0071"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test0072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0072"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    int i12 = constantPoolGen10.lookupLong((long)261);
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addConstant(constant8, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0073"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant3 = null;
    org.apache.bcel.classfile.Constant[] constant_array4 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array4);
    int i7 = constantPoolGen5.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen5.getFinalConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addConstant(constant3, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0074"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0075"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "hi!", "");
    int i19 = constantPoolGen1.lookupInterfaceMethodref("", "", "hi!");
    int i23 = constantPoolGen1.lookupMethodref("", "", "hi!");
    java.lang.String str24 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n"+ "'", str24.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n"));

  }

  @Test
  public void test0076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0076"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.addFloat((float)(short)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0077"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addInteger(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0078"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen1.addLong(100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0079"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    org.apache.bcel.generic.ArrayType arrayType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen0.addArrayClass(arrayType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);

  }

  @Test
  public void test0080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0080"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.lookupInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0081"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen1.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test0082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0082"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupClass("");
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0083"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addClass(objectType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);

  }

  @Test
  public void test0084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0084"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen5.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0085"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0086"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0087"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0088"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen1.lookupClass("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0089"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0090"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0091"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen3.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0092"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen1.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);

  }

  @Test
  public void test0093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0093"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addLong((long)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0094"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0095"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] { constant10 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    int i14 = constantPoolGen12.lookupDouble((double)(short)1);
    int i16 = constantPoolGen12.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen4.addConstant(constant9, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0096"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0097"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant[] constant_array8 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    int i11 = constantPoolGen9.addFloat((float)0L);
    int i13 = constantPoolGen9.lookupString("hi!");
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addConstant(constant7, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0098"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0099"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0100"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0101"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i8 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0102"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0103"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0104"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0105"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(1, constant7);
    int i11 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0106"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);

  }

  @Test
  public void test0107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0107"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant2 = null;
    org.apache.bcel.classfile.Constant[] constant_array3 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getConstantPool();
    int i7 = constantPoolGen4.addClass("");
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addConstant(constant2, constantPoolGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0108"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 257);

  }

  @Test
  public void test0109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0109"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0110"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0111"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0112"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupDouble(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0113"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0114"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.generic.ObjectType objectType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addClass(objectType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));

  }

  @Test
  public void test0115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0115"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0116"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0117"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0118"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.lookupLong(1L);
    int i11 = constantPoolGen1.lookupDouble((double)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0119"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0120"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0121"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen1.lookupDouble((double)10L);
    int i10 = constantPoolGen1.addInteger((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0122"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0123"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test0124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0124"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);

  }

  @Test
  public void test0125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0125"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addFloat((float)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0126"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    java.lang.String str4 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0127"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.lookupInteger(1);
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant[] constant_array8 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addConstant(constant7, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array8);

  }

  @Test
  public void test0128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0128"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen2.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));

  }

  @Test
  public void test0129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0129"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0130"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    java.lang.String str5 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));

  }

  @Test
  public void test0131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0131"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);

  }

  @Test
  public void test0132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0132"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i10 = constantPoolGen0.addLong(100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0133"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(-1));
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0134"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i14 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen1.addInterfaceMethodref(methodGen15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0135"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen9.addDouble((double)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0136"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen3.lookupLong((long)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0137"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);

  }

  @Test
  public void test0138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0138"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0139"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test0140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0140"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0141"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen1.addFloat((float)9);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0142"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen();
    int i6 = constantPoolGen5.getSize();
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addConstant(constant4, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0143"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.lookupMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0144"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0145"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant[] constant_array8 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    int i11 = constantPoolGen9.addFloat((float)0L);
    int i15 = constantPoolGen9.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen2.addConstant(constant7, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0146"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen2.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0147"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.lookupClass("");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0148"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.addClass("");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0149"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupLong((long)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0150"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    java.lang.String str4 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));

  }

  @Test
  public void test0151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0151"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i6 = constantPoolGen3.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0152"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0153"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n"));

  }

  @Test
  public void test0154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0154"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen2.setConstant(6, constant4);
    int i7 = constantPoolGen2.lookupLong((long)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0155"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    int i9 = constantPoolGen0.addFloat((float)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0156"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    int i12 = constantPoolGen10.addDouble((double)' ');
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.addConstant(constant8, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0157"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    java.lang.String str9 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n"));

  }

  @Test
  public void test0158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0158"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0159"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("hi!", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0160"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0161"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0162"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addInteger((-1));
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0163"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupLong((long)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0164"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.lookupInteger(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0165"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i9 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0166"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));

  }

  @Test
  public void test0167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0167"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i9 = constantPoolGen0.addInteger((int)(byte)10);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0168"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupLong((long)'a');
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0169"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0170"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i8 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0171"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);

  }

  @Test
  public void test0172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0172"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    int i10 = constantPoolGen1.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0173"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);

  }

  @Test
  public void test0174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0174"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0175"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen3.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0176"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0177"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "hi!", "");
    int i19 = constantPoolGen1.lookupInterfaceMethodref("", "", "hi!");
    int i23 = constantPoolGen1.lookupMethodref("", "", "hi!");
    org.apache.bcel.generic.MethodGen methodGen24 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i25 = constantPoolGen1.lookupMethodref(methodGen24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));

  }

  @Test
  public void test0178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0178"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    org.apache.bcel.classfile.Constant constant7 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant(257, constant7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0179"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.addClass("hi!");
    int i12 = constantPoolGen7.lookupNameAndType("hi!", "");
    int i16 = constantPoolGen7.addMethodref("", "hi!", "");
    int i18 = constantPoolGen7.lookupClass("hi!");
    int i20 = constantPoolGen7.lookupInteger((int)(byte)-1);
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0180"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0181"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i7 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test0182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0182"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)100);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);

  }

  @Test
  public void test0183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0183"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i7 = constantPoolGen0.addFloat((float)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0184"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0185"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    org.apache.bcel.classfile.Constant constant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant(256, constant9);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0186"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0187"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0188"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0189"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0190"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    java.lang.String str4 = constantPoolGen3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test0191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0191"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.addMethodref("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0192"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0193"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0194"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.addFloat((-1.0f));
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0195"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0196"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0197"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0198"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0199"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.lookupLong((long)'a');
    int i7 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0200"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupClass("");
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0201"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "hi!", "");
    int i17 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i19 = constantPoolGen1.lookupDouble((double)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0202"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i7 = constantPoolGen1.addDouble((double)0);
    int i9 = constantPoolGen1.addFloat((float)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0203"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0204"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0205"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0206"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0207"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0208"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addInteger((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0209"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0210"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen6.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0211"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);

  }

  @Test
  public void test0212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0212"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));

  }

  @Test
  public void test0213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0213"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);

  }

  @Test
  public void test0214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0214"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0215"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)(short)10, constant11);
    int i16 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0216"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addDouble((double)'#');
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0217"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen6.lookupInteger(12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0218"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    java.lang.String str12 = constantPoolGen11.toString();
    int i15 = constantPoolGen11.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen11.lookupInteger(0);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen1.addConstant(constant8, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0219"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test0220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0220"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0221"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.lookupDouble((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0222"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i13 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0223"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupClass("hi!");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0224"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addString("");
    int i9 = constantPoolGen5.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0225"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0226"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0227"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str11 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n"));

  }

  @Test
  public void test0228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0228"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen4.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);

  }

  @Test
  public void test0229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0229"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i7 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test0230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0230"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen0.addDouble((double)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0231"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0232"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0233"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0234"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addDouble((double)'#');
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen3.getConstant(256);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0235"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0236"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInteger((int)(byte)100);
    int i11 = constantPoolGen1.lookupLong((long)6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0237"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0238"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0239"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    int i15 = constantPoolGen13.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen13.getFinalConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.addConstant(constant11, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test0240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0240"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addLong((long)9);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen5.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0241"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i11 = constantPoolGen1.lookupFieldref("", "hi!", "hi!");
    int i13 = constantPoolGen1.addDouble(0.0d);
    int i15 = constantPoolGen1.lookupDouble((double)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0242"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test0243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0243"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0244"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen3.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0245"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.lookupInteger(1);
    int i10 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0246"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0247"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupFloat(0.0f);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0248"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0249"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0250"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addMethodref("", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0251"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen8.addDouble((double)(short)1);
    int i12 = constantPoolGen8.lookupInteger((-1));
    org.apache.bcel.classfile.Constant constant14 = constantPoolGen8.getConstant((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen2.addConstant(constant7, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant14);

  }

  @Test
  public void test0252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0252"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0253"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.lookupFloat((float)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0254"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant((int)(short)10);
    int i11 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0255"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test0256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0256"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0257"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(short)-1, constant8);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0258"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0259"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    int i8 = constantPoolGen1.addMethodref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0260"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen2.addFloat((float)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test0261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0261"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0262"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    org.apache.bcel.classfile.Constant constant6 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(byte)-1, constant6);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0263"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i10 = constantPoolGen0.getSize();
    int i12 = constantPoolGen0.lookupClass("");
    org.apache.bcel.classfile.Constant constant14 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(short)-1, constant14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0264"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.addFloat((float)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0265"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0266"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.addFloat((float)(short)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0267"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0268"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.lookupString("hi!");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0269"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    org.apache.bcel.generic.ObjectType objectType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addClass(objectType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);

  }

  @Test
  public void test0270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0270"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant(4, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0271"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0272"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i13 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0273"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i8 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0274"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addLong((long)11);
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0275"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0276"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.lookupFloat((float)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0277"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupLong(100L);
    int i6 = constantPoolGen2.lookupInteger((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0278"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i10 = constantPoolGen1.lookupLong((long)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0279"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i16 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0280"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0281"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant((int)(short)10);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0282"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("");
    java.lang.String str9 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i13 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0283"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0284"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test0285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0285"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0286"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0287"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0288"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupClass("");
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0289"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);

  }

  @Test
  public void test0290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0290"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ArrayType arrayType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen1.addArrayClass(arrayType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0291"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0292"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test0293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0293"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0294"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    int i7 = constantPoolGen1.addUtf8("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0295"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i13 = constantPoolGen0.lookupInteger((int)(byte)-1);
    int i15 = constantPoolGen0.lookupDouble((double)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0296"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant9);
    int i12 = constantPoolGen0.addFloat((float)262);
    int i14 = constantPoolGen0.addLong((long)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0297"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen1.addFloat((float)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 9);

  }

  @Test
  public void test0298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0298"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0299"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test0300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0300"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str8 = constantPoolGen0.toString();
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n"));

  }

  @Test
  public void test0301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0301"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0302"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);

  }

  @Test
  public void test0303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0303"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0304"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen2.setConstant(6, constant4);
    int i7 = constantPoolGen2.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i9 = constantPoolGen2.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0305"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n"));

  }

  @Test
  public void test0306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0306"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0307"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0308"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0309"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0310"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupFloat(0.0f);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0311"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0312"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0313"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0314"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger(256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0315"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i8 = constantPoolGen1.lookupInteger((int)(short)100);
    int i10 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test0316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0316"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen1.addMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test0317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0317"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0318"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen1.addFloat((float)9);
    org.apache.bcel.generic.ArrayType arrayType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addArrayClass(arrayType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0319"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    int i7 = constantPoolGen0.lookupDouble((double)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0320"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen2.getConstant((int)(short)100);
    int i10 = constantPoolGen2.lookupLong((long)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0321"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i13 = constantPoolGen1.lookupDouble((-1.0d));
    int i15 = constantPoolGen1.lookupInteger((int)(short)0);
    int i17 = constantPoolGen1.addDouble((double)(byte)1);
    int i19 = constantPoolGen1.addLong(100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 8);

  }

  @Test
  public void test0322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0322"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant((int)'4', constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0323"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(12, constant5);
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] { constant8 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    int i13 = constantPoolGen11.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen11.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen1.addConstant(constant7, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0324"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addFloat((float)0);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0325"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0326"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.lookupString("hi!");
    int i13 = constantPoolGen7.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i15 = constantPoolGen7.lookupInteger(0);
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen0.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0327"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i9 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);

  }

  @Test
  public void test0328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0328"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0329"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(4, constant9);
    int i12 = constantPoolGen0.lookupFloat((float)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0330"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    int i7 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0331"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0332"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen14.getConstantPool();
    int i17 = constantPoolGen14.addFloat(10.0f);
    int i19 = constantPoolGen14.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant21 = constantPoolGen14.getConstant((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen1.addConstant(constant13, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant21);

  }

  @Test
  public void test0333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0333"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen11.addInteger(9);
    int i15 = constantPoolGen11.lookupDouble((double)100.0f);
    int i19 = constantPoolGen11.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i23 = constantPoolGen11.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i25 = constantPoolGen11.lookupUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i26 = constantPoolGen0.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test0334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0334"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i11 = constantPoolGen1.lookupFieldref("", "hi!", "hi!");
    int i13 = constantPoolGen1.addInteger((int)'4');
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0335"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupDouble((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0336"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0337"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupFloat(0.0f);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0338"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str6 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str6.equals("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));

  }

  @Test
  public void test0339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0339"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i6 = constantPoolGen2.getSize();
    int i8 = constantPoolGen2.lookupString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0340"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen1.getConstant(262);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0341"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str11 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0342"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i12 = constantPoolGen0.lookupFloat((float)261);
    int i14 = constantPoolGen0.lookupInteger(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0343"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen5.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen5.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0344"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0345"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0346"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.classfile.Constant[] constant_array6 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen7.getConstantPool();
    int i10 = constantPoolGen7.addClass("");
    int i12 = constantPoolGen7.addInteger(0);
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addConstant(constant5, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0347"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i5 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0348"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.generic.ObjectType objectType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addClass(objectType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0349"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen5.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen5.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0350"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0351"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0352"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addInteger((-1));
    java.lang.String str6 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Integer[3](bytes = -1)\n"+ "'", str6.equals("1)CONSTANT_Integer[3](bytes = -1)\n"));

  }

  @Test
  public void test0353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0353"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.lookupFloat((float)10L);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0354"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addFloat((float)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0355"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupDouble((double)' ');
    int i10 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    int i15 = constantPoolGen13.addDouble((double)' ');
    int i18 = constantPoolGen13.lookupNameAndType("hi!", "hi!");
    int i20 = constantPoolGen13.addInteger(10);
    int i22 = constantPoolGen13.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool23 = constantPoolGen13.getConstantPool();
    int i26 = constantPoolGen13.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i27 = constantPoolGen2.addConstant(constant11, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));

  }

  @Test
  public void test0356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0356"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.generic.ObjectType objectType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addClass(objectType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0357"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i11 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0358"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupLong((long)3);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0359"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i10 = constantPoolGen3.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 257);

  }

  @Test
  public void test0360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0360"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0361"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen2.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0362"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0363"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0364"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen2.addFloat((float)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0365"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0366"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0367"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0368"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.addDouble((double)261);
    int i10 = constantPoolGen0.addLong((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test0369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0369"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);

  }

  @Test
  public void test0370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0370"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0371"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(1, constant7);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0372"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0373"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0374"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant((int)' ', constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0375"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger(10);
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0376"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str6 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str6.equals("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0377"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.addFloat((float)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0378"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    org.apache.bcel.generic.ArrayType arrayType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addArrayClass(arrayType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0379"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen3.addInteger((int)(short)-1);
    int i8 = constantPoolGen3.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);

  }

  @Test
  public void test0380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0380"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0381"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0382"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0383"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(short)10);
    int i7 = constantPoolGen0.addUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0384"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant[] constant_array8 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen9.getFinalConstantPool();
    int i12 = constantPoolGen9.lookupLong((long)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addConstant(constant7, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0385"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i13 = constantPoolGen0.lookupClass("hi!");
    int i17 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 11);

  }

  @Test
  public void test0386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0386"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addFloat((float)(byte)10);
    int i9 = constantPoolGen0.lookupLong((long)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0387"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));

  }

  @Test
  public void test0388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0388"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0389"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0390"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0391"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupString("");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0392"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i7 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0393"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    int i6 = constantPoolGen0.addFloat((float)2);
    int i8 = constantPoolGen0.addClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0394"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0395"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)12);
    int i11 = constantPoolGen1.addInteger((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0396"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i11 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Integer[3](bytes = 1)\n", "");
    int i13 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0397"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0398"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(byte)0);
    int i13 = constantPoolGen0.addNameAndType("hi!", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0399"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    int i10 = constantPoolGen0.addLong((long)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0400"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("hi!", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);

  }

  @Test
  public void test0401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0401"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i6 = constantPoolGen4.lookupLong(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0402"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i6 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupDouble((double)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0403"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i11 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Integer[3](bytes = 1)\n", "");
    int i15 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 11);

  }

  @Test
  public void test0404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0404"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0405"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test0406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0406"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen0.addInteger(14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0407"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0408"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i7 = constantPoolGen1.addDouble((double)0);
    int i9 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addInteger(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0409"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.lookupInteger(261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0410"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test0411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0411"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    java.lang.String str5 = constantPoolGen4.toString();
    int i9 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str5.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 261);

  }

  @Test
  public void test0412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0412"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0413"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupFloat(0.0f);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i9 = constantPoolGen1.addLong(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0414"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0415"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen1.lookupInteger((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0416"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0417"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0418"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0419"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.lookupDouble((double)0);
    int i10 = constantPoolGen5.lookupNameAndType("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen5.lookupDouble(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0420"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)'#', constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0421"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0422"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0423"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i15 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 12);

  }

  @Test
  public void test0424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0424"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(257);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0425"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0426"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen2.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0427"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.addInteger(0);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0428"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i10 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getConstantPool();
    int i15 = constantPoolGen2.addFieldref("1)CONSTANT_Integer[3](bytes = 35)\n", "", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 12);

  }

  @Test
  public void test0429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0429"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addInteger(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0430"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupFloat((float)(-1));
    int i15 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0431"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i5 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0432"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0433"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0434"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0435"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen6.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0436"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupString("");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    int i15 = constantPoolGen13.addDouble((double)' ');
    int i17 = constantPoolGen13.lookupDouble((double)1L);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant11, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0437"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i9 = constantPoolGen3.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0438"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0439"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    int i8 = constantPoolGen1.addFloat((float)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0440"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupLong((long)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0441"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupFloat((float)(short)-1);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0442"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0443"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addInteger((int)(short)-1);
    int i10 = constantPoolGen0.lookupLong((long)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0444"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0445"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0446"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addFloat((float)(short)-1);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0447"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0448"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0449"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);

  }

  @Test
  public void test0450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0450"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0451"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0452"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i9 = constantPoolGen1.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.lookupInteger(12);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0453"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0454"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0455"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i11 = constantPoolGen0.lookupFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0456"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addLong((long)9);
    int i9 = constantPoolGen5.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i11 = constantPoolGen5.addLong((long)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0457"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0458"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.generic.ObjectType objectType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen1.addClass(objectType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test0459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0459"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0460"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i6 = constantPoolGen0.lookupLong(0L);
    int i8 = constantPoolGen0.lookupLong((long)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0461"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0462"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i12 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0463"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0464"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.lookupDouble((double)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0465"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i6 = constantPoolGen2.getSize();
    int i8 = constantPoolGen2.lookupString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0466"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0467"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen9.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0468"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0469"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen3.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0470"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i4 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0471"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.addFloat((float)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test0472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0472"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0473"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0474"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(258, constant3);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);

  }

  @Test
  public void test0475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0475"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addDouble((double)'4');
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0476"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen1.lookupDouble((double)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0477"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i11 = constantPoolGen3.addNameAndType("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 258);

  }

  @Test
  public void test0478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0478"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger((int)(short)10);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0479"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.lookupInteger((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0480"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i13 = constantPoolGen1.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0481"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.addFloat((float)6);
    org.apache.bcel.classfile.Constant constant15 = null;
    constantPoolGen1.setConstant((int)(short)100, constant15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0482"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupInteger((int)(short)10);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(12, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0483"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant2 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addConstant(constant2, constantPoolGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));

  }

  @Test
  public void test0484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0484"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0485"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.lookupInteger(1);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0486"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen1.addFloat((float)9);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0487"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i15 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test0488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0488"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen1.getConstant(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);

  }

  @Test
  public void test0489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0489"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.lookupInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0490"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0491"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i12 = constantPoolGen0.addDouble((double)' ');
    int i14 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0492"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i12 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0493"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i8 = constantPoolGen1.addUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0494"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFloat((float)4);
    int i12 = constantPoolGen0.lookupLong((long)8);
    int i14 = constantPoolGen0.lookupFloat((float)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0495"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addDouble((double)(-1));
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0496"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0497"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i12 = constantPoolGen0.addDouble((double)' ');
    org.apache.bcel.generic.ObjectType objectType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addClass(objectType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0498"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0499"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "", "");
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0500"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen3.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0501() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0501"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen1.getConstant((int)(byte)10);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(8);
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0502() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0502"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0503() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0503"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen8.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant14 = constantPoolGen8.getConstant((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addConstant(constant7, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant14);

  }

  @Test
  public void test0504() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0504"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupLong(100L);
    int i5 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0505() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0505"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i8 = constantPoolGen0.lookupInteger(0);
    int i10 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i12 = constantPoolGen0.lookupLong((long)(byte)-1);
    int i14 = constantPoolGen0.lookupLong((long)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0506() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0506"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    java.lang.String str7 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupDouble((double)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0507() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0507"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addInteger(0);
    int i9 = constantPoolGen0.addUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0508() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0508"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addLong((long)256);
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    int i13 = constantPoolGen10.lookupNameAndType("", "");
    int i15 = constantPoolGen10.lookupInteger((int)' ');
    int i17 = constantPoolGen10.addDouble((double)10.0f);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant8, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test0509() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0509"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0510() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0510"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.generic.ObjectType objectType1 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i2 = constantPoolGen0.addClass(objectType1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test0511() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0511"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i8 = constantPoolGen4.lookupMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen4.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0512() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0512"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    org.apache.bcel.classfile.Constant constant6 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen2.setConstant(261, constant6);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0513() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0513"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.addLong((long)(byte)10);
    int i11 = constantPoolGen1.addDouble((double)(short)-1);
    int i13 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i16 = constantPoolGen1.addNameAndType("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 9);

  }

  @Test
  public void test0514() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0514"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0515() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0515"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0516() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0516"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0517() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0517"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0518() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0518"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addInteger((int)(byte)0);
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0519() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0519"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0520() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0520"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen1.getConstant(3);
    int i10 = constantPoolGen1.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0521() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0521"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupInteger((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0522() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0522"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0523() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0523"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i8 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen1.setConstant(1, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0524() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0524"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i4 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.classfile.Constant[] constant_array6 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array6);
    int i9 = constantPoolGen7.addDouble((double)' ');
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addConstant(constant5, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0525() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0525"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i8 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "");
    int i10 = constantPoolGen1.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0526() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0526"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen3.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0527() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0527"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addLong((long)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0528() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0528"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);

  }

  @Test
  public void test0529() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0529"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    java.lang.String str13 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n"+ "'", str13.equals("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n"));

  }

  @Test
  public void test0530() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0530"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupLong((long)258);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0531() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0531"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0532() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0532"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)(short)100);
    int i8 = constantPoolGen0.lookupFloat((float)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0533() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0533"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupLong((long)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0534() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0534"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(-1));
    int i6 = constantPoolGen1.getSize();
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0535() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0535"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupFloat((float)' ');
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0536() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0536"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0537() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0537"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupInteger(0);
    int i11 = constantPoolGen0.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0538() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0538"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0539() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0539"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i6 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0540() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0540"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i7 = constantPoolGen1.addFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0541() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0541"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    int i11 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);

  }

  @Test
  public void test0542() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0542"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 261);

  }

  @Test
  public void test0543() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0543"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0544() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0544"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0545() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0545"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0546() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0546"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0547() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0547"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    int i12 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0548() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0548"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0549() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0549"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);

  }

  @Test
  public void test0550() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0550"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("hi!", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen2.addNameAndType("hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen2.getConstant(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);

  }

  @Test
  public void test0551() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0551"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getConstantPool();
    int i9 = constantPoolGen2.lookupInteger((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0552() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0552"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "", "");
    int i13 = constantPoolGen0.addInterfaceMethodref("hi!", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 11);

  }

  @Test
  public void test0553() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0553"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i6 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen2.addLong((long)256);
    int i15 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0554() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0554"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant9);
    int i12 = constantPoolGen0.addFloat((float)262);
    int i14 = constantPoolGen0.addString("");
    int i16 = constantPoolGen0.addFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 7);

  }

  @Test
  public void test0555() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0555"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.lookupDouble((double)0);
    int i8 = constantPoolGen5.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 256);

  }

  @Test
  public void test0556() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0556"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i8 = constantPoolGen0.lookupDouble((double)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0557() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0557"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen3.addInteger((int)(short)-1);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);

  }

  @Test
  public void test0558() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0558"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    int i11 = constantPoolGen1.lookupDouble((double)9);
    org.apache.bcel.classfile.Constant constant12 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen13.getConstantPool();
    int i16 = constantPoolGen13.addLong((long)2);
    int i20 = constantPoolGen13.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen1.addConstant(constant12, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 8);

  }

  @Test
  public void test0559() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0559"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    int i10 = constantPoolGen1.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0560() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0560"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0561() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0561"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    java.lang.String str5 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str10 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"));

  }

  @Test
  public void test0562() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0562"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen();
    int i16 = constantPoolGen14.addInteger(9);
    java.lang.String str17 = constantPoolGen14.toString();
    int i19 = constantPoolGen14.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.addConstant(constant13, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str17.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0563() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0563"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0564() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0564"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(0, constant6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0565() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0565"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "hi!", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0566() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0566"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant[] constant_array8 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array8);
    int i11 = constantPoolGen9.lookupLong((long)10);
    int i13 = constantPoolGen9.addFloat((float)0);
    int i15 = constantPoolGen9.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i19 = constantPoolGen9.lookupMethodref("", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.addConstant(constant7, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0567() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0567"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i10 = constantPoolGen2.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.generic.ArrayType arrayType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen2.addArrayClass(arrayType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0568() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0568"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0569() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0569"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.addFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0570() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0570"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    int i9 = constantPoolGen2.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0571() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0571"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant6);
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0572() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0572"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(short)10);
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0573() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0573"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0574() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0574"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0575() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0575"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.addInteger((int)'4');
    int i12 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0576() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0576"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.addFloat((-1.0f));
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "hi!");
    int i17 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0577() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0577"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen1.getConstant(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);

  }

  @Test
  public void test0578() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0578"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addFloat((float)(short)-1);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0579() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0579"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0580() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0580"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.lookupFloat((float)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0581() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0581"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen3.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen9.addInteger((int)' ');
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen3.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0582() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0582"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);

  }

  @Test
  public void test0583() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0583"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("");
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i16 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0584() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0584"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen6.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0585() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0585"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupDouble((double)' ');
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0586() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0586"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.addNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0587() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0587"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i12 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i16 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0588() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0588"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    int i13 = constantPoolGen1.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0589() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0589"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0590() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0590"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 14);

  }

  @Test
  public void test0591() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0591"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen1.getConstant(258);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0592() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0592"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i9 = constantPoolGen1.lookupFieldref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0593() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0593"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupLong((long)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0594() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0594"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen1.setConstant(3, constant13);
    int i16 = constantPoolGen1.addInteger((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);

  }

  @Test
  public void test0595() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0595"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i17 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i19 = constantPoolGen0.addInteger(259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);

  }

  @Test
  public void test0596() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0596"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i10 = constantPoolGen1.addDouble((double)1L);
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    java.lang.String str15 = constantPoolGen14.toString();
    int i18 = constantPoolGen14.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i20 = constantPoolGen14.lookupInteger(0);
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen1.addConstant(constant11, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0597() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0597"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger((int)(short)100);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(0, constant9);
    org.apache.bcel.classfile.Constant constant12 = null;
    constantPoolGen0.setConstant((int)'4', constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0598() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0598"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.addInteger(0);
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i12 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0599() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0599"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!", "hi!");
    int i12 = constantPoolGen1.addUtf8("");
    int i14 = constantPoolGen1.addLong((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 7);

  }

  @Test
  public void test0600() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0600"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addLong((long)11);
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0601() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0601"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen8.getConstant((int)(short)1);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen8.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test0602() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0602"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.addFloat((float)(byte)-1);
    int i9 = constantPoolGen0.lookupDouble(10.0d);
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0603() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0603"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test0604() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0604"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0605() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0605"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    int i6 = constantPoolGen1.addDouble((double)5);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i11 = constantPoolGen1.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0606() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0606"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.lookupLong(1L);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0607() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0607"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 257);

  }

  @Test
  public void test0608() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0608"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(1, constant7);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant(1, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0609() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0609"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen5.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen5.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0610() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0610"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i14 = constantPoolGen0.lookupLong((long)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0611() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0611"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i4 = constantPoolGen1.getSize();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0612() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0612"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupLong((long)(byte)100);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0613() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0613"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupInteger((int)(byte)-1);
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0614() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0614"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i8 = constantPoolGen0.lookupLong((long)(byte)10);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0615() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0615"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("hi!", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen2.addNameAndType("hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test0616() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0616"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.lookupInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0617() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0617"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen0.lookupInteger(14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0618() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0618"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupLong(100L);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0619() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0619"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(7);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0620() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0620"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.lookupFloat((float)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0621() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0621"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0622() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0622"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen9.getFinalConstantPool();
    int i12 = constantPoolGen9.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen9.addInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);

  }

  @Test
  public void test0623() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0623"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i6 = constantPoolGen0.lookupInteger(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0624() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0624"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupInteger((int)(byte)-1);
    int i9 = constantPoolGen3.addLong((long)258);
    int i11 = constantPoolGen3.lookupFloat((float)(short)1);
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen3.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0625() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0625"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0626() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0626"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str4 = constantPoolGen3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test0627() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0627"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i5 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen2.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0628() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0628"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0629() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0629"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0630() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0630"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i9 = constantPoolGen0.addFloat((float)(-1));
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(4, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0631() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0631"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen3.addInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0632() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0632"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0633() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0633"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i7 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0634() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0634"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.lookupFloat((float)4);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0635() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0635"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupFloat((float)(-1));
    int i12 = constantPoolGen1.addDouble((double)(-1L));
    java.lang.String str13 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n"+ "'", str13.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n"));

  }

  @Test
  public void test0636() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0636"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addFloat((float)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0637() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0637"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("");
    java.lang.String str9 = constantPoolGen0.toString();
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i17 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen18 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i19 = constantPoolGen0.lookupMethodref(methodGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0638() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0638"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i14 = constantPoolGen1.lookupFloat((float)12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0639() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0639"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("hi!", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen2.addNameAndType("hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i15 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 13);

  }

  @Test
  public void test0640() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0640"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0641() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0641"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0642() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0642"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant((int)(byte)0, constant10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen2.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0643() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0643"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0644() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0644"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen1.lookupMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i15 = constantPoolGen1.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test0645() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0645"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0646() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0646"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0647() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0647"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0648() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0648"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0649() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0649"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen0.setConstant((int)(byte)100, constant5);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i13 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0650() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0650"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 11);

  }

  @Test
  public void test0651() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0651"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.addDouble((double)257);
    int i13 = constantPoolGen1.addFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0652() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0652"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0653() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0653"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.addFloat((float)(byte)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0654() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0654"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen5.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen5.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0655() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0655"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0656() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0656"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);

  }

  @Test
  public void test0657() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0657"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0658() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0658"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.lookupInteger(1);
    int i10 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "hi!");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0659() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0659"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0660() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0660"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.lookupString("hi!");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0661() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0661"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0662() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0662"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i13 = constantPoolGen3.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i15 = constantPoolGen3.addFloat((float)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test0663() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0663"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i10 = constantPoolGen3.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen3.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 257);

  }

  @Test
  public void test0664() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0664"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i12 = constantPoolGen0.lookupUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0665() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0665"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i14 = constantPoolGen10.addMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "hi!", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test0666() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0666"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i13 = constantPoolGen2.addFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0667() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0667"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.addInteger(9);
    int i11 = constantPoolGen7.lookupDouble((double)100.0f);
    int i13 = constantPoolGen7.addInteger((-1));
    int i15 = constantPoolGen7.lookupLong((long)10);
    int i17 = constantPoolGen7.lookupLong((long)8);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0668() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0668"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)'#');
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0669() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0669"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(short)0, constant8);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0670() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0670"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i8 = constantPoolGen1.lookupFloat((float)258);
    int i10 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test0671() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0671"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0672() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0672"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInteger((int)(byte)100);
    int i11 = constantPoolGen1.addString("");
    int i13 = constantPoolGen1.lookupDouble((double)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0673() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0673"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0674() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0674"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);

  }

  @Test
  public void test0675() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0675"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.addString("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0676() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0676"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupFloat((float)(short)-1);
    int i7 = constantPoolGen0.lookupFloat((float)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0677() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0677"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i19 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i21 = constantPoolGen1.addInteger(14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 13);

  }

  @Test
  public void test0678() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0678"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i7 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0679() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0679"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0680() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0680"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test0681() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0681"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.addFloat((float)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0682() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0682"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.classfile.Constant[] constant_array6 = new org.apache.bcel.classfile.Constant[] { constant5 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constant_array6);
    int i10 = constantPoolGen8.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addConstant(constant4, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0683() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0683"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0684() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0684"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.lookupFloat((float)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0685() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0685"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0686() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0686"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addInteger(256);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i15 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test0687() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0687"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i12 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0688() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0688"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.addInteger(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0689() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0689"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0690() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0690"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    org.apache.bcel.generic.ObjectType objectType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen0.addClass(objectType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);

  }

  @Test
  public void test0691() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0691"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupFloat((float)(-1L));
    int i9 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)(short)0, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0692() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0692"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("hi!", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i13 = constantPoolGen0.addMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);

  }

  @Test
  public void test0693() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0693"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    int i8 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0694() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0694"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.addInteger((int)(byte)1);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0695() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0695"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i8 = constantPoolGen1.lookupDouble((double)(-1));
    int i12 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0696() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0696"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i12 = constantPoolGen1.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "hi!", "");
    int i16 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i18 = constantPoolGen1.lookupLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0697() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0697"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addFloat((float)(short)-1);
    int i7 = constantPoolGen0.lookupLong((long)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0698() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0698"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0699() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0699"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    int i11 = constantPoolGen0.lookupInteger((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0700() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0700"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen1.lookupMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0701() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0701"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i9 = constantPoolGen1.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.lookupInteger(12);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0702() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0702"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i7 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(7, constant11);
    int i15 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0703() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0703"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupInteger(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0704() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0704"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i9 = constantPoolGen0.addInteger((int)(byte)10);
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen0.getConstant((int)(short)0);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);

  }

  @Test
  public void test0705() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0705"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i15 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0706() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0706"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "");
    int i14 = constantPoolGen6.addMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i16 = constantPoolGen6.addFloat(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 262);

  }

  @Test
  public void test0707() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0707"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.addDouble((double)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0708() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0708"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0709() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0709"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupLong((long)3);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0710() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0710"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getConstantPool();
    int i8 = constantPoolGen4.addNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0711() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0711"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0712() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0712"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i15 = constantPoolGen1.lookupClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0713() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0713"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    java.lang.String str7 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str7.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));

  }

  @Test
  public void test0714() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0714"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong(0L);
    int i10 = constantPoolGen0.lookupClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0715() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0715"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0716() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0716"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i10 = constantPoolGen4.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 261);

  }

  @Test
  public void test0717() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0717"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i7 = constantPoolGen0.lookupDouble((double)2);
    org.apache.bcel.classfile.Constant constant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(byte)-1, constant9);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0718() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0718"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0719() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0719"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant(1, constant7);
    int i10 = constantPoolGen1.addLong((long)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0720() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0720"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0721() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0721"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0722() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0722"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0723() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0723"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0724() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0724"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    java.lang.String str13 = constantPoolGen0.toString();
    int i14 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant16 = constantPoolGen0.getConstant(4);
    int i18 = constantPoolGen0.addFloat((float)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str13.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 3);

  }

  @Test
  public void test0725() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0725"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addDouble((double)100);
    int i8 = constantPoolGen0.addDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0726() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0726"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0727() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0727"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    int i14 = constantPoolGen1.lookupInteger((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0728() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0728"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addLong((long)256);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0729() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0729"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0730() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0730"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addInteger((int)(short)0);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0731() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0731"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0732() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0732"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addInteger(7);
    int i9 = constantPoolGen1.lookupClass("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0733() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0733"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0734() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0734"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0735() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0735"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i6 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0736() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0736"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addLong((long)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0737() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0737"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant(1, constant7);
    int i10 = constantPoolGen1.addInteger(256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0738() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0738"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0739() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0739"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);

  }

  @Test
  public void test0740() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0740"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0741() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0741"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0742() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0742"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test0743() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0743"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    int i8 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0744() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0744"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant((int)(byte)0, constant10);
    int i12 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0745() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0745"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i8 = constantPoolGen1.lookupFloat((float)258);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0746() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0746"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0747() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0747"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen1.lookupMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0748() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0748"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0749() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0749"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0750() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0750"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i3 = constantPoolGen2.getSize();
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen();
    int i6 = constantPoolGen5.getSize();
    int i8 = constantPoolGen5.lookupFloat((float)6);
    int i10 = constantPoolGen5.addFloat((float)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addConstant(constant4, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0751() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0751"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.addLong((-1L));
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0752() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0752"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.addDouble((double)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0753() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0753"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant((int)'a', constant10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0754() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0754"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(259, constant6);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0755() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0755"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen0.setConstant((int)'4', constant5);
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0756() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0756"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0757() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0757"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0758() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0758"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen1.lookupString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0759() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0759"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0760() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0760"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0761() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0761"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)12);
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0762() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0762"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i6 = constantPoolGen0.lookupLong(0L);
    int i8 = constantPoolGen0.addFloat((float)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0763() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0763"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0764() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0764"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0765() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0765"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    java.lang.String str10 = constantPoolGen2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n"));

  }

  @Test
  public void test0766() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0766"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen1.lookupLong((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0767() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0767"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0768() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0768"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i12 = constantPoolGen8.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 261);

  }

  @Test
  public void test0769() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0769"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0770() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0770"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.addClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i9 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0771() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0771"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0772() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0772"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0773() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0773"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0774() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0774"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    int i8 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0775() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0775"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0776() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0776"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupString("");
    int i13 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0777() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0777"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0778() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0778"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addFloat((float)(short)-1);
    int i11 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen3.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0779() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0779"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    int i10 = constantPoolGen0.addLong((long)(byte)0);
    int i14 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i16 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);

  }

  @Test
  public void test0780() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0780"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.lookupDouble(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0781() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0781"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0782() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0782"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.lookupInteger(257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0783() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0783"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i8 = constantPoolGen1.getSize();
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0784() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0784"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i8 = constantPoolGen1.lookupMethodref("", "hi!", "");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen1.setConstant(8, constant10);
    int i13 = constantPoolGen1.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0785() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0785"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen();
    int i7 = constantPoolGen5.lookupInteger(8);
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addConstant(constant4, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0786() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0786"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i8 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0787() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0787"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i13 = constantPoolGen0.lookupClass("hi!");
    int i15 = constantPoolGen0.addDouble((double)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0788() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0788"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addLong((long)(short)10);
    int i9 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0789() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0789"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i11 = constantPoolGen1.getSize();
    int i13 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant15 = null;
    constantPoolGen1.setConstant((int)(byte)10, constant15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test0790() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0790"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.lookupDouble((double)258);
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0791() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0791"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(-1));
    int i9 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0792() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0792"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)100);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 14);

  }

  @Test
  public void test0793() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0793"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i6 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0794() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0794"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i10 = constantPoolGen0.lookupFloat((float)7);
    org.apache.bcel.classfile.Constant constant12 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(262, constant12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0795() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0795"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i6 = constantPoolGen0.addFloat((float)261);
    int i8 = constantPoolGen0.addFloat((float)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0796() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0796"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant((int)(short)0, constant5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getConstantPool();
    int i9 = constantPoolGen1.addLong((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0797() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0797"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupInteger((int)(short)10);
    int i13 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0798() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0798"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0799() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0799"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addInteger((int)(short)100);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0800() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0800"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0801() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0801"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.addFloat((float)6);
    int i15 = constantPoolGen1.lookupLong(100L);
    int i19 = constantPoolGen1.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 7);

  }

  @Test
  public void test0802() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0802"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen6.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0803() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0803"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    int i11 = constantPoolGen1.addFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0804() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0804"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)10);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0805() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0805"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen6.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0806() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0806"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    int i8 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);

  }

  @Test
  public void test0807() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0807"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i9 = constantPoolGen0.addInteger(0);
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0808() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0808"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));

  }

  @Test
  public void test0809() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0809"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0810() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0810"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    java.lang.String str7 = constantPoolGen2.toString();
    int i11 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i13 = constantPoolGen2.addDouble((double)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test0811() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0811"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    int i8 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0812() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0812"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0813() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0813"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.lookupFloat((float)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0814() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0814"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);

  }

  @Test
  public void test0815() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0815"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("hi!", "", "");
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0816() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0816"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen5.getConstantPool();
    java.lang.String str9 = constantPoolGen5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str9.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));

  }

  @Test
  public void test0817() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0817"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    java.lang.String str4 = constantPoolGen2.toString();
    int i8 = constantPoolGen2.addFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0818() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0818"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen4.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0819() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0819"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str9 = constantPoolGen5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n"+ "'", str9.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n"));

  }

  @Test
  public void test0820() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0820"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0821() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0821"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen1.getConstant((int)(byte)10);
    int i12 = constantPoolGen1.addLong((long)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0822() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0822"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.addInterfaceMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    int i14 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen0.lookupMethodref(methodGen15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test0823() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0823"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0824() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0824"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant6);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen1.setConstant(1, constant9);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0825() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0825"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addFloat((float)0);
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0826() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0826"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    java.lang.String str8 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));

  }

  @Test
  public void test0827() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0827"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant12 = null;
    org.apache.bcel.classfile.Constant[] constant_array13 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array13);
    int i16 = constantPoolGen14.lookupLong((long)10);
    int i18 = constantPoolGen14.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen14.getConstantPool();
    int i21 = constantPoolGen14.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant12, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0828() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0828"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addClass("");
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen();
    int i8 = constantPoolGen6.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen6.getConstant((int)(byte)10);
    int i11 = constantPoolGen6.getSize();
    int i13 = constantPoolGen6.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen6.addFloat((-1.0f));
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen2.addConstant(constant5, constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);

  }

  @Test
  public void test0829() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0829"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i10 = constantPoolGen3.addUtf8("1)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.ArrayType arrayType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen3.addArrayClass(arrayType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 256);

  }

  @Test
  public void test0830() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0830"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i10 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0831() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0831"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen3.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);

  }

  @Test
  public void test0832() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0832"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen5.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen5.lookupInteger((int)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen5.getConstantPool();
    org.apache.bcel.classfile.Constant constant14 = null;
    constantPoolGen5.setConstant(262, constant14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0833() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0833"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0834() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0834"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.addLong((long)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0835() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0835"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    int i9 = constantPoolGen1.addUtf8("");
    int i11 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i15 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ArrayType arrayType16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.addArrayClass(arrayType16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0836() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0836"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(10);
    int i9 = constantPoolGen0.addLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0837() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0837"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen3.lookupMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0838() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0838"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n"));

  }

  @Test
  public void test0839() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0839"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.lookupLong((long)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0840() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0840"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test0841() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0841"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addLong((long)256);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0842() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0842"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addLong((long)(byte)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(1, constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0843() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0843"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.addLong((long)(short)1);
    int i8 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i12 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 14);

  }

  @Test
  public void test0844() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0844"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0845() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0845"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupInteger((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0846() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0846"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen2.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);

  }

  @Test
  public void test0847() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0847"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0848() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0848"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i9 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0849() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0849"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i9 = constantPoolGen5.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen5.addLong((long)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 262);

  }

  @Test
  public void test0850() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0850"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i10 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0851() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0851"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0852() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0852"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test0853() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0853"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger((int)(short)100);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(0, constant9);
    int i12 = constantPoolGen0.addFloat((float)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0854() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0854"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i10 = constantPoolGen8.addLong((long)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 256);

  }

  @Test
  public void test0855() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0855"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str7 = constantPoolGen2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n"));

  }

  @Test
  public void test0856() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0856"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    int i10 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.addLong((long)3);
    int i15 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0857() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0857"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i8 = constantPoolGen1.lookupMethodref("", "hi!", "");
    int i10 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0858() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0858"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);

  }

  @Test
  public void test0859() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0859"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0860() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0860"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(4, constant9);
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i17 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0861() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0861"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i8 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i10 = constantPoolGen0.addDouble((double)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0862() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0862"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    java.lang.String str5 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n"));

  }

  @Test
  public void test0863() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0863"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0864() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0864"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen3.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);

  }

  @Test
  public void test0865() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0865"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen12.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen12.getConstantPool();
    int i17 = constantPoolGen12.lookupNameAndType("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen3.addConstant(constant10, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0866() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0866"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i14 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i17 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);

  }

  @Test
  public void test0867() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0867"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addFloat(0.0f);
    int i6 = constantPoolGen0.addLong((long)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0868() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0868"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addInteger(7);
    int i9 = constantPoolGen1.addDouble((double)6);
    int i11 = constantPoolGen1.lookupLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0869() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0869"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen1.getConstant(256);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0870() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0870"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupLong((long)(byte)100);
    int i8 = constantPoolGen0.lookupDouble(10.0d);
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0871() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0871"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0872() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0872"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0873() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0873"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    java.lang.String str4 = constantPoolGen2.toString();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test0874() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0874"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupFloat((float)(short)100);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.addInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0875() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0875"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0876() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0876"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.addClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i10 = constantPoolGen2.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0877() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0877"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0878() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0878"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constantPool13);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = new org.apache.bcel.generic.ConstantPoolGen(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0879() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0879"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i6 = constantPoolGen1.getSize();
    int i8 = constantPoolGen1.lookupFloat((float)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0880() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0880"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupLong((long)263);
    int i7 = constantPoolGen2.getSize();
    int i11 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test0881() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0881"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0882() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0882"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i9 = constantPoolGen0.lookupInteger((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0883() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0883"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    int i7 = constantPoolGen1.lookupFloat((float)(short)100);
    int i9 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0884() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0884"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0885() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0885"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0886() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0886"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "hi!", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i16 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i20 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 18);

  }

  @Test
  public void test0887() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0887"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0888() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0888"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i5 = constantPoolGen0.addInteger((int)(byte)-1);
    int i8 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0889() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0889"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i3 = constantPoolGen0.addInterfaceMethodref(methodGen2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));

  }

  @Test
  public void test0890() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0890"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.addDouble((double)(short)10);
    int i9 = constantPoolGen2.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0891() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0891"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i8 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "");
    int i9 = constantPoolGen1.getSize();
    int i11 = constantPoolGen1.addLong((long)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0892() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0892"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    int i7 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0893() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0893"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0894() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0894"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.lookupDouble((double)(byte)1);
    int i8 = constantPoolGen0.lookupFloat((float)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0895() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0895"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i12 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i14 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);

  }

  @Test
  public void test0896() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0896"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupInteger((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0897() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0897"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    java.lang.String str5 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0898() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0898"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0899() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0899"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0900() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0900"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(short)10);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0901() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0901"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i15 = constantPoolGen0.addDouble((double)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test0902() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0902"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0903() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0903"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0904() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0904"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    java.lang.String str4 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 2)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 2)\n2)null\n"));

  }

  @Test
  public void test0905() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0905"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i10 = constantPoolGen1.addDouble((double)0L);
    int i12 = constantPoolGen1.addFloat((float)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0906() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0906"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFloat((float)4);
    int i12 = constantPoolGen0.lookupLong((long)8);
    int i13 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0907() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0907"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str6.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0908() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0908"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i7 = constantPoolGen1.lookupFloat((float)100);
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0909() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0909"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getConstantPool();
    int i16 = constantPoolGen0.lookupFieldref("hi!", "", "1)CONSTANT_Integer[3](bytes = 32)\n");
    int i20 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0910() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0910"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addLong((long)9);
    int i9 = constantPoolGen5.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i11 = constantPoolGen5.lookupLong((long)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0911() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0911"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.addFloat((float)10);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i15 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0912() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0912"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0913() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0913"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0914() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0914"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addString("");
    int i11 = constantPoolGen5.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    java.lang.String str12 = constantPoolGen5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"+ "'", str12.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"));

  }

  @Test
  public void test0915() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0915"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.addString("hi!");
    int i6 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0916() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0916"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0917() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0917"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0918() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0918"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i9 = constantPoolGen0.lookupDouble((double)100L);
    int i11 = constantPoolGen0.lookupDouble((double)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0919() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0919"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    java.lang.String str7 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.addLong((long)100);
    int i11 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0920() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0920"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i9 = constantPoolGen1.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.lookupInteger(12);
    int i12 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);

  }

  @Test
  public void test0921() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0921"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0922() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0922"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addClass(objectType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0923() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0923"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i5 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0924() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0924"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupInteger((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0925() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0925"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i9 = constantPoolGen1.addMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i13 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "", "");
    org.apache.bcel.classfile.Constant constant14 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = new org.apache.bcel.generic.ConstantPoolGen();
    int i17 = constantPoolGen15.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool18 = constantPoolGen15.getFinalConstantPool();
    int i20 = constantPoolGen15.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i22 = constantPoolGen15.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant24 = null;
    constantPoolGen15.setConstant((int)(byte)0, constant24);
    int i27 = constantPoolGen15.addFloat((float)262);
    // The following exception was thrown during execution in test generation
    try {
    int i28 = constantPoolGen1.addConstant(constant14, constantPoolGen15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);

  }

  @Test
  public void test0926() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0926"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i12 = constantPoolGen3.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0927() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0927"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0928() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0928"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addInteger(5);
    java.lang.String str7 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0929() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0929"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen3.addFloat((float)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0930() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0930"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.addFloat((float)(short)0);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0931() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0931"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)'#', constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0932() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0932"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i10 = constantPoolGen1.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0933() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0933"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    int i7 = constantPoolGen0.lookupDouble((double)(-1L));
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);

  }

  @Test
  public void test0934() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0934"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0935() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0935"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    int i5 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0936() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0936"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0937() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0937"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0938() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0938"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0939() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0939"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupDouble(1.0d);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0940() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0940"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.getSize();
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0941() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0941"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0942() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0942"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0943() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0943"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.classfile.Constant[] constant_array7 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constant_array7);
    int i10 = constantPoolGen8.addLong((long)(byte)100);
    int i12 = constantPoolGen8.addLong(100L);
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addConstant(constant6, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0944() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0944"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0945() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0945"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0946() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0946"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i8 = constantPoolGen1.lookupDouble((double)(-1));
    int i12 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0947() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0947"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    java.lang.String str4 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0948() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0948"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant(1, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0949() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0949"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(10, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test0950() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0950"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0951() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0951"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupDouble((double)1.0f);
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0952() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0952"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] { constant11 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    int i16 = constantPoolGen14.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i18 = constantPoolGen14.addFloat((float)(short)-1);
    int i22 = constantPoolGen14.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen0.addConstant(constant10, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 7);

  }

  @Test
  public void test0953() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0953"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i10 = constantPoolGen0.lookupLong((long)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0954() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0954"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.addDouble((double)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0955() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0955"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0956() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0956"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0957() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0957"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(-1));
    int i6 = constantPoolGen1.getSize();
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen1.lookupLong((long)14);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0958() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0958"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0959() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0959"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    java.lang.String str4 = constantPoolGen2.toString();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test0960() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0960"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.lookupInteger(259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0961() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0961"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.addLong((long)(short)1);
    int i8 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);

  }

  @Test
  public void test0962() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0962"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant9);
    int i12 = constantPoolGen0.addFloat((float)262);
    int i14 = constantPoolGen0.addString("");
    int i16 = constantPoolGen0.addFloat((float)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 7);

  }

  @Test
  public void test0963() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0963"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constantPool13);
    java.lang.String str15 = constantPoolGen14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str15.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));

  }

  @Test
  public void test0964() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0964"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i6 = constantPoolGen0.lookupDouble((double)4);
    int i10 = constantPoolGen0.lookupMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0965() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0965"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(byte)0);
    int i12 = constantPoolGen0.lookupDouble((double)(byte)1);
    int i14 = constantPoolGen0.addDouble((double)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0966() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0966"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(byte)0);
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0967() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0967"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0968() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0968"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addInteger((-1));
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0969() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0969"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupString("");
    int i15 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0970() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0970"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFloat((float)100L);
    int i8 = constantPoolGen1.lookupLong((long)256);
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0971() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0971"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)100);
    int i8 = constantPoolGen0.addLong((long)(short)10);
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0972() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0972"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupLong((long)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0973() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0973"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.getSize();
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0974() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0974"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    int i6 = constantPoolGen1.addDouble((double)5);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant((int)(short)10, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0975() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0975"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.addDouble(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0976() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0976"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupUtf8("");
    int i9 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0977() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0977"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0978() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0978"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.generic.ArrayType arrayType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addArrayClass(arrayType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0979() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0979"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen3.setConstant(259, constant9);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0980() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0980"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0981() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0981"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0982() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0982"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i9 = constantPoolGen0.addInteger(0);
    int i11 = constantPoolGen0.addDouble(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test0983() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0983"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0984() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0984"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupLong((long)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0985() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0985"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i15 = constantPoolGen11.addFieldref("", "", "hi!");
    int i17 = constantPoolGen11.lookupDouble((double)' ');
    java.lang.String str18 = constantPoolGen11.toString();
    java.lang.String str19 = constantPoolGen11.toString();
    int i21 = constantPoolGen11.addFloat((float)'#');
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str18.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str19.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);

  }

  @Test
  public void test0986() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0986"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant((int)(byte)10, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0987() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0987"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test0988() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0988"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i12 = constantPoolGen1.lookupFloat((float)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0989() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0989"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);

  }

  @Test
  public void test0990() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0990"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0991() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0991"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen5.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0992() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0992"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);

  }

  @Test
  public void test0993() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0993"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i3 = constantPoolGen2.getSize();
    int i5 = constantPoolGen2.addInteger((int)(short)10);
    int i7 = constantPoolGen2.addInteger(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);

  }

  @Test
  public void test0994() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0994"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i12 = constantPoolGen0.lookupNameAndType("", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i16 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 7);

  }

  @Test
  public void test0995() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0995"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test0996() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0996"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    int i13 = constantPoolGen0.addFieldref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0997() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0997"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0998() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0998"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i13 = constantPoolGen1.addFloat((float)6);
    int i15 = constantPoolGen1.addLong((long)(-1));
    int i17 = constantPoolGen1.lookupFloat(0.0f);
    org.apache.bcel.generic.ArrayType arrayType18 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i19 = constantPoolGen1.addArrayClass(arrayType18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0999() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test0999"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.addLong((long)5);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 16);

  }

  @Test
  public void test1000() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1000"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    int i6 = constantPoolGen0.lookupDouble((double)1);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1001"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen0.addFloat((float)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test1002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1002"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i12 = constantPoolGen1.getSize();
    org.apache.bcel.generic.ArrayType arrayType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addArrayClass(arrayType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test1003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1003"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addLong((long)11);
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1004"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen3.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen8.setConstant(16, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1005"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen5.lookupFloat((float)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1006"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1007"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.lookupMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1008"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i14 = constantPoolGen10.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i16 = constantPoolGen10.lookupInteger(258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1009"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test1010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1010"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.Constant constant2 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(256, constant2);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test1011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1011"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    int i11 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test1012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1012"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.addFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1013"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1014"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1015"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "");
    int i14 = constantPoolGen6.addMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i18 = constantPoolGen6.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "hi!", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 266);

  }

  @Test
  public void test1016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1016"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupString("hi!");
    int i15 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test1017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1017"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(6, constant5);
    int i8 = constantPoolGen1.addString("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1018"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i14 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str15 = constantPoolGen1.toString();
    int i17 = constantPoolGen1.lookupFloat((float)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n"+ "'", str15.equals("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test1019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1019"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1020"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1021"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.addLong(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test1022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1022"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.addInteger(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1023"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i6 = constantPoolGen0.lookupLong((long)(short)100);
    int i8 = constantPoolGen0.lookupLong((long)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1024"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1025"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i12 = constantPoolGen6.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 263);

  }

  @Test
  public void test1026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1026"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1027"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen7.getConstant((int)(byte)0);
    int i11 = constantPoolGen7.lookupInteger(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1028"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.addLong((long)(short)1);
    int i8 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 14);

  }

  @Test
  public void test1029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1029"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1030"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i6 = constantPoolGen0.addFloat((float)(byte)100);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1031"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1032"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupFloat((float)' ');
    int i8 = constantPoolGen0.addDouble((double)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test1033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1033"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i6 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test1034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1034"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1035"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1036"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1037"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1038"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1039"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen9.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    int i15 = constantPoolGen11.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test1040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1040"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1041"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i14 = constantPoolGen0.addLong((long)(byte)1);
    int i16 = constantPoolGen0.lookupFloat((float)' ');
    int i20 = constantPoolGen0.addMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 17);

  }

  @Test
  public void test1042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1042"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFloat((float)100L);
    int i10 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1043"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);

  }

  @Test
  public void test1044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1044"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addFloat(0.0f);
    int i9 = constantPoolGen0.addDouble((double)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test1045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1045"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(short)-1, constant11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1046"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i7 = constantPoolGen0.lookupDouble((double)2);
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1047"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.Constant constant2 = null;
    constantPoolGen0.setConstant(2, constant2);
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1048"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1049"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupLong((long)263);
    int i7 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.lookupLong((-1L));
    int i13 = constantPoolGen2.addFieldref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test1050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1050"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1051"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)'#', constant8);
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    int i14 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);

  }

  @Test
  public void test1052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1052"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i6 = constantPoolGen0.addDouble((double)(byte)1);
    int i8 = constantPoolGen0.addLong((long)3);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test1053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1053"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i12 = constantPoolGen8.lookupFieldref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1054"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(12, constant5);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i14 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test1055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1055"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i13 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen0.lookupLong(1L);
    org.apache.bcel.classfile.Constant constant16 = null;
    org.apache.bcel.classfile.Constant[] constant_array17 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen18 = new org.apache.bcel.generic.ConstantPoolGen(constant_array17);
    int i20 = constantPoolGen18.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant16, constantPoolGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test1056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1056"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addInteger((-1));
    int i9 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1057"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i14 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i16 = constantPoolGen0.addLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);

  }

  @Test
  public void test1058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1058"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test1059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1059"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test1060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1060"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.addString("");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1061"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInteger((int)(byte)100);
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i14 = constantPoolGen1.addLong((long)17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test1062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1062"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupLong(100L);
    int i6 = constantPoolGen2.lookupInteger((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1063"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1064"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 261);

  }

  @Test
  public void test1065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1065"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1066"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.addInterfaceMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    int i14 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i18 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i20 = constantPoolGen0.lookupLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test1067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1067"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addLong((long)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test1068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1068"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    int i8 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1069"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i17 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 20);

  }

  @Test
  public void test1070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1070"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i12 = constantPoolGen1.lookupInteger(5);
    int i16 = constantPoolGen1.addInterfaceMethodref("", "hi!", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);

  }

  @Test
  public void test1071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1071"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1072"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test1073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1073"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i10 = constantPoolGen8.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 257);

  }

  @Test
  public void test1074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1074"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInteger((int)(byte)100);
    int i11 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1075"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(3, constant4);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1076"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant(100, constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test1077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1077"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    java.lang.String str5 = constantPoolGen0.toString();
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test1078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1078"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1079"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupDouble((double)262);
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1080"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i7 = constantPoolGen1.lookupFloat((float)100);
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen9.getSize();
    int i13 = constantPoolGen9.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen9.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test1081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1081"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i13 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test1082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1082"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i10 = constantPoolGen8.lookupInteger((int)' ');
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen8.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1083"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1084"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test1085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1085"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addFloat((float)1L);
    int i6 = constantPoolGen0.addLong((long)259);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1086"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant((int)'#', constant11);
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addConstant(constant13, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1087"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.lookupDouble((double)0);
    int i9 = constantPoolGen5.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i11 = constantPoolGen5.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 256);

  }

  @Test
  public void test1088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1088"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen1.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test1089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1089"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i9 = constantPoolGen0.lookupFloat((float)15);
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1090"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen9.addInteger((int)' ');
    int i13 = constantPoolGen9.lookupInteger((int)(short)0);
    int i15 = constantPoolGen9.addString("");
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen7.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);

  }

  @Test
  public void test1091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1091"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addInteger((int)(byte)0);
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test1092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1092"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addDouble((double)(byte)10);
    int i11 = constantPoolGen1.addInteger((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test1093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1093"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test1094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1094"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1095"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(7);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1096"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.addInteger((int)'4');
    java.lang.String str12 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n"+ "'", str12.equals("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n"));

  }

  @Test
  public void test1097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1097"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i13 = constantPoolGen0.addFloat((float)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test1098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1098"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i12 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i14 = constantPoolGen1.addUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 7);

  }

  @Test
  public void test1099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1099"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.addFloat(10.0f);
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test1100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1100"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.lookupLong((long)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1101"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.addFloat((float)8);
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen11.lookupString("hi!");
    int i15 = constantPoolGen11.lookupLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen11.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen0.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test1102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1102"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addInteger(14);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test1103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1103"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen5.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen5.lookupInteger((int)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen5.getConstantPool();
    int i14 = constantPoolGen5.lookupDouble((double)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1104"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen0.setConstant((int)(byte)100, constant5);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen();
    int i14 = constantPoolGen12.addLong((long)(short)1);
    int i16 = constantPoolGen12.addFloat((float)(byte)-1);
    int i20 = constantPoolGen12.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant11, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 9);

  }

  @Test
  public void test1105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1105"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen0.getConstant(266);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1106"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1107"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    int i7 = constantPoolGen1.lookupFloat((float)(short)100);
    int i9 = constantPoolGen1.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1108"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i12 = constantPoolGen0.addInteger(1);
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1109"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen2.setConstant(6, constant4);
    int i7 = constantPoolGen2.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen2.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test1110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1110"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1111"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i10 = constantPoolGen2.lookupFloat((float)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1112"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1113"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i10 = constantPoolGen5.addMethodref("", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test1114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1114"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1115"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    java.lang.String str7 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test1116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1116"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(1, constant7);
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1117"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)12);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ArrayType arrayType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addArrayClass(arrayType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1118"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i9 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1119"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i8 = constantPoolGen4.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen4.lookupLong((long)266);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1120"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.lookupInteger((int)(byte)-1);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    int i12 = constantPoolGen0.lookupNameAndType("", "");
    int i14 = constantPoolGen0.lookupDouble((double)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1121"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test1122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1122"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test1123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1123"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 35)\n", "", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1124"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1125"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.addFloat((float)(byte)-1);
    int i8 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i10 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test1126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1126"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i6 = constantPoolGen0.addFloat((float)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1127"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i14 = constantPoolGen10.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i16 = constantPoolGen10.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1128"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1129"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    int i11 = constantPoolGen9.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i14 = constantPoolGen9.addNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 259);

  }

  @Test
  public void test1130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1130"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen7.getConstant((int)(byte)0);
    int i12 = constantPoolGen7.lookupNameAndType("hi!", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1131"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i12 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant14 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen2.setConstant(259, constant14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1132"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i11 = constantPoolGen3.addUtf8("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test1133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1133"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i11 = constantPoolGen1.lookupFieldref("", "hi!", "hi!");
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1134"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1135"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test1136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1136"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("hi!", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i7 = constantPoolGen0.lookupLong((long)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1137"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i6 = constantPoolGen2.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1138"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen1.lookupMethodref("hi!", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1139"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i8 = constantPoolGen0.addFloat((float)(byte)-1);
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1140"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i12 = constantPoolGen8.lookupMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1141"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen3.getConstant(14);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test1142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1142"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1143"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFloat((float)4);
    int i12 = constantPoolGen0.addFloat((float)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test1144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1144"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test1145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1145"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(byte)0);
    int i14 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen0.setConstant((int)(short)0, constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1146"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    int i11 = constantPoolGen1.addClass("");
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen1.setConstant(15, constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test1147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1147"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i8 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test1148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1148"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addFloat((float)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test1149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1149"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.lookupDouble((double)(byte)0);
    int i10 = constantPoolGen2.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test1150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1150"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1151"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger((int)'4');
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test1152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1152"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addString("");
    int i15 = constantPoolGen0.lookupFloat((float)266);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1153"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i14 = constantPoolGen10.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1154"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.lookupLong((long)'4');
    int i14 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1155"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test1156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1156"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addFloat((float)(byte)1);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1157"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupInteger((int)(byte)-1);
    int i8 = constantPoolGen3.getSize();
    int i10 = constantPoolGen3.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1158"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addDouble(0.0d);
    int i6 = constantPoolGen0.addLong((long)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test1159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1159"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i6 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test1160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1160"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1161"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.addUtf8("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test1162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1162"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    org.apache.bcel.classfile.Constant constant10 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((-1), constant10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1163"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen1.lookupInteger(259);
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.addInteger(16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test1164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1164"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));

  }

  @Test
  public void test1165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1165"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addString("");
    int i15 = constantPoolGen0.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1166"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i10 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getConstantPool();
    int i15 = constantPoolGen2.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i17 = constantPoolGen2.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 16);

  }

  @Test
  public void test1167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1167"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i13 = constantPoolGen1.lookupDouble((-1.0d));
    int i15 = constantPoolGen1.lookupInteger((int)(short)0);
    int i17 = constantPoolGen1.addFloat((float)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);

  }

  @Test
  public void test1168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1168"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addDouble((double)'#');
    int i13 = constantPoolGen3.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1169"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    java.lang.String str7 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.lookupLong((long)8);
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen2.setConstant(7, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1170"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i7 = constantPoolGen1.lookupFloat((float)100);
    int i11 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test1171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1171"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.lookupInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupFloat((float)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1172"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    int i16 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1173"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong((long)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 32)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1174"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1175"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)12);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1176"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1177"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(262, constant4);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test1178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1178"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addFloat((float)(short)-1);
    int i7 = constantPoolGen0.addInteger(6);
    int i11 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test1179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1179"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1180"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1181"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    int i10 = constantPoolGen0.addLong((long)(byte)0);
    int i14 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i16 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);

  }

  @Test
  public void test1182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1182"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getFinalConstantPool();
    int i9 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen2.lookupLong((long)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1183"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addInteger((int)(byte)0);
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1184"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(3, constant4);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen0.addLong((long)(byte)-1);
    int i12 = constantPoolGen0.getSize();
    int i14 = constantPoolGen0.addClass("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test1185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1185"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test1186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1186"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1187"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupDouble((double)' ');
    int i10 = constantPoolGen2.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test1188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1188"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test1189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1189"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1190"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen1.getConstant((int)(byte)10);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(8);
    java.lang.String str8 = constantPoolGen1.toString();
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen10.getSize();
    int i13 = constantPoolGen10.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i15 = constantPoolGen10.addInteger((int)'#');
    int i17 = constantPoolGen10.addInteger(0);
    int i19 = constantPoolGen10.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i21 = constantPoolGen10.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen1.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test1191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1191"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test1192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1192"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("");
    java.lang.String str9 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1193"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i14 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i17 = constantPoolGen1.addNameAndType("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);

  }

  @Test
  public void test1194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1194"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getConstantPool();
    int i9 = constantPoolGen4.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1195"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);

  }

  @Test
  public void test1196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1196"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test1197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1197"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test1198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1198"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(10);
    int i6 = constantPoolGen0.addFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test1199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1199"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test1200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1200"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i6 = constantPoolGen0.addFloat((float)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1201"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen10.addInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test1202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1202"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    java.lang.String str5 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test1203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1203"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant((int)(byte)0, constant10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen2.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test1204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1204"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i10 = constantPoolGen4.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen4.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 264);

  }

  @Test
  public void test1205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1205"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test1206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1206"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1207"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addMethodref("", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);

  }

  @Test
  public void test1208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1208"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1209"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen2.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1210"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i12 = constantPoolGen3.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen3.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test1211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1211"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen1.addFloat((float)9);
    int i14 = constantPoolGen1.addFloat((float)0);
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen1.setConstant(3, constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);

  }

  @Test
  public void test1212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1212"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addLong((long)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test1213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1213"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.addLong((long)(byte)10);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen0.addFloat((float)12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test1214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1214"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str6 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.lookupFloat((float)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1215"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen3.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 12);

  }

  @Test
  public void test1216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1216"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i6 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen1.addFloat((float)(-1));
    int i10 = constantPoolGen1.lookupInteger((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1217"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addInteger(7);
    int i9 = constantPoolGen1.addDouble((double)6);
    int i12 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1218"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen0.getConstant(262);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1219"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant(12);
    org.apache.bcel.classfile.Constant constant12 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(258, constant12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test1220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1220"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant(12);
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test1221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1221"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i11 = constantPoolGen1.getSize();
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.lookupInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test1222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1222"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen4.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1223"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.addFloat((-1.0f));
    int i12 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i14 = constantPoolGen1.lookupFloat((float)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1224"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);

  }

  @Test
  public void test1225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1225"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1226"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addFloat((float)4);
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i15 = constantPoolGen0.addDouble((double)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test1227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1227"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.lookupInteger((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1228"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i5 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1229"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test1230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1230"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1231"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i11 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test1232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1232"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupDouble((double)11);
    org.apache.bcel.classfile.Constant constant10 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(256, constant10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1233"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1234"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i13 = constantPoolGen1.addLong((long)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);

  }

  @Test
  public void test1235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1235"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant(1, constant8);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1236"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1237"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test1238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1238"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test1239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1239"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupFloat((float)(-1L));
    int i11 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1240"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addFloat((float)(short)-1);
    int i7 = constantPoolGen0.addInteger(6);
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i13 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.lookupInterfaceMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test1241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1241"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    java.lang.String str6 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test1242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1242"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1243"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test1244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1244"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addInteger((int)(short)-1);
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test1245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1245"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen0.addLong((long)17);
    int i11 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i14 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test1246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1246"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i5 = constantPoolGen0.lookupDouble((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1247"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i13 = constantPoolGen0.lookupClass("hi!");
    org.apache.bcel.generic.ObjectType objectType14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addClass(objectType14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test1248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1248"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    java.lang.String str6 = constantPoolGen5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str6.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));

  }

  @Test
  public void test1249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1249"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong(0L);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test1250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1250"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    int i11 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test1251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1251"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i6 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1252"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addConstant(constant11, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1253"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addLong(0L);
    int i11 = constantPoolGen3.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1254"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.lookupFloat((float)(-1));
    int i11 = constantPoolGen2.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test1255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1255"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.addInteger(6);
    int i11 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1256"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1257"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1258"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    int i6 = constantPoolGen0.addInteger(14);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1259"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);

  }

  @Test
  public void test1260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1260"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1261"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupDouble((double)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1262"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i9 = constantPoolGen0.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1263"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i5 = constantPoolGen4.getSize();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen4.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test1264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1264"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i4 = constantPoolGen0.addFloat((float)259);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test1265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1265"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant15 = constantPoolGen0.getConstant(259);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1266"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i6 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"));

  }

  @Test
  public void test1267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1267"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen4.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1268"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i12 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "");
    int i16 = constantPoolGen1.addFieldref("", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i18 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 16);

  }

  @Test
  public void test1269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1269"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.lookupFloat((float)1);
    int i7 = constantPoolGen0.lookupUtf8("");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1270"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1271"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    int i9 = constantPoolGen1.addUtf8("");
    int i11 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i15 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.lookupInterfaceMethodref(methodGen16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1272"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i10 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getConstantPool();
    int i13 = constantPoolGen2.lookupLong((long)12);
    int i15 = constantPoolGen2.addFloat(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 9);

  }

  @Test
  public void test1273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1273"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i7 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1274"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen3.addDouble(0.0d);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen3.getConstant(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test1275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1275"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.lookupDouble((double)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1276"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i7 = constantPoolGen2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1277"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen1.lookupFloat((float)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1278"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1279"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i11 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1280"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i7 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i13 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 14);

  }

  @Test
  public void test1281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1281"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    int i8 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1282"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addInteger((int)(byte)0);
    int i9 = constantPoolGen0.addUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test1283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1283"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i7 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test1284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1284"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test1285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1285"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test1286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1286"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1287"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen3.lookupInteger((-1));
    int i11 = constantPoolGen3.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test1288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1288"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i14 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen1.setConstant(18, constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test1289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1289"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);

  }

  @Test
  public void test1290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1290"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupLong((long)100);
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i18 = constantPoolGen1.lookupInteger(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test1291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1291"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFloat((float)100L);
    int i10 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen1.addFloat((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test1292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1292"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test1293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1293"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i10 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test1294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1294"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.lookupDouble((double)0);
    int i11 = constantPoolGen5.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    int i12 = constantPoolGen5.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 256);

  }

  @Test
  public void test1295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1295"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addDouble((double)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);

  }

  @Test
  public void test1296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1296"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "");
    int i14 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 12);

  }

  @Test
  public void test1297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1297"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    java.lang.String str5 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 1)\n"));

  }

  @Test
  public void test1298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1298"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i6 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i11 = constantPoolGen2.lookupUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen2.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test1299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1299"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.lookupInteger(0);
    int i10 = constantPoolGen2.lookupUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1300"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    int i7 = constantPoolGen1.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1301"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    int i6 = constantPoolGen1.addDouble((double)5);
    int i8 = constantPoolGen1.addDouble((double)(-1));
    int i12 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1302"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupDouble((double)' ');
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1303"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1304"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.lookupMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test1305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1305"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i8 = constantPoolGen1.addDouble((double)1L);
    int i10 = constantPoolGen1.addFloat((float)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test1306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1306"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    int i13 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i17 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.Constant constant19 = null;
    constantPoolGen1.setConstant((int)(short)0, constant19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test1307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1307"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test1308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1308"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen3.setConstant(9, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);

  }

  @Test
  public void test1309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1309"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupFloat((float)(-1L));
    int i9 = constantPoolGen0.addLong((long)259);
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test1310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1310"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.lookupInteger((int)(short)1);
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i12 = constantPoolGen0.addFloat((float)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test1311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1311"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen2.setConstant(6, constant4);
    int i9 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!", "hi!");
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen2.getConstant((int)' ');
    int i14 = constantPoolGen2.addNameAndType("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test1312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1312"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupDouble((double)15);
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1313"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.addDouble((double)261);
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test1314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1314"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test1315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1315"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    int i16 = constantPoolGen12.lookupMethodref("hi!", "", "");
    int i18 = constantPoolGen12.lookupString("");
    int i20 = constantPoolGen12.addLong((long)10);
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant10, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test1316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1316"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1317"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    int i11 = constantPoolGen0.addDouble((double)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test1318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1318"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    int i8 = constantPoolGen1.lookupDouble((double)266);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1319"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1320"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupDouble((double)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1321"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addLong((long)11);
    org.apache.bcel.generic.ObjectType objectType14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addClass(objectType14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test1322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1322"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test1323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1323"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.lookupFloat((float)2);
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen12.getConstantPool();
    int i15 = constantPoolGen12.addFloat(10.0f);
    int i19 = constantPoolGen12.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.addConstant(constant11, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test1324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1324"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    java.lang.String str7 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.lookupLong((long)8);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.lookupMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1325"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.lookupInteger(1);
    int i10 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "hi!");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.classfile.Constant[] constant_array12 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array12);
    int i15 = constantPoolGen13.addDouble((double)' ');
    int i17 = constantPoolGen13.lookupDouble((double)1L);
    int i19 = constantPoolGen13.addInteger(0);
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.addConstant(constant11, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);

  }

  @Test
  public void test1326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1326"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen11.addInteger(9);
    int i15 = constantPoolGen11.lookupDouble((double)100.0f);
    int i17 = constantPoolGen11.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool18 = constantPoolGen11.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen19 = new org.apache.bcel.generic.ConstantPoolGen(constantPool18);
    org.apache.bcel.classfile.ConstantPool constantPool20 = constantPoolGen19.getFinalConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant10, constantPoolGen19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool20);

  }

  @Test
  public void test1327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1327"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.Constant constant2 = null;
    constantPoolGen0.setConstant(2, constant2);
    int i5 = constantPoolGen0.addDouble((double)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test1328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1328"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(4, constant9);
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i17 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);

  }

  @Test
  public void test1329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1329"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1330"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen1.lookupUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test1331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1331"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)100);
    int i8 = constantPoolGen0.addLong((long)(short)10);
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 16);

  }

  @Test
  public void test1332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1332"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i14 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i16 = constantPoolGen1.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i18 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test1333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1333"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i10 = constantPoolGen1.lookupDouble((double)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1334"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addFloat((float)(byte)10);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1335"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1336"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test1337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1337"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong(0L);
    int i7 = constantPoolGen0.addDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test1338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1338"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen3.addDouble((double)256);
    int i10 = constantPoolGen3.lookupNameAndType("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1339"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test1340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1340"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupLong((long)(short)10);
    int i8 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1341"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen1.getConstant(5);
    int i14 = constantPoolGen1.addLong((long)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test1342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1342"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i6 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1343"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupLong((long)258);
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] { constant8 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen11.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constantPool12);
    int i15 = constantPoolGen13.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen13.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen0.addConstant(constant7, constantPoolGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test1344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1344"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    org.apache.bcel.classfile.Constant constant3 = null;
    org.apache.bcel.classfile.Constant[] constant_array4 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array4);
    int i7 = constantPoolGen5.addDouble((double)' ');
    int i11 = constantPoolGen5.lookupMethodref("hi!", "", "");
    int i13 = constantPoolGen5.lookupDouble((double)(short)1);
    int i15 = constantPoolGen5.lookupLong(100L);
    int i19 = constantPoolGen5.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen2.addConstant(constant3, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 8);

  }

  @Test
  public void test1345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1345"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong((long)(short)10);
    int i11 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.classfile.Constant constant12 = null;
    org.apache.bcel.classfile.Constant[] constant_array13 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array13);
    int i18 = constantPoolGen14.addInterfaceMethodref("", "hi!", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen14.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool20 = constantPoolGen14.getFinalConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant12, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool20);

  }

  @Test
  public void test1346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1346"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen5.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 261);

  }

  @Test
  public void test1347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1347"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.generic.ObjectType objectType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addClass(objectType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1348"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1349"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addLong((long)4);
    int i9 = constantPoolGen1.lookupDouble((double)1.0f);
    int i13 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1350"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1351"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupInteger(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1352"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen5.setConstant(262, constant7);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen5.setConstant(4, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1353"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addLong((long)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(259);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test1354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1354"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen6.lookupDouble((double)257);
    java.lang.String str9 = constantPoolGen6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n"));

  }

  @Test
  public void test1355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1355"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupFloat((float)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1356"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1357"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i14 = constantPoolGen2.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i16 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1358"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "");
    int i14 = constantPoolGen6.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1359"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger(18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test1360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1360"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    java.lang.String str11 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n"+ "'", str11.equals("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n"));

  }

  @Test
  public void test1361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1361"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getConstantPool();
    int i7 = constantPoolGen4.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1362"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    int i7 = constantPoolGen0.lookupDouble((double)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1363"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1364"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1365"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i10 = constantPoolGen3.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1366"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("");
    int i10 = constantPoolGen6.lookupDouble((double)2);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen6.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1367"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"));

  }

  @Test
  public void test1368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1368"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    int i8 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1369"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1370"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i14 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i16 = constantPoolGen1.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    org.apache.bcel.generic.MethodGen methodGen17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen1.lookupInterfaceMethodref(methodGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1371"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str6 = constantPoolGen0.toString();
    java.lang.String str7 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str6.equals("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str7.equals("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));

  }

  @Test
  public void test1372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1372"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i9 = constantPoolGen3.addMethodref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i13 = constantPoolGen3.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "hi!", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i15 = constantPoolGen3.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1373"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1374"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1375"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger((int)(short)10);
    int i10 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i14 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 14);

  }

  @Test
  public void test1376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1376"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.addFloat((float)8);
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(20, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test1377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1377"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    java.lang.String str6 = constantPoolGen1.toString();
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Long[5](bytes = 10)\n2)null\n"+ "'", str6.equals("1)CONSTANT_Long[5](bytes = 10)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1378"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupClass("");
    int i7 = constantPoolGen1.addClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1379"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    int i10 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i12 = constantPoolGen1.lookupDouble((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1380"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupLong((long)17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1381"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1382"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen10.addFloat((float)(-1L));
    int i14 = constantPoolGen10.lookupFloat((float)0);
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1383"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1384"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test1385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1385"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupDouble((double)14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1386"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test1387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1387"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupLong(10L);
    int i9 = constantPoolGen0.addUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test1388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1388"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1389"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    int i6 = constantPoolGen1.addFloat((float)6);
    int i8 = constantPoolGen1.addLong((long)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1390"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1391"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i10 = constantPoolGen1.addDouble((double)1L);
    int i12 = constantPoolGen1.lookupInteger(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1392"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen9.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i14 = constantPoolGen9.addLong(0L);
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test1393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1393"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen5.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen11.addInteger(9);
    int i15 = constantPoolGen11.lookupDouble((double)100.0f);
    int i17 = constantPoolGen11.addInteger((-1));
    int i21 = constantPoolGen11.lookupMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen5.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test1394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1394"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i7 = constantPoolGen1.getSize();
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test1395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1395"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i11 = constantPoolGen1.addFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 11);

  }

  @Test
  public void test1396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1396"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    int i7 = constantPoolGen0.addString("");
    int i11 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ArrayType arrayType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addArrayClass(arrayType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test1397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1397"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i8 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test1398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1398"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen3.getConstant((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test1399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1399"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen0.getConstant((int)(byte)100);
    int i5 = constantPoolGen0.lookupFloat((float)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addFloat((float)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1400"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1401"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1402"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 11);

  }

  @Test
  public void test1403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1403"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.addFloat((float)10);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1404"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i7 = constantPoolGen0.addInterfaceMethodref("", "", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test1405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1405"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.lookupFloat((float)15);
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test1406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1406"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1407"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 12);

  }

  @Test
  public void test1408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1408"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger(256);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1409"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.addDouble((double)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1410"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    int i8 = constantPoolGen0.addLong(1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1411"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i14 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test1412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1412"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)-1);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test1413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1413"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addDouble((double)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test1414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1414"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1415"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1416"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i8 = constantPoolGen1.lookupMethodref("", "hi!", "");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen1.setConstant(8, constant10);
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1417"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test1418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1418"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.lookupInteger((int)(byte)10);
    java.lang.String str9 = constantPoolGen1.toString();
    int i13 = constantPoolGen1.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i15 = constantPoolGen1.addLong((long)'#');
    org.apache.bcel.generic.ArrayType arrayType16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.addArrayClass(arrayType16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test1419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1419"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.addFloat(10.0f);
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1420"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInteger((int)(byte)100);
    int i11 = constantPoolGen1.lookupLong((long)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1421"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test1422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1422"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1423"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    int i10 = constantPoolGen0.addInteger(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test1424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1424"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    int i6 = constantPoolGen0.addDouble(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test1425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1425"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.addLong((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1426"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i13 = constantPoolGen3.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i15 = constantPoolGen3.lookupInteger(16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1427"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addLong((-1L));
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1428"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i7 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test1429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1429"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i14 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1430"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.addLong((long)16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test1431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1431"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1432"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i12 = constantPoolGen3.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1433"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.lookupFloat((float)11);
    int i11 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i13 = constantPoolGen0.lookupLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1434"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i10 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test1435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1435"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    int i7 = constantPoolGen0.addLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test1436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1436"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.addFloat((float)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test1437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1437"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    org.apache.bcel.generic.ArrayType arrayType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.addArrayClass(arrayType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test1438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1438"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1439"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen7.getConstant((int)(byte)0);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen7.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test1440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1440"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i15 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test1441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1441"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupString("hi!");
    int i7 = constantPoolGen1.lookupLong((long)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen10.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant14 = constantPoolGen10.getConstant((int)(byte)10);
    int i15 = constantPoolGen10.getSize();
    int i17 = constantPoolGen10.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i19 = constantPoolGen10.addFloat((-1.0f));
    int i23 = constantPoolGen10.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool24 = constantPoolGen10.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i25 = constantPoolGen1.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool24);

  }

  @Test
  public void test1442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1442"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addLong((-1L));
    int i8 = constantPoolGen1.addInteger(259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test1443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1443"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test1444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1444"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen9.lookupString("hi!");
    int i13 = constantPoolGen9.lookupLong((long)(short)1);
    int i15 = constantPoolGen9.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen3.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1445"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addInteger((int)(short)0);
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test1446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1446"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupFloat((float)(-1));
    int i12 = constantPoolGen1.addDouble((double)(-1L));
    int i14 = constantPoolGen1.addLong((long)(-1));
    int i16 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test1447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1447"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.addClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 11.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test1448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1448"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1449"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.lookupLong(1L);
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen1.getConstant(13);
    int i13 = constantPoolGen1.lookupLong((long)6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1450"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addString("");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);

  }

  @Test
  public void test1451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1451"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i11 = constantPoolGen1.getSize();
    int i13 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i15 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant17 = null;
    constantPoolGen1.setConstant(2, constant17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1452"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addFloat((float)(short)-1);
    int i7 = constantPoolGen0.addInteger(6);
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test1453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1453"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i13 = constantPoolGen3.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i14 = constantPoolGen3.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test1454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1454"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    java.lang.String str11 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"));

  }

  @Test
  public void test1455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1455"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addFloat((float)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1456"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    int i6 = constantPoolGen0.lookupDouble((double)258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1457"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.lookupFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1458"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen1.getConstant(18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test1459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1459"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(0, constant6);
    int i9 = constantPoolGen0.lookupDouble((double)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1460"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)(short)10, constant11);
    int i14 = constantPoolGen0.lookupFloat((float)(short)100);
    int i16 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addMethodref(methodGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);

  }

  @Test
  public void test1461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1461"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test1462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1462"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i8 = constantPoolGen2.addMethodref("hi!", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen2.addFloat((float)0L);
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen2.getConstant(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);

  }

  @Test
  public void test1463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1463"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.lookupInteger(0);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant(100, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1464"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    java.lang.String str7 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.lookupMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Float[4](bytes = -1.0)\n"+ "'", str7.equals("1)CONSTANT_Float[4](bytes = -1.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test1465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1465"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    int i15 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i18 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i20 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test1466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1466"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i5 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen7.getConstant(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test1467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1467"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1468"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.lookupInteger((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1469"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen2.getConstant(262);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1470"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);

  }

  @Test
  public void test1471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1471"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen5.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen5.addInteger((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 259);

  }

  @Test
  public void test1472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1472"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test1473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1473"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addInteger((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test1474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1474"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i14 = constantPoolGen1.lookupInteger(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1475"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1476"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.addInteger(0);
    int i9 = constantPoolGen1.addLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test1477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1477"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i9 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1478"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(9, constant7);
    int i11 = constantPoolGen0.lookupNameAndType("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i15 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test1479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1479"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.lookupInteger(1);
    int i8 = constantPoolGen1.lookupFloat((float)2);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen1.setConstant(15, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1480"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addInteger((int)(short)-1);
    int i11 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "hi!", "");
    org.apache.bcel.classfile.Constant constant12 = null;
    org.apache.bcel.classfile.Constant[] constant_array13 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array13);
    java.lang.String str15 = constantPoolGen14.toString();
    int i17 = constantPoolGen14.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i19 = constantPoolGen14.lookupInteger(259);
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.addConstant(constant12, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test1481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1481"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addInteger((int)(short)-1);
    int i11 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "hi!", "");
    int i14 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1482"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i8 = constantPoolGen1.lookupLong((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1483"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addFloat((float)4);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i15 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1484"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i3 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1485"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen8.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen8.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test1486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1486"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i13 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i15 = constantPoolGen1.lookupFloat((float)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1487"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger(256);
    int i9 = constantPoolGen0.addLong((long)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1488"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    int i14 = constantPoolGen1.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1489"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);

  }

  @Test
  public void test1490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1490"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addInteger((int)(short)-1);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1491"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    int i14 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test1492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1492"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addInteger(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test1493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1493"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i7 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test1494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1494"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test1495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1495"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.lookupInteger(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1496"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1497"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen0.getConstant((int)(byte)100);
    int i5 = constantPoolGen0.lookupFloat((float)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(short)100, constant8);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test1498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1498"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(9, constant5);
    int i8 = constantPoolGen1.addFloat((float)(short)1);
    int i12 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test1499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1499"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1500"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(short)10, constant6);
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1501() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1501"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i7 = constantPoolGen0.lookupFloat((float)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1502() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1502"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen2.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test1503() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1503"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupFloat((float)(short)-1);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test1504() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1504"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.lookupDouble((double)(-1));
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant(4, constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1505() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1505"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen9.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test1506() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1506"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i7 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen1.addDouble((double)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test1507() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1507"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.lookupString("");
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i15 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test1508() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1508"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test1509() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1509"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.addFloat(10.0f);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1510() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1510"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupInteger((int)(short)10);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1511() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1511"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.lookupFloat((float)262);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1512() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1512"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i6 = constantPoolGen5.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);

  }

  @Test
  public void test1513() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1513"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    java.lang.String str5 = constantPoolGen0.toString();
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str6.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));

  }

  @Test
  public void test1514() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1514"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen6.getConstant((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test1515() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1515"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i10 = constantPoolGen1.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test1516() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1516"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupUtf8("");
    int i7 = constantPoolGen1.addClass("hi!");
    int i9 = constantPoolGen1.addFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test1517() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1517"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1518() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1518"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen0.addLong((long)(byte)100);
    int i13 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1519() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1519"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i10 = constantPoolGen3.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i12 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i14 = constantPoolGen3.lookupFloat(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1520() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1520"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen2.lookupInteger(0);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1521() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1521"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    java.lang.String str7 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i13 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Float[4](bytes = -1.0)\n"+ "'", str7.equals("1)CONSTANT_Float[4](bytes = -1.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test1522() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1522"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.addInteger(0);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i13 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1523() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1523"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupLong((long)263);
    int i7 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.lookupLong((-1L));
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1524() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1524"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test1525() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1525"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupFloat((float)(short)1);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong(0L);
    int i10 = constantPoolGen0.addLong((long)'a');
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test1526() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1526"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(byte)10, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test1527() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1527"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);

  }

  @Test
  public void test1528() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1528"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen1.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test1529() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1529"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.lookupLong((long)(byte)-1);
    int i12 = constantPoolGen1.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test1530() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1530"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i12 = constantPoolGen0.lookupLong((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1531() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1531"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i10 = constantPoolGen1.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1532() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1532"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i10 = constantPoolGen0.lookupFloat((float)7);
    int i12 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1533() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1533"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen1.getConstant((int)(byte)100);
    int i15 = constantPoolGen1.addDouble((double)(byte)10);
    int i17 = constantPoolGen1.addFloat((float)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 5);

  }

  @Test
  public void test1534() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1534"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addString("");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i8 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1535() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1535"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.addDouble((double)5);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen3.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);

  }

  @Test
  public void test1536() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1536"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1537() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1537"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1538() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1538"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.addDouble((double)5);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1539() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1539"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1540() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1540"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1541() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1541"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i9 = constantPoolGen0.addInteger((int)(byte)10);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i15 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test1542() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1542"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    int i10 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1543() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1543"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen8.getConstant((int)(short)1);
    int i12 = constantPoolGen8.addLong((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test1544() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1544"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupInteger((int)(byte)-1);
    int i8 = constantPoolGen3.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen3.getFinalConstantPool();
    int i11 = constantPoolGen3.addInteger(263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test1545() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1545"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen0.getConstant((int)(byte)100);
    int i5 = constantPoolGen0.lookupFloat((float)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addFloat((float)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test1546() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1546"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    int i6 = constantPoolGen0.lookupDouble((double)1);
    int i8 = constantPoolGen0.lookupDouble(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1547() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1547"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    int i7 = constantPoolGen0.lookupInteger(13);
    int i9 = constantPoolGen0.lookupDouble((double)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1548() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1548"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen1.setConstant(3, constant13);
    int i18 = constantPoolGen1.lookupInterfaceMethodref("", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen19 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.lookupMethodref(methodGen19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test1549() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1549"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen1.getConstant((int)(byte)10);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(8);
    java.lang.String str8 = constantPoolGen1.toString();
    int i11 = constantPoolGen1.addNameAndType("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str8.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test1550() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1550"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i8 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1551() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1551"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i9 = constantPoolGen1.lookupFloat((float)' ');
    int i11 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1552() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1552"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupFloat((float)(short)100);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.lookupDouble((double)100.0f);
    int i14 = constantPoolGen0.addFloat((float)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);

  }

  @Test
  public void test1553() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1553"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(-1));
    int i14 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1554() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1554"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.addLong(0L);
    int i8 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test1555() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1555"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i7 = constantPoolGen0.addFloat((float)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test1556() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1556"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.lookupLong((long)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1557() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1557"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test1558() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1558"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.lookupString("");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1559() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1559"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test1560() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1560"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i4 = constantPoolGen0.lookupDouble((double)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1561() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1561"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i8 = constantPoolGen1.addFloat((float)0);
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1562() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1562"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant((int)(short)10, constant11);
    int i14 = constantPoolGen0.lookupFloat((float)(short)100);
    int i16 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i18 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    org.apache.bcel.generic.ObjectType objectType19 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.addClass(objectType19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 7);

  }

  @Test
  public void test1563() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1563"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addFloat((float)4);
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i15 = constantPoolGen0.lookupUtf8("");
    int i19 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test1564() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1564"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addLong((long)12);
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test1565() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1565"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupDouble((double)(byte)-1);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test1566() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1566"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 32)\n");
    int i12 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    int i16 = constantPoolGen2.addMethodref("", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);

  }

  @Test
  public void test1567() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1567"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen2.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen2.addLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test1568() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1568"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen5.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test1569() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1569"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.addFloat((float)11);
    java.lang.String str9 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Float[4](bytes = 11.0)\n"+ "'", str9.equals("1)CONSTANT_Float[4](bytes = 11.0)\n"));

  }

  @Test
  public void test1570() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1570"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test1571() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1571"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen5.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen5.lookupInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test1572() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1572"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i6 = constantPoolGen0.addDouble((double)(byte)1);
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 32)\n");
    int i13 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test1573() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1573"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test1574() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1574"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addLong(0L);
    int i9 = constantPoolGen3.lookupDouble((double)10.0f);
    int i13 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1575() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1575"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    int i9 = constantPoolGen1.lookupInteger(14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1576() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1576"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen2.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    org.apache.bcel.classfile.Constant constant12 = null;
    constantPoolGen10.setConstant(17, constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test1577() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1577"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test1578() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1578"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i9 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test1579() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1579"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test1580() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1580"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i6 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i8 = constantPoolGen0.lookupDouble((double)6);
    int i10 = constantPoolGen0.addLong((long)13);
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test1581() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1581"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i8 = constantPoolGen0.addClass("");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = 11.0)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);

  }

  @Test
  public void test1582() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1582"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    int i10 = constantPoolGen2.addMethodref("", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "");
    int i13 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1583() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1583"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupInterfaceMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i13 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test1584() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1584"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addDouble((double)16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);

  }

  @Test
  public void test1585() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1585"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i9 = constantPoolGen6.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test1586() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1586"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addDouble((double)256);
    java.lang.String str11 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n"+ "'", str11.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n"));

  }

  @Test
  public void test1587() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1587"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i9 = constantPoolGen0.addInteger((int)(byte)10);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i17 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 18);

  }

  @Test
  public void test1588() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1588"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(9, constant7);
    int i11 = constantPoolGen0.lookupNameAndType("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i14 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test1589() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1589"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.lookupString("");
    int i9 = constantPoolGen0.addLong((long)'a');
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test1590() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1590"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    int i6 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test1591() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1591"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i8 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test1592() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1592"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test1593() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1593"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.addLong((long)(byte)10);
    int i13 = constantPoolGen1.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "hi!", "");
    int i15 = constantPoolGen1.addInteger(12);
    int i17 = constantPoolGen1.addLong((long)3);
    int i21 = constantPoolGen1.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 13);

  }

  @Test
  public void test1594() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1594"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "");
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen6.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test1595() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test0.test1595"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

}
