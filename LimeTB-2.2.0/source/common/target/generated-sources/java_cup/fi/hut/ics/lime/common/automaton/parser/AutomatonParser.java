
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 25 17:17:32 EET 2012
//----------------------------------------------------

package fi.hut.ics.lime.common.automaton.parser;

import fi.hut.ics.lime.common.automaton.ast.*;
import fi.hut.ics.lime.common.logic.ast.node.*;
import fi.hut.ics.lime.common.logic.parser.PropositionKind;
import java.util.LinkedList;
import fi.hut.ics.lime.common.specification.ErrorReporter;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 25 17:17:32 EET 2012
  */
@SuppressWarnings("all")
public class AutomatonParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\006\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\010\000\002\005\003" +
    "\000\002\005\004\000\002\006\012\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\004\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\006\010\uffff\012\uffff\001\002\000\006\010\012\012" +
    "\011\001\002\000\004\002\001\001\002\000\004\016\014" +
    "\001\002\000\006\010\ufffe\012\ufffe\001\002\000\004\005" +
    "\015\001\002\000\004\013\017\001\002\000\006\006\051" +
    "\013\017\001\002\000\004\014\021\001\002\000\006\006" +
    "\ufffc\013\ufffc\001\002\000\014\010\025\014\027\023\024" +
    "\026\022\027\023\001\002\000\014\015\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\001\002\000\014\015\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\001\002\000\014\010\025\014" +
    "\027\023\024\026\022\027\023\001\002\000\014\015\ufff6" +
    "\021\ufff6\022\ufff6\024\ufff6\025\ufff6\001\002\000\014\015" +
    "\043\021\032\022\035\024\034\025\036\001\002\000\014" +
    "\010\025\014\027\023\024\026\022\027\023\001\002\000" +
    "\014\015\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\014\015\033\021\032\022\035\024\034\025\036\001" +
    "\002\000\014\010\025\014\027\023\024\026\022\027\023" +
    "\001\002\000\014\015\ufff0\021\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\001\002\000\014\010\025\014\027\023\024\026\022" +
    "\027\023\001\002\000\014\010\025\014\027\023\024\026" +
    "\022\027\023\001\002\000\014\010\025\014\027\023\024" +
    "\026\022\027\023\001\002\000\014\015\ufff5\021\032\022" +
    "\035\024\034\025\ufff5\001\002\000\014\015\ufff2\021\ufff2" +
    "\022\ufff2\024\ufff2\025\ufff2\001\002\000\014\015\ufff4\021" +
    "\032\022\035\024\ufff4\025\ufff4\001\002\000\014\015\ufff3" +
    "\021\ufff3\022\ufff3\024\ufff3\025\ufff3\001\002\000\004\020" +
    "\044\001\002\000\004\007\045\001\002\000\004\010\046" +
    "\001\002\000\004\017\047\001\002\000\006\006\ufffa\013" +
    "\ufffa\001\002\000\014\015\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\001\002\000\004\017\053\001\002\000\006\006" +
    "\ufffb\013\ufffb\001\002\000\006\010\ufffd\012\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\004\004\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\015" +
    "\006\017\001\001\000\004\006\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\027\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\027\010" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\027\010\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\027\010\041\001\001\000\002\001\001" +
    "\000\006\007\027\010\040\001\001\000\006\007\027\010" +
    "\037\001\001\000\006\007\027\010\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private ErrorReporter errorReporter = null;

	public void setErrorReporter(ErrorReporter r) {
		errorReporter = r;
	}

	@Override
	public void syntax_error(java_cup.runtime.Symbol cur_token) {
		if (errorReporter == null)
			report_error("Parse error", cur_token);
		else
			errorReporter.report("Parse error", cur_token);
	}
	
	@Override
	public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
		report_fatal_error("Confused by previous errors and stopped parsing", cur_token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$AutomatonParser$actions {


	private static final PropositionalConnectiveType OR = PropositionalConnectiveType.OR;
	private static final PropositionalConnectiveType AND = PropositionalConnectiveType.AND;
	private static final PropositionalConnectiveType EQ = PropositionalConnectiveType.EQUIVALENCE;
	private static final PropositionalConnectiveType XOR = PropositionalConnectiveType.XOR;
	private static final PropositionalConnectiveType NOT = PropositionalConnectiveType.NOT;
	private static final PropositionKind CALL = PropositionKind.CALL;
	private static final PropositionKind VALUE = PropositionKind.VALUE;
	private PropositionNode pnTemp;

  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= LPAREN expr RPAREN 
            {
              BooleanExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		BooleanExpression e = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = e; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= NOT expr 
            {
              BooleanExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionalConnective(NOT, e); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr NEQ expr 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).right;
		BooleanExpression e1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionalConnective(XOR, e1, e2); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr EQ expr 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).right;
		BooleanExpression e1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionalConnective(EQ, e1, e2); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr AND expr 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).right;
		BooleanExpression e1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionalConnective(AND, e1, e2); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr OR expr 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).right;
		BooleanExpression e1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionalConnective(OR, e1, e2); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= IDENTIFIER 
            {
              BooleanExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new PropositionNode(id); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= constant_expr 
            {
              BooleanExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		BooleanExpression e = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = e; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant_expr ::= ONE 
            {
              BooleanExpression RESULT =null;
		 RESULT = new Literal(true); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("constant_expr",5, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant_expr ::= ZERO 
            {
              BooleanExpression RESULT =null;
		 RESULT = new Literal(false); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("constant_expr",5, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // if_branch ::= DOUBLE_COLON LPAREN expr RPAREN ARROW GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonIfBranch RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).right;
		BooleanExpression e = (BooleanExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonIfBranch(e,id); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("if_branch",4, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-7)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // if_branch_list ::= if_branch_list if_branch 
            {
              LinkedList<AutomatonIfBranch> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		LinkedList<AutomatonIfBranch> li = (LinkedList<AutomatonIfBranch>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		AutomatonIfBranch b = (AutomatonIfBranch)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = li; RESULT.add(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("if_branch_list",3, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // if_branch_list ::= if_branch 
            {
              LinkedList<AutomatonIfBranch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		AutomatonIfBranch b = (AutomatonIfBranch)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new LinkedList<AutomatonIfBranch>(); RESULT.add(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("if_branch_list",3, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // state ::= IDENTIFIER COLON IF if_branch_list FI SEMICOLON 
            {
              AutomatonState RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).right;
		LinkedList<AutomatonIfBranch> li = (LinkedList<AutomatonIfBranch>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonState(id, li); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("state",2, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // state_list ::= state_list state 
            {
              LinkedList<AutomatonState> RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		LinkedList<AutomatonState> li = (LinkedList<AutomatonState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()).right;
		AutomatonState s = (AutomatonState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = li; li.add(s); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("state_list",1, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // state_list ::= 
            {
              LinkedList<AutomatonState> RESULT =null;
		 RESULT = new LinkedList<AutomatonState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("state_list",1, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= automaton EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		AutomatonDefinition start_val = (AutomatonDefinition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // automaton ::= ALWAYS_NFA LBRACE state_list RBRACE 
            {
              AutomatonDefinition RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).right;
		LinkedList<AutomatonState> li = (LinkedList<AutomatonState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonDefinition(li); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("automaton",0, ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)), ((java_cup.runtime.Symbol)CUP$AutomatonParser$stack.peek()), RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

