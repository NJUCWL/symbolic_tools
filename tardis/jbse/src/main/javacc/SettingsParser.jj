options{  JDK_VERSION = "1.8";  STATIC = false;  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;}PARSER_BEGIN(SettingsParser)package jbse.apps.settings;

import java.util.ArrayList;

class SettingsParser {
  ArrayList<String> notInitializedClasses;
  ArrayList<String[]> expandToLICS;
  ArrayList<String[]> resolveAliasOriginLICS;
  ArrayList<String[]> resolveAliasInstanceofLICS;  ArrayList<String[]> resolveAliasNeverLICS;
  ArrayList<String[]> resolveNotNullLICS;  ArrayList<String[]> expandToTrigger;  ArrayList<String[]> expansionBackdoor;  ArrayList<String[]> resolveAliasOriginTrigger;  ArrayList<String[]> resolveAliasInstanceofTrigger;  ArrayList<String[]> resolveNullTrigger;  public void reset() {    this.notInitializedClasses = new ArrayList<String>();    this.expandToLICS = new ArrayList<String[]>();    this.resolveAliasOriginLICS = new ArrayList<String[]>();    this.resolveAliasInstanceofLICS = new ArrayList<String[]>();    this.resolveAliasNeverLICS = new ArrayList<String[]>();    this.resolveNotNullLICS = new ArrayList<String[]>();    this.expandToTrigger = new ArrayList<String[]>();    this.expansionBackdoor = new ArrayList<String[]>();    this.resolveAliasOriginTrigger = new ArrayList<String[]>();    this.resolveAliasInstanceofTrigger = new ArrayList<String[]>();    this.resolveNullTrigger = new ArrayList<String[]>();  }}PARSER_END(SettingsParser)SKIP :{  " "| "\r"| "\t"| "\n"| "--" : COMMENT}< COMMENT > SKIP:{  "\n" : DEFAULT| "\r" : DEFAULT}< COMMENT > MORE :{  < ~[] >}TOKEN :{ < INIT : "i" "n" "i" "t" >| < RESOLVE : "r" "e" "s" "o" "l" "v" "e" >| < TRIGGER : "t" "r" "i" "g" "g" "e" "r" >| < BEGIN : "b" "e" "g" "i" "n" >| < END : "e" "n" "d" >| < NONNULL : "n" "o" "t" " " "n" "u" "l" "l" >| < NULL : "n" "u" "l" "l" >| < WHENINSTANCEOF : "i" "n" "s" "t" "a" "n" "c" "e" "o" "f" >| < EXPANDSTO : "e" "x" "p" "a" "n" "d" "s" " " "t" "o" >| < NOTHING : "n" "o" "t" "h" "i" "n" "g" >| < ALIASES : "a" "l" "i" "a" "s" "e" "s" >| < NEVER : "n" "e" "v" "e" "r" >| < TRIGGERS : "t" "r" "i" "g" "g" "e" "r" "s" >| < MAX : "m" "a" "x" >
| < ROOT : "{" "R" "O" "O" "T" "}" >| < ANY : "{" "R" "_" "A" "N" "Y" "}" >| < REF : "{" "$" "R" "E" "F" "}" >| < REFANY : "{" "$" "R" "_" "A" "N" "Y" "}" >| < UP : "{" "U" "P" "}" >/*| < BYTE : "B" >| < CHAR : "C" >| < DOUBLE : "D" >| < FLOAT : "F" >| < INT : "I" >| < LONG : "J" >| < SHORT : "S" >| < VOID : "V" >| < BOOLEAN : "Z" >| < REFBEGIN : "L" >| < ARRAYOF : "[" >| < LEFTPAREN : "(" >| < RIGHTPAREN : ")" >| < IDENTIFIER : ( < LETTER > | < DIGIT > | < SEPARATOR > )+ >*/| < ITEM : ( < LETTER > | < DIGIT > | < SEPARATOR > | < DOLLAR > | < REGEX_SYMBOL > | ";" )+ >| < #LETTER : ["a"-"z","A"-"Z"] >| < #DIGIT : ["0"-"9"] >| < #SEPARATOR : "_" >| < #DOLLAR : "$" >| < #REGEX_SYMBOL : ["(",")","*","+","[","]","|","\\",".","?","!", "^"] >}void start() :{  this.reset();
}{
  ( secInit() )?
  ( secResolve() )?  ( secTrigger() )?  < EOF >
}

void secInit() :
{}
{  < INIT > < BEGIN > rowInit() ( "," rowInit() )* < END >}

void rowInit() :
{
  String name;
}
{  name=cname()
  {
    notInitializedClasses.add(name);  }
}

void secResolve() :
{}
{
  < RESOLVE > < BEGIN > rowResolve() ( "," rowResolve() )* < END >
}
void rowResolve() :{
  String toResolve = null, toResolveClassName = null, resolved = null, resolvedClassName = null, triggerClassName = null, triggerArgsType = null, triggerMethodName = null, triggerMethodParams = null;
}{
  ( toResolve=pathAbsolute() )? < WHENINSTANCEOF > toResolveClassName=cname()
  (
    < NONNULL >
    {      resolveNotNullLICS.add(new String[] { toResolveClassName, toResolve });
    }  | < NULL > ( < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )? )?    {      if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {        resolveNullTrigger.add(new String[] { toResolveClassName, toResolve, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });      }    }  | ( < EXPANDSTO >
      (
        < NOTHING >
        {
          expandToLICS.add(new String[] { toResolveClassName, toResolve, null });        }
      | < WHENINSTANCEOF > resolvedClassName=cname() ( < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )? )?        {          expandToLICS.add(new String[] { toResolveClassName, toResolve, resolvedClassName });          if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {            expandToTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }          expansionBackdoor.add(new String[] { toResolveClassName, resolvedClassName });        }      )    )  | ( < ALIASES >      (        < NOTHING >        {          resolveAliasInstanceofLICS.add(new String[] { toResolveClassName, toResolve, null });        }      | < WHENINSTANCEOF > resolvedClassName=cname() ( < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )? )?          {            resolveAliasInstanceofLICS.add(new String[] { toResolveClassName, toResolve, resolvedClassName });            if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {              resolveAliasInstanceofTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });            }          }      | resolved=pathTarget() ( < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )? )?        {          resolveAliasOriginLICS.add(new String[] { toResolveClassName, toResolve, resolved });          if (triggerClassName != null && triggerArgsType != null && triggerMethodName != null) {            resolveAliasOriginTrigger.add(new String[] { toResolveClassName, toResolve, resolved, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }        }      )
    )  | ( < NEVER > < ALIASES > resolved = pathNegative() )    {      resolveAliasNeverLICS.add(new String[] { toResolveClassName, toResolve, resolved });
    }
  )
}

void secTrigger() :{}{  < TRIGGER > < BEGIN > rowTrigger() ( "," rowTrigger() )* < END >}void rowTrigger() :{  String toResolve = null, toResolveClassName = null, resolved = null, resolvedClassName = null, triggerClassName = null, triggerArgsType = null, triggerMethodName = null, triggerMethodParams = null;}{  ( toResolve=pathAbsolute() )? < WHENINSTANCEOF > toResolveClassName=cname()  (    < NULL > < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )?     {      resolveNullTrigger.add(new String[] { toResolveClassName, toResolve, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });    }  | < EXPANDSTO > < WHENINSTANCEOF > resolvedClassName=cname() < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )?    {      expandToTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });      expansionBackdoor.add(new String[] { toResolveClassName, resolvedClassName });    }  | ( < ALIASES >      (        < WHENINSTANCEOF > resolvedClassName=cname() < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )?          {            resolveAliasInstanceofTrigger.add(new String[] { toResolveClassName, toResolve, resolvedClassName, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });          }      | resolved=pathTarget() < TRIGGERS > triggerClassName=cname() ":" triggerArgsType=cname() ":" triggerMethodName=cname() ( ":" triggerMethodParams=pathRelative() )?        {          resolveAliasOriginTrigger.add(new String[] { toResolveClassName, toResolve, resolved, triggerClassName, triggerArgsType, triggerMethodName, triggerMethodParams });        }      )    )  )}String cname() :
{
  StringBuilder buf = new StringBuilder();
  Token i;
}
{
  i=< ITEM >
  {
    buf.append(i.toString());  }
  (
    "/" i=< ITEM >
    {
      buf.append("/");
      buf.append(i.toString());
    }
  )*
  {    return buf.toString();
  }}String pathAbsolute() :{  StringBuilder buf = new StringBuilder();  Token i;}{  (    (    < ROOT > ":" i=< ITEM >    {      buf.append("{ROOT}:");      buf.append(i.toString());    }  	) | (    < ANY >    {      buf.append("{ANY}");    }  	)  )  (    "/" i=< ITEM >    {      buf.append("/");      buf.append(i.toString());    }  )*  {    return buf.toString();  }}String pathTarget() :{  StringBuilder buf = new StringBuilder();  String s;  Token i;}{  (    < MAX >    {      buf.append("{MAX}");    }  )?  ((    s=pathAbsolute()    {      buf.append(s);    }  ) | (    s=pathRelative()    {      buf.append(s);    }  ))  {    return buf.toString();  }}String pathNegative() :{  StringBuilder buf = new StringBuilder();  String s;  Token i;}{  ((    s=pathAbsolute()    {      buf.append(s);    }  ) | (    s=pathRelative()    {      buf.append(s);    }  ))  {    return buf.toString();  }}String pathRelative() :{  StringBuilder buf = new StringBuilder();  Token i;}{  (    < REF >    {  	  buf.append("{REF}");    }  | < REFANY >    {      buf.append("{ANY}");    }  )  (    "/"    (      < UP >      {        buf.append("/{UP}");      }    | i=< ITEM >      {        buf.append("/");        buf.append(i.toString());      }    )  )*  {    return buf.toString();  }}