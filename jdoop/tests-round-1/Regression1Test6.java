
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Regression1Test6 {

  public static boolean debug = false;

  @Test
  public void test0001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0001"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addLong((long)4);
    int i9 = constantPoolGen1.lookupDouble((double)1.0f);
    int i11 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_Fieldref[9](class_index = 5, name_and_type_index = 8)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0002"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.addString("1)CONSTANT_Integer[3](bytes = 0)\n");
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0003"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i13 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addInterfaceMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0004"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i4 = constantPoolGen0.addFloat((float)259);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i10 = constantPoolGen0.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n");
    int i12 = constantPoolGen0.lookupInteger(12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0005"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen3.getFinalConstantPool();
    int i8 = constantPoolGen3.lookupInteger((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0006"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    java.lang.String str10 = constantPoolGen9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n"));

  }

  @Test
  public void test0007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0007"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.lookupInteger(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0008"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i10 = constantPoolGen5.addMethodref("", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i12 = constantPoolGen5.lookupString("1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0009"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getFinalConstantPool();
    int i10 = constantPoolGen5.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0010"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i14 = constantPoolGen10.addFieldref("", "", "hi!");
    int i16 = constantPoolGen10.lookupDouble((double)' ');
    java.lang.String str17 = constantPoolGen10.toString();
    java.lang.String str18 = constantPoolGen10.toString();
    int i20 = constantPoolGen10.addFloat((float)'#');
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen1.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str17.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str18.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 6);

  }

  @Test
  public void test0011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0011"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupDouble((double)' ');
    int i8 = constantPoolGen2.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0012"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i8 = constantPoolGen1.addLong((long)8);
    int i10 = constantPoolGen1.addDouble((double)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0013"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)-1);
    int i7 = constantPoolGen0.lookupDouble((double)267);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0014"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(10);
    int i6 = constantPoolGen0.addFloat((float)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 32)\n");
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i14 = constantPoolGen0.addDouble((double)259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0015"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Float[4](bytes = 16.0)\n2)CONSTANT_Long[5](bytes = 19)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0016"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen1.addFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = 16.0)\n2)CONSTANT_Long[5](bytes = 19)\n3)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant15 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant((int)(short)-1, constant15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0017"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant11);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen1.getConstantPool();
    int i17 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.generic.ObjectType objectType18 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i19 = constantPoolGen1.addClass(objectType18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 14);

  }

  @Test
  public void test0018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0018"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.addFloat((float)(short)0);
    int i6 = constantPoolGen1.addLong((long)18);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0019"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0020"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i12 = constantPoolGen9.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0021"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen6.addClass("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n3)CONSTANT_Long[5](bytes = 9)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);

  }

  @Test
  public void test0022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0022"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0023"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupFloat((float)(short)100);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.lookupDouble((double)100.0f);
    int i14 = constantPoolGen0.addFloat((float)9);
    int i16 = constantPoolGen0.lookupLong((long)11);
    int i20 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 9);

  }

  @Test
  public void test0024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0024"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupInterfaceMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i13 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i17 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i20 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "");
    org.apache.bcel.generic.MethodGen methodGen21 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen1.addMethodref(methodGen21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0025"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)-1);
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Long[5](bytes = -1)\n2)null\n"+ "'", str6.equals("1)CONSTANT_Long[5](bytes = -1)\n2)null\n"));

  }

  @Test
  public void test0026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0026"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addDouble((double)10L);
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0027"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    java.lang.String str4 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n");
    int i9 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0028"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.addLong(0L);
    int i8 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i14 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Integer[3](bytes = 0)\n2)CONSTANT_Long[5](bytes = 97)\n3)null\n");
    int i16 = constantPoolGen2.addString("1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    int i18 = constantPoolGen2.lookupLong((long)(short)10);
    int i20 = constantPoolGen2.lookupDouble((double)258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0029"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i17 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0030"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i8 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i10 = constantPoolGen0.lookupLong((long)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0031"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger(18);
    int i7 = constantPoolGen0.addFloat(1.0f);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i12 = constantPoolGen0.lookupFieldref("", "", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0032"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupDouble(0.0d);
    int i8 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    java.lang.String str9 = constantPoolGen0.toString();
    java.lang.String str10 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"+ "'", str10.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test0033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0033"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.addLong(10L);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen8.getConstant(263);
    int i12 = constantPoolGen8.addInteger(270);
    int i16 = constantPoolGen8.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    org.apache.bcel.generic.MethodGen methodGen17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen8.lookupInterfaceMethodref(methodGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0034"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    int i8 = constantPoolGen0.addDouble((double)(short)0);
    java.lang.String str9 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant12 = null;
    constantPoolGen0.setConstant(8, constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0035"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(270, constant11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0036"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i10 = constantPoolGen4.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen4.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen4.getConstantPool();
    int i17 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 270);

  }

  @Test
  public void test0037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0037"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    java.lang.String str4 = constantPoolGen0.toString();
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupDouble((double)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n"+ "'", str4.equals("1)CONSTANT_Float[4](bytes = 10.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n"+ "'", str5.equals("1)CONSTANT_Float[4](bytes = 10.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0038"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str7 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0039"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupInteger((int)(short)100);
    int i11 = constantPoolGen5.lookupInterfaceMethodref("", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0040"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.addFloat((float)(byte)-1);
    int i9 = constantPoolGen0.lookupDouble(10.0d);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0041"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i3 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen5.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0042"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i11 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 14);

  }

  @Test
  public void test0043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0043"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0044"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger(256);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0045"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i9 = constantPoolGen1.lookupLong((long)(short)-1);
    int i10 = constantPoolGen1.getSize();
    int i12 = constantPoolGen1.addDouble((double)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0046"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i14 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0047"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i12 = constantPoolGen0.addInteger(4);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);

  }

  @Test
  public void test0048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0048"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"));

  }

  @Test
  public void test0049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0049"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1/0)\\n8)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);

  }

  @Test
  public void test0050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0050"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupLong((long)17);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    int i12 = constantPoolGen0.addLong((long)13);
    int i14 = constantPoolGen0.lookupFloat((float)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0051"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen6.getConstant((int)(byte)100);
    java.lang.String str11 = constantPoolGen6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n"+ "'", str11.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n"));

  }

  @Test
  public void test0052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0052"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen3.addLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 259);

  }

  @Test
  public void test0053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0053"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("");
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0054"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen2.setConstant(6, constant4);
    int i9 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!", "hi!");
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen2.getConstant((int)' ');
    int i14 = constantPoolGen2.addNameAndType("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i17 = constantPoolGen2.addNameAndType("1)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i21 = constantPoolGen2.lookupFieldref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256/0)\\n4)null\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0055"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    java.lang.String str7 = constantPoolGen2.toString();
    int i9 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 35)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0056"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupFloat((float)260);
    int i9 = constantPoolGen0.lookupInteger(8);
    int i11 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i14 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0057"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i6 = constantPoolGen5.getSize();
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen5.getConstant((int)(byte)10);
    int i10 = constantPoolGen5.lookupInteger((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0058"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i7 = constantPoolGen1.addFloat((float)(byte)10);
    int i9 = constantPoolGen1.addString("1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i11 = constantPoolGen1.addFloat((float)269);
    int i13 = constantPoolGen1.addUtf8("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0059"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i11 = constantPoolGen7.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 11);

  }

  @Test
  public void test0060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0060"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i8 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i10 = constantPoolGen1.addInteger((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0061"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    int i7 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0062"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addFloat((float)100);
    int i6 = constantPoolGen2.addUtf8("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0063"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addFloat((float)261);
    int i9 = constantPoolGen5.addFloat((float)265);
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen5.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 257);

  }

  @Test
  public void test0064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0064"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupDouble((-1.0d));
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i8 = constantPoolGen6.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0065"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i7 = constantPoolGen0.addFloat((float)9);
    int i9 = constantPoolGen0.lookupInteger(0);
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    java.lang.String str12 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"+ "'", str12.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"));

  }

  @Test
  public void test0066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0066"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i7 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.addClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    int i13 = constantPoolGen2.lookupFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0067"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0068"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addInteger(16);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0069"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen1.addLong(100L);
    int i11 = constantPoolGen1.addFloat(0.0f);
    int i13 = constantPoolGen1.lookupFloat((float)273);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0070"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen1.setConstant((int)(short)10, constant6);
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i15 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test0071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0071"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    int i8 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0072"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.addInteger(257);
    int i5 = constantPoolGen1.getSize();
    int i7 = constantPoolGen1.lookupFloat((float)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0073"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupLong((long)(byte)100);
    int i8 = constantPoolGen0.lookupDouble(10.0d);
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen0.lookupInteger((int)(byte)100);
    int i15 = constantPoolGen0.lookupDouble((double)(short)1);
    int i19 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 9);

  }

  @Test
  public void test0074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0074"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i10 = constantPoolGen0.addLong((long)(byte)100);
    int i12 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i16 = constantPoolGen0.lookupInterfaceMethodref("", "hi!", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i17 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);

  }

  @Test
  public void test0075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0075"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addFloat((float)5);
    int i8 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0076"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addDouble((double)(-1));
    int i15 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i17 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    int i19 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0077"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i10 = constantPoolGen2.lookupDouble((double)267);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0078"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.lookupFloat((float)16);
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0079"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 5)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0080"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.lookupDouble((double)11);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen4.setConstant(0, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0081"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    java.lang.String str5 = constantPoolGen4.toString();
    int i9 = constantPoolGen4.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen4.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str5.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0082"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addDouble((double)5);
    int i7 = constantPoolGen0.lookupInteger(23);
    int i9 = constantPoolGen0.addLong((long)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0083"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i14 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen0.setConstant(14, constant16);
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant19 = constantPoolGen0.getConstant((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0084"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(6, constant6);
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0085"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0086"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addString("");
    int i11 = constantPoolGen5.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    java.lang.String str12 = constantPoolGen5.toString();
    int i14 = constantPoolGen5.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i16 = constantPoolGen5.addLong((long)8);
    org.apache.bcel.classfile.Constant constant18 = null;
    constantPoolGen5.setConstant(100, constant18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"+ "'", str12.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 264);

  }

  @Test
  public void test0087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0087"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n");
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0088"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupLong((long)7);
    int i9 = constantPoolGen0.lookupMethodref("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0089"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addInteger((int)'a');
    int i9 = constantPoolGen0.addFloat((float)1L);
    int i11 = constantPoolGen0.lookupLong((long)(byte)-1);
    org.apache.bcel.classfile.Constant constant13 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(260, constant13);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0090"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen0.setConstant((int)(byte)100, constant5);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0091"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen4.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 256.0)\n");
    int i14 = constantPoolGen4.lookupFloat((float)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0092"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i10 = constantPoolGen0.addInteger((int)'a');
    int i12 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    int i14 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0093"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen0.getConstant((int)(byte)100);
    int i5 = constantPoolGen0.addFloat((float)9);
    org.apache.bcel.generic.ObjectType objectType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addClass(objectType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0094"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen3.addDouble(0.0d);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen3.getConstant(100);
    int i12 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0095"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i8 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0096"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger((int)(byte)10);
    int i7 = constantPoolGen0.lookupDouble((double)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0097"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupFloat((float)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0098"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.lookupFloat((float)10L);
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "hi!");
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"));

  }

  @Test
  public void test0099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0099"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i8 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0100"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addLong((long)(short)100);
    org.apache.bcel.classfile.Constant constant11 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(263, constant11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0101"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen3.lookupFloat((float)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0102"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i13 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i16 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Integer[3](bytes = 100)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0103"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupClass("");
    int i8 = constantPoolGen1.addNameAndType("", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i10 = constantPoolGen1.addLong((long)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0104"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen3.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0105"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    java.lang.String str6 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"+ "'", str6.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0106"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addInteger((int)'a');
    int i8 = constantPoolGen0.addLong((long)12);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0107"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0108"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupString("");
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0109"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i8 = constantPoolGen1.addFloat((float)0);
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i15 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Float[4](bytes = 16.0)\n2)CONSTANT_Long[5](bytes = 19)\n3)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n");
    int i19 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0110"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    int i12 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0111"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)13);
    int i8 = constantPoolGen0.addDouble((double)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0112"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i10 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.lookupDouble((double)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0113"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0114"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0115"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.lookupFloat((float)15);
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i11 = constantPoolGen1.lookupFloat(0.0f);
    int i13 = constantPoolGen1.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i15 = constantPoolGen1.addDouble((double)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);

  }

  @Test
  public void test0116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0116"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    int i9 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen3.getConstant(20);
    int i15 = constantPoolGen3.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n");
    int i17 = constantPoolGen3.lookupDouble((double)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0117"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.lookupDouble((double)1L);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test0118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0118"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.lookupFloat((float)'4');
    int i9 = constantPoolGen1.addDouble((double)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0119"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen1.getConstant(5);
    int i14 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0120"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.lookupLong(10L);
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen0.getConstant(0);
    int i17 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 12);

  }

  @Test
  public void test0121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0121"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i6 = constantPoolGen0.lookupDouble((double)267);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(23, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0122"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i11 = constantPoolGen0.lookupUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0123"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupDouble(1.0d);
    int i12 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0124"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i8 = constantPoolGen0.lookupInteger(268);
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0125"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i11 = constantPoolGen2.lookupFloat((float)260);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0126"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i10 = constantPoolGen0.addFloat((float)(byte)100);
    int i12 = constantPoolGen0.lookupDouble((double)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0127"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i10 = constantPoolGen5.lookupFloat(0.0f);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen5.getConstantPool();
    int i13 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    int i15 = constantPoolGen5.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n");
    int i17 = constantPoolGen5.addDouble((double)16);
    int i19 = constantPoolGen5.lookupFloat((float)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0128"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(13, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0129"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addDouble((double)266);
    int i11 = constantPoolGen0.lookupInteger(262);
    int i13 = constantPoolGen0.addInteger(0);
    int i16 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0130"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    int i12 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.classfile.Constant constant14 = constantPoolGen1.getConstant(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant14);

  }

  @Test
  public void test0131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0131"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("");
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(16, constant11);
    int i14 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0132"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 11);

  }

  @Test
  public void test0133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0133"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupFloat((float)(short)100);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0134"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen1.getConstant((int)(byte)10);
    int i7 = constantPoolGen1.addInteger(5);
    int i11 = constantPoolGen1.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n");
    java.lang.String str12 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Integer[3](bytes = 5)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\\n6)CONSTANT_Class[7](name_index = 5)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\\n4)CONSTANT_Float[4](bytes = 32.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n"+ "'", str12.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Integer[3](bytes = 5)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\\n6)CONSTANT_Class[7](name_index = 5)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\\n4)CONSTANT_Float[4](bytes = 32.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n"));

  }

  @Test
  public void test0135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0135"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    int i7 = constantPoolGen0.lookupDouble((double)(-1L));
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i15 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test0136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0136"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen3.getFinalConstantPool();
    int i10 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test0137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0137"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupDouble(1.0d);
    int i12 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0138"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.addFloat(100.0f);
    int i11 = constantPoolGen1.addFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0139"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen5.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen8.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0140"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(272, constant10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0141"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    java.lang.String str6 = constantPoolGen1.toString();
    int i8 = constantPoolGen1.lookupDouble((double)267);
    int i10 = constantPoolGen1.addInteger(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0142"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0143"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    int i13 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i15 = constantPoolGen1.lookupLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0144"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)8);
    java.lang.String str6 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n"));

  }

  @Test
  public void test0145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0145"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger((int)(short)100);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0146"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.Constant constant12 = null;
    org.apache.bcel.classfile.Constant[] constant_array13 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen(constant_array13);
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen14.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen16 = new org.apache.bcel.generic.ConstantPoolGen(constantPool15);
    int i20 = constantPoolGen16.lookupInterfaceMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i23 = constantPoolGen16.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i25 = constantPoolGen16.lookupLong((long)100);
    // The following exception was thrown during execution in test generation
    try {
    int i26 = constantPoolGen1.addConstant(constant12, constantPoolGen16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test0147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0147"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupDouble((double)(short)1);
    int i11 = constantPoolGen1.lookupLong(100L);
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen1.getConstant((int)(byte)100);
    int i15 = constantPoolGen1.addDouble((double)(byte)10);
    int i19 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Double[6](bytes = 262.0)\n5)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);

  }

  @Test
  public void test0148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0148"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen3.addInteger((int)(short)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen3.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0149"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i10 = constantPoolGen1.addDouble((double)1L);
    int i12 = constantPoolGen1.lookupInteger(6);
    int i14 = constantPoolGen1.lookupInteger(262);
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen1.getConstantPool();
    int i19 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);

  }

  @Test
  public void test0150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0150"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i6 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen1.addFloat((float)(-1));
    int i10 = constantPoolGen1.lookupInteger((int)'#');
    org.apache.bcel.generic.ArrayType arrayType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addArrayClass(arrayType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0151"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen6.lookupDouble((double)257);
    java.lang.String str9 = constantPoolGen6.toString();
    int i11 = constantPoolGen6.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen6.getConstant(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);

  }

  @Test
  public void test0152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0152"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i8 = constantPoolGen1.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i12 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0153"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)'4');
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(5, constant11);
    int i16 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    int i17 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 13);

  }

  @Test
  public void test0154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0154"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i5 = constantPoolGen1.lookupInteger((int)(byte)-1);
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"\")\n"));

  }

  @Test
  public void test0155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0155"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupDouble((double)(short)10);
    int i9 = constantPoolGen5.lookupFloat((float)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0156"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant(4, constant11);
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant14 = constantPoolGen1.getConstant((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0157"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen6.getConstant(10);
    int i10 = constantPoolGen6.addDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen6.getConstantPool();
    int i13 = constantPoolGen6.lookupString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0158"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)'#', constant8);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i13 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i17 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0159"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.addDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 256);

  }

  @Test
  public void test0160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0160"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n3)CONSTANT_Long[5](bytes = 9)\n4)null\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i14 = constantPoolGen1.addFloat((float)260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test0161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0161"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n");
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0162"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i6 = constantPoolGen0.lookupDouble((double)269);
    int i8 = constantPoolGen0.addLong((long)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0163"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addInteger((-1));
    int i7 = constantPoolGen1.lookupDouble((double)0L);
    java.lang.String str8 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Integer[3](bytes = -1)\n"+ "'", str8.equals("1)CONSTANT_Integer[3](bytes = -1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0164"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    int i7 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0165"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i8 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0166"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i12 = constantPoolGen0.lookupDouble((double)5);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0167"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.addLong((long)0);
    int i10 = constantPoolGen2.lookupFloat((float)16);
    int i12 = constantPoolGen2.addClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0168"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addInteger((int)(short)-1);
    int i9 = constantPoolGen1.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i11 = constantPoolGen1.addFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0169"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.lookupClass("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0170"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.addDouble((double)(-1L));
    int i7 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test0171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0171"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0172"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger((int)' ');
    int i7 = constantPoolGen0.lookupInteger((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0173"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);

  }

  @Test
  public void test0174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0174"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupLong((long)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0175"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen0.getConstant(0);
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1/0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0176"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0177"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupDouble(0.0d);
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i13 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0178"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addClass("");
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n");
    int i12 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);

  }

  @Test
  public void test0179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0179"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i4 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.addInteger(8);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(8, constant9);
    int i12 = constantPoolGen0.addLong((long)(short)100);
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0180"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupLong(1L);
    int i9 = constantPoolGen5.lookupFloat((float)16);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen5.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0181"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i10 = constantPoolGen1.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i14 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n", "");
    org.apache.bcel.classfile.Constant constant16 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant(261, constant16);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 11);

  }

  @Test
  public void test0182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0182"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i6 = constantPoolGen0.lookupLong((long)(short)100);
    java.lang.String str7 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupDouble((double)269);
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0183"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i13 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test0184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0184"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getConstantPool();
    int i15 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i17 = constantPoolGen0.addClass("");
    org.apache.bcel.generic.MethodGen methodGen18 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i19 = constantPoolGen0.addMethodref(methodGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);

  }

  @Test
  public void test0185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0185"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0186"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i11 = constantPoolGen1.lookupFieldref("", "hi!", "hi!");
    int i13 = constantPoolGen1.addDouble(0.0d);
    int i15 = constantPoolGen1.lookupDouble((double)257);
    int i17 = constantPoolGen1.lookupFloat((float)100L);
    int i21 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0187"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i5 = constantPoolGen0.lookupInteger(15);
    org.apache.bcel.classfile.Constant constant7 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(264, constant7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0188"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str9 = constantPoolGen4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n"));

  }

  @Test
  public void test0189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0189"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0190"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0191"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupLong((long)(-1));
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    int i13 = constantPoolGen0.lookupLong((long)0);
    int i17 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Integer[3](bytes = 100)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);

  }

  @Test
  public void test0192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0192"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFloat((float)4);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0193"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(short)10);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.lookupDouble((double)16);
    int i9 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0194"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i7 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0195"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(short)10);
    int i7 = constantPoolGen0.addFloat((float)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0196"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    int i6 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0197"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen4.getConstant((int)' ');
    int i9 = constantPoolGen4.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0198"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i6 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0199"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen1.getConstant((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen1.getConstant(261);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test0200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0200"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    int i9 = constantPoolGen1.lookupDouble((double)320);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0201"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.addFloat((float)(short)100);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen0.addFloat((float)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0202"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    int i7 = constantPoolGen0.addFloat((float)' ');
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n");
    int i11 = constantPoolGen0.addFloat((float)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0203"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i4 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n", "1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.classfile.Constant[] constant_array10 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array10);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen11.getFinalConstantPool();
    int i14 = constantPoolGen11.lookupLong((long)(byte)0);
    int i16 = constantPoolGen11.lookupInteger(6);
    int i18 = constantPoolGen11.lookupFloat(0.0f);
    org.apache.bcel.classfile.Constant constant20 = constantPoolGen11.getConstant((int)(byte)10);
    int i22 = constantPoolGen11.addLong((long)0);
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen0.addConstant(constant9, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test0204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0204"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n\")\n3)CONSTANT_Integer[3](bytes = 100)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test0205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0205"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str4 = constantPoolGen3.toString();
    int i6 = constantPoolGen3.lookupLong((long)10);
    int i9 = constantPoolGen3.addNameAndType("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen3.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0206"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i9 = constantPoolGen1.addLong((long)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    int i16 = constantPoolGen12.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant17 = null;
    org.apache.bcel.classfile.Constant constant18 = null;
    org.apache.bcel.classfile.Constant[] constant_array19 = new org.apache.bcel.classfile.Constant[] { constant18 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen20 = new org.apache.bcel.generic.ConstantPoolGen(constant_array19);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen21 = new org.apache.bcel.generic.ConstantPoolGen(constant_array19);
    org.apache.bcel.classfile.ConstantPool constantPool22 = constantPoolGen21.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen23 = new org.apache.bcel.generic.ConstantPoolGen(constantPool22);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen24 = new org.apache.bcel.generic.ConstantPoolGen(constantPool22);
    // The following exception was thrown during execution in test generation
    try {
    int i25 = constantPoolGen12.addConstant(constant17, constantPoolGen24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool22);

  }

  @Test
  public void test0207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0207"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0208"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant((int)'a', constant4);
    int i7 = constantPoolGen0.addInteger((int)(byte)0);
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    int i14 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0209"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupClass("1)CONSTANT_Integer[3](bytes = 0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0210"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant9);
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen0.getConstant(3);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);

  }

  @Test
  public void test0211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0211"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i7 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0212"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i9 = constantPoolGen0.lookupFloat((float)14);
    int i11 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i13 = constantPoolGen0.lookupFloat((float)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0213"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i11 = constantPoolGen9.addLong(0L);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen9.addMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 256);

  }

  @Test
  public void test0214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0214"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i16 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i18 = constantPoolGen0.lookupUtf8("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    int i20 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i24 = constantPoolGen0.addInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 5.0)\n257)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 14);

  }

  @Test
  public void test0215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0215"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupLong((long)263);
    int i7 = constantPoolGen2.getSize();
    int i9 = constantPoolGen2.lookupLong((-1L));
    int i11 = constantPoolGen2.lookupLong((long)'#');
    int i13 = constantPoolGen2.lookupString("1)CONSTANT_Long[5](bytes = 5)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0216"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.addFloat((float)10);
    int i14 = constantPoolGen1.lookupInteger(260);
    org.apache.bcel.generic.ArrayType arrayType15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen1.addArrayClass(arrayType15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0217"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    int i12 = constantPoolGen0.addInteger(260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0218"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i11 = constantPoolGen0.lookupClass("hi!");
    int i13 = constantPoolGen0.lookupInteger((int)(byte)-1);
    int i15 = constantPoolGen0.addDouble((double)(short)0);
    org.apache.bcel.classfile.Constant constant17 = null;
    constantPoolGen0.setConstant(7, constant17);
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);

  }

  @Test
  public void test0219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0219"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant9);
    int i12 = constantPoolGen0.addFloat((float)262);
    int i14 = constantPoolGen0.lookupClass("");
    int i16 = constantPoolGen0.lookupLong((long)10);
    org.apache.bcel.generic.MethodGen methodGen17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addMethodref(methodGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0220"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0221"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i10 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i15 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 14);

  }

  @Test
  public void test0222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0222"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupDouble((double)262);
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.lookupDouble((double)14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0223"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupLong(100L);
    int i6 = constantPoolGen2.lookupInteger((int)(byte)1);
    int i10 = constantPoolGen2.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n");
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen2.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0224"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.addClass("");
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i12 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i15 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0225"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i6 = constantPoolGen0.getSize();
    java.lang.String str7 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen9.getConstantPool();
    int i12 = constantPoolGen9.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    java.lang.String str13 = constantPoolGen9.toString();
    int i17 = constantPoolGen9.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str13.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0226"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test0227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0227"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i6 = constantPoolGen5.getSize();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen5.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0228"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupInteger((int)(byte)-1);
    int i8 = constantPoolGen1.addString("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n3)CONSTANT_Long[5](bytes = 16)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0229"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addDouble((double)11);
    int i8 = constantPoolGen0.addDouble((double)10.0f);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i12 = constantPoolGen10.addLong((long)269);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 256);

  }

  @Test
  public void test0230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0230"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen3.getSize();
    int i12 = constantPoolGen3.addInteger(18);
    java.lang.String str13 = constantPoolGen3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n"+ "'", str13.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n"));

  }

  @Test
  public void test0231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0231"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i8 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i10 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0232"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i10 = constantPoolGen2.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen2.addLong((long)8);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen2.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0233"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant(1, constant7);
    int i10 = constantPoolGen1.addLong((long)256);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0234"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.addInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0235"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0236"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    java.lang.String str2 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0237"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen5.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i10 = constantPoolGen5.lookupFloat((float)(byte)10);
    int i14 = constantPoolGen5.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n");
    int i16 = constantPoolGen5.lookupLong((long)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0238"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupDouble(0.0d);
    int i9 = constantPoolGen0.addFloat((float)'4');
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0239"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0240"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i5 = constantPoolGen2.getSize();
    int i6 = constantPoolGen2.getSize();
    int i10 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    java.lang.String str11 = constantPoolGen2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n"));

  }

  @Test
  public void test0241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0241"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupLong((long)(short)-1);
    int i8 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0242"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i8 = constantPoolGen6.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i10 = constantPoolGen6.lookupFloat((float)260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0243"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupLong((long)10);
    int i10 = constantPoolGen0.lookupLong((long)8);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getFinalConstantPool();
    int i15 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test0244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0244"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0245"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i5 = constantPoolGen4.getSize();
    int i7 = constantPoolGen4.addUtf8("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n9)CONSTANT_Long[5](bytes = 100)\n10)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test0246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0246"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i9 = constantPoolGen0.addDouble((double)1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0247"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.addFloat(100.0f);
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addLong((long)13);
    int i12 = constantPoolGen1.addInteger(271);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0248"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(0);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i8 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i10 = constantPoolGen0.lookupInteger((int)(short)100);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0249"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i10 = constantPoolGen0.lookupDouble((double)' ');
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i16 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0250"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.getSize();
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.lookupInterfaceMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0251"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addInteger((int)(short)-1);
    int i10 = constantPoolGen0.lookupLong((long)262);
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0252"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    java.lang.String str7 = constantPoolGen0.toString();
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n"));

  }

  @Test
  public void test0253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0253"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(4, constant9);
    int i12 = constantPoolGen0.lookupUtf8("");
    int i14 = constantPoolGen0.lookupDouble(0.0d);
    int i16 = constantPoolGen0.addInteger(23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test0254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0254"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger((int)'a');
    int i6 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0255"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupInteger((int)'4');
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0256"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0257"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i3 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.classfile.Constant[] constant_array5 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array5);
    int i12 = constantPoolGen10.lookupFloat((float)100L);
    int i15 = constantPoolGen10.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen10.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = new org.apache.bcel.generic.ConstantPoolGen(constantPool16);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant4, constantPoolGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test0258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0258"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.lookupDouble(100.0d);
    int i8 = constantPoolGen4.lookupDouble(10.0d);
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.classfile.Constant[] constant_array10 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array10);
    int i13 = constantPoolGen11.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n");
    int i15 = constantPoolGen11.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen4.addConstant(constant9, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);

  }

  @Test
  public void test0259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0259"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.addFloat((float)270);
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);

  }

  @Test
  public void test0260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0260"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addUtf8("");
    java.lang.String str6 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"\")\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0261"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 258)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));

  }

  @Test
  public void test0262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0262"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test0263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0263"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger(12);
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Class[7](name_index = 3)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 32)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0264"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str10 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"));

  }

  @Test
  public void test0265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0265"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen3.setConstant(258, constant7);
    int i12 = constantPoolGen3.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen3.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 261);

  }

  @Test
  public void test0266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0266"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0267"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.lookupLong((long)15);
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0268"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i10 = constantPoolGen1.lookupDouble((double)(short)1);
    int i13 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 5.0)\n257)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0269"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    int i9 = constantPoolGen1.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0270"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.addFloat(100.0f);
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addLong((long)13);
    int i12 = constantPoolGen1.addDouble((double)2);
    int i14 = constantPoolGen1.lookupDouble((double)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0271"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen5.lookupMethodref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 5.0)\n257)null\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    int i15 = constantPoolGen11.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i17 = constantPoolGen11.addLong((long)100);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen5.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 32)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 7);

  }

  @Test
  public void test0272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0272"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    int i7 = constantPoolGen0.addFloat((float)' ');
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n");
    int i11 = constantPoolGen0.lookupFloat(10.0f);
    java.lang.String str12 = constantPoolGen0.toString();
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i19 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n"+ "'", str12.equals("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0273"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.Constant constant2 = null;
    constantPoolGen0.setConstant(2, constant2);
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i13 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_Fieldref[9](class_index = 5, name_and_type_index = 8)\n");
    int i15 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test0274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0274"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i14 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen1.setConstant(18, constant16);
    int i21 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0275"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0276"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addFloat((float)6);
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.addClass("hi!");
    java.lang.String str10 = constantPoolGen7.toString();
    int i14 = constantPoolGen7.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i16 = constantPoolGen7.lookupInteger(13);
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen0.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0277"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addString("");
    int i11 = constantPoolGen5.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    java.lang.String str12 = constantPoolGen5.toString();
    int i14 = constantPoolGen5.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i16 = constantPoolGen5.addLong((long)8);
    int i18 = constantPoolGen5.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n");
    int i22 = constantPoolGen5.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "");
    org.apache.bcel.generic.MethodGen methodGen23 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i24 = constantPoolGen5.addInterfaceMethodref(methodGen23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"+ "'", str12.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));

  }

  @Test
  public void test0278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0278"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen0.addDouble(0.0d);
    int i14 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0279"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen0.addLong((long)8);
    org.apache.bcel.generic.ArrayType arrayType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addArrayClass(arrayType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test0280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0280"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"+ "'", str8.equals("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n"));

  }

  @Test
  public void test0281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0281"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0282"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addFloat((float)(byte)10);
    int i9 = constantPoolGen0.lookupLong((long)(-1));
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant14 = null;
    org.apache.bcel.classfile.Constant[] constant_array15 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen16 = new org.apache.bcel.generic.ConstantPoolGen(constant_array15);
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen16.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen18 = new org.apache.bcel.generic.ConstantPoolGen(constantPool17);
    int i20 = constantPoolGen18.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant22 = null;
    constantPoolGen18.setConstant(258, constant22);
    int i27 = constantPoolGen18.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool28 = constantPoolGen18.getFinalConstantPool();
    int i32 = constantPoolGen18.addInterfaceMethodref("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i33 = constantPoolGen0.addConstant(constant14, constantPoolGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 267);

  }

  @Test
  public void test0283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0283"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1/0)\\n8)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen();
    int i15 = constantPoolGen14.getSize();
    int i17 = constantPoolGen14.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen1.addConstant(constant13, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test0284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0284"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.lookupFloat((float)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0285"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.addDouble((double)(short)10);
    int i9 = constantPoolGen2.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i13 = constantPoolGen2.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen2.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test0286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0286"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i5 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen2.lookupLong((long)0);
    org.apache.bcel.classfile.Constant constant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen2.setConstant(273, constant9);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0287"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen7.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0288"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(8, constant6);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0289"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0290"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    java.lang.String str4 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i14 = constantPoolGen2.lookupMethodref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = 11.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0291"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i7 = constantPoolGen0.lookupString("");
    int i9 = constantPoolGen0.addLong((long)'a');
    java.lang.String str10 = constantPoolGen0.toString();
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen0.getConstant(320);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n"));

  }

  @Test
  public void test0292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0292"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    int i7 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0293"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i12 = constantPoolGen8.lookupFieldref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0294"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen4.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0295"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupInteger((int)'#');
    int i8 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant(12);
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen16 = new org.apache.bcel.generic.ConstantPoolGen(constantPool15);
    int i18 = constantPoolGen16.addDouble((double)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 9);

  }

  @Test
  public void test0296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0296"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.addFloat((float)264);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0297"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen6.getConstant((int)(byte)100);
    org.apache.bcel.classfile.Constant constant12 = null;
    constantPoolGen6.setConstant(268, constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test0298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0298"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.addFloat((float)267);
    int i11 = constantPoolGen2.lookupMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0299"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i8 = constantPoolGen1.lookupFloat((float)(byte)10);
    int i10 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0300"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.lookupFloat((float)10L);
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i11 = constantPoolGen0.addDouble((double)267);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0301"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addInteger(9);
    int i10 = constantPoolGen1.lookupDouble((double)19);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen1.addInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0302"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupLong((long)258);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0303"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen2.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i13 = constantPoolGen2.lookupInteger((int)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen2.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0304"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen0.getConstant((int)(byte)100);
    int i5 = constantPoolGen0.lookupFloat((float)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.addFloat((float)2);
    int i9 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i14 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    java.lang.String str15 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1)CONSTANT_Float[4](bytes = 2.0)\n"+ "'", str15.equals("1)CONSTANT_Float[4](bytes = 2.0)\n"));

  }

  @Test
  public void test0305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0305"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.addDouble((double)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0306"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong((long)261);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i14 = constantPoolGen10.addMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "hi!", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i16 = constantPoolGen10.lookupFloat((float)14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0307"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0308"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant8);
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 100.0)\n", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0309"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i3 = constantPoolGen2.getSize();
    int i5 = constantPoolGen2.addInteger((int)(short)10);
    int i7 = constantPoolGen2.lookupLong((long)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0310"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.addDouble((double)264);
    int i7 = constantPoolGen1.lookupDouble(10.0d);
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i12 = constantPoolGen1.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0311"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    int i14 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i18 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0312"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.lookupFloat((float)'a');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0313"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n");
    int i10 = constantPoolGen4.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen4.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0314"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    int i12 = constantPoolGen10.addInteger(4);
    int i14 = constantPoolGen10.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 11);

  }

  @Test
  public void test0315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0315"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupLong((long)261);
    int i7 = constantPoolGen3.addLong((long)(byte)-1);
    int i9 = constantPoolGen3.addDouble((double)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0316"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i7 = constantPoolGen0.addFloat((float)9);
    int i9 = constantPoolGen0.lookupInteger(0);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    int i13 = constantPoolGen0.addDouble((double)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test0317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0317"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addClass("");
    int i7 = constantPoolGen1.addInteger(21);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0318"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addFloat((float)100);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i8 = constantPoolGen2.lookupString("1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0319"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)10);
    int i8 = constantPoolGen0.lookupInteger(258);
    int i10 = constantPoolGen0.addFloat((float)(byte)-1);
    int i12 = constantPoolGen0.addFloat((float)(short)0);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0320"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addInteger(6);
    int i9 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0321"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i6 = constantPoolGen0.lookupLong((long)' ');
    int i8 = constantPoolGen0.addFloat((float)16);
    int i10 = constantPoolGen0.lookupInteger((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0322"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i9 = constantPoolGen0.addInteger(0);
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0323"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupLong((long)(byte)100);
    int i8 = constantPoolGen0.lookupDouble(10.0d);
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.lookupDouble((double)273);
    int i13 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0324"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addFloat((float)270);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);

  }

  @Test
  public void test0325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0325"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i5 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i7 = constantPoolGen0.addFloat((float)(byte)1);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0326"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i6 = constantPoolGen1.addFloat((float)258);
    int i10 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0327"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.addFieldref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i7 = constantPoolGen0.addFloat((float)(byte)-1);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant(10, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0328"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen6.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen6.setConstant(18, constant10);
    int i13 = constantPoolGen6.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0329"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0330"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant((int)'#');
    int i11 = constantPoolGen0.addDouble((double)(byte)0);
    int i13 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0331"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    int i15 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i18 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen19 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.lookupMethodref(methodGen19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 8);

  }

  @Test
  public void test0332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0332"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.addUtf8("hi!");
    int i10 = constantPoolGen0.addFloat((float)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0333"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen1.lookupLong((long)(-1));
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen1.lookupInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0334"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i14 = constantPoolGen0.lookupLong((long)(byte)0);
    int i15 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);

  }

  @Test
  public void test0335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0335"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i14 = constantPoolGen1.lookupInteger(7);
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen1.getFinalConstantPool();
    int i17 = constantPoolGen1.addInteger(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);

  }

  @Test
  public void test0336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0336"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("hi!", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i7 = constantPoolGen0.lookupInteger(16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0337"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("");
    int i10 = constantPoolGen6.addFloat((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 258);

  }

  @Test
  public void test0338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0338"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)' ');
    int i8 = constantPoolGen0.addLong(1L);
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0339"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0340"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    int i9 = constantPoolGen5.lookupInteger(16);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen5.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0341"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i9 = constantPoolGen0.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i13 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i15 = constantPoolGen0.lookupFloat((float)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0342"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addLong((long)9);
    int i11 = constantPoolGen1.addFloat((float)10L);
    int i13 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i16 = constantPoolGen1.addNameAndType("1)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0343"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i8 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen0.lookupFloat((float)4);
    int i12 = constantPoolGen0.addFloat((float)263);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0344"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)'#', constant9);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0345"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i10 = constantPoolGen0.addDouble((double)256);
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);

  }

  @Test
  public void test0346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0346"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen0.addLong((long)17);
    int i11 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i15 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)null\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 11);

  }

  @Test
  public void test0347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0347"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i10 = constantPoolGen0.addDouble((double)256);
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen12.getSize();
    int i16 = constantPoolGen12.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen12.getFinalConstantPool();
    int i19 = constantPoolGen12.addInteger((int)'a');
    int i21 = constantPoolGen12.addFloat((float)1L);
    int i23 = constantPoolGen12.lookupLong((long)(byte)-1);
    int i24 = constantPoolGen12.getSize();
    // The following exception was thrown during execution in test generation
    try {
    int i25 = constantPoolGen0.addConstant(constant11, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 3);

  }

  @Test
  public void test0348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0348"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0349"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i12 = constantPoolGen1.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "hi!", "");
    int i14 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    int i16 = constantPoolGen1.lookupInteger(13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0350"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.lookupDouble((double)4);
    int i9 = constantPoolGen0.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0351"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i3 = constantPoolGen2.getSize();
    int i5 = constantPoolGen2.addInteger((int)(short)10);
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i9 = constantPoolGen7.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen7.getConstantPool();
    int i12 = constantPoolGen7.addInteger(2);
    int i16 = constantPoolGen7.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i17 = constantPoolGen7.getSize();
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen2.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);

  }

  @Test
  public void test0352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0352"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i6 = constantPoolGen5.getSize();
    int i9 = constantPoolGen5.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen5.lookupInteger((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0353"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i10 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen1.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0354"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.lookupDouble((double)(byte)0);
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen2.setConstant(16, constant10);
    int i13 = constantPoolGen2.addInteger(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0355"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0356"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0357"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(257);
    int i7 = constantPoolGen0.lookupDouble((double)10.0f);
    int i9 = constantPoolGen0.addInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0358"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble(1.0d);
    int i5 = constantPoolGen1.lookupDouble((double)273);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0359"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i12 = constantPoolGen5.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i14 = constantPoolGen5.addClass("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 266);

  }

  @Test
  public void test0360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0360"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen0.lookupLong((long)(short)10);
    org.apache.bcel.classfile.Constant constant13 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(263, constant13);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0361"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "");
    int i12 = constantPoolGen0.addDouble((double)' ');
    int i14 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i17 = constantPoolGen0.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n");
    int i19 = constantPoolGen0.addInteger(268);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);

  }

  @Test
  public void test0362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0362"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addFloat((float)(short)-1);
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n\")\n3)CONSTANT_Integer[3](bytes = 100)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0363"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupDouble((double)3);
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 0.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0364"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i8 = constantPoolGen0.lookupDouble((double)4);
    int i11 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    int i13 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0365"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test0366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0366"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i6 = constantPoolGen0.addFloat((float)(byte)100);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i12 = constantPoolGen0.lookupClass("1)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0367"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    java.lang.String str2 = constantPoolGen0.toString();
    org.apache.bcel.generic.MethodGen methodGen3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i4 = constantPoolGen0.lookupInterfaceMethodref(methodGen3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test0368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0368"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addDouble((double)1);
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.lookupClass("1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    int i12 = constantPoolGen1.lookupDouble((double)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0369"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i8 = constantPoolGen0.lookupInteger(0);
    int i12 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i16 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);

  }

  @Test
  public void test0370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0370"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i9 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 257)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0371"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen0.setConstant((int)(byte)100, constant5);
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0372"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.addLong((long)(byte)0);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(260, constant8);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0373"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i4 = constantPoolGen0.addFloat((float)259);
    int i6 = constantPoolGen0.addDouble((double)1.0f);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);

  }

  @Test
  public void test0374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0374"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    int i15 = constantPoolGen0.lookupClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i19 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0375"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupLong(10L);
    int i9 = constantPoolGen0.addInteger(265);
    int i11 = constantPoolGen0.addInteger(257);
    int i13 = constantPoolGen0.addInteger((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0376"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i9 = constantPoolGen1.lookupFloat((float)' ');
    int i11 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen1.getConstant(16);
    java.lang.String str14 = constantPoolGen1.toString();
    int i18 = constantPoolGen1.addFieldref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 6);

  }

  @Test
  public void test0377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0377"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i7 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i9 = constantPoolGen0.addLong((long)5);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i15 = constantPoolGen0.lookupUtf8("1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i17 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool18 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool18);

  }

  @Test
  public void test0378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0378"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant((int)(short)100);
    int i10 = constantPoolGen0.addMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0379"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    int i6 = constantPoolGen2.lookupFloat((float)266);
    int i9 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0380"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    int i14 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i18 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 18);

  }

  @Test
  public void test0381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0381"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.addDouble((double)(-1L));
    java.lang.String str9 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n"+ "'", str9.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0382"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i7 = constantPoolGen1.addNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen1.addClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i11 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0383"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen2.getConstantPool();
    int i7 = constantPoolGen2.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0384"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i6 = constantPoolGen0.getSize();
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen0.getConstant((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0385"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.addLong((long)100);
    int i9 = constantPoolGen2.addFloat((float)100L);
    int i11 = constantPoolGen2.addDouble((double)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0386"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i9 = constantPoolGen0.lookupDouble((double)272);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0387"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.getSize();
    int i10 = constantPoolGen0.addFloat((float)260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0388"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFloat((float)100L);
    int i8 = constantPoolGen1.lookupLong((long)256);
    int i10 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_Fieldref[9](class_index = 5, name_and_type_index = 8)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0389"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);

  }

  @Test
  public void test0390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0390"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("", "hi!", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i10 = constantPoolGen3.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    org.apache.bcel.generic.ObjectType objectType11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen3.addClass(objectType11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 257);

  }

  @Test
  public void test0391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0391"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i9 = constantPoolGen2.lookupDouble((double)8);
    int i11 = constantPoolGen2.lookupLong((long)7);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen2.getConstantPool();
    int i14 = constantPoolGen2.lookupFloat((float)19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0392"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addInteger(6);
    int i7 = constantPoolGen1.lookupFloat(0.0f);
    int i11 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0393"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addFloat((float)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i12 = constantPoolGen7.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen7.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0394"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen8.addClass("hi!");
    int i12 = constantPoolGen8.lookupString("");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen8.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen8.getFinalConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addConstant(constant7, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0395"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 0)\n2)CONSTANT_Long[5](bytes = 97)\n3)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    int i11 = constantPoolGen0.lookupLong((long)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0396"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.addInteger(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0397"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupInteger(9);
    java.lang.String str7 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n"+ "'", str7.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n"));

  }

  @Test
  public void test0398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0398"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i10 = constantPoolGen5.lookupFloat(0.0f);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen5.getConstantPool();
    int i13 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    int i15 = constantPoolGen5.addInteger((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);

  }

  @Test
  public void test0399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0399"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen10.addFloat((float)(-1L));
    int i14 = constantPoolGen10.lookupFloat((float)0);
    int i16 = constantPoolGen10.addClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i18 = constantPoolGen10.lookupInteger(268);
    int i20 = constantPoolGen10.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i21 = constantPoolGen0.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0400"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen2.getConstantPool();
    java.lang.String str4 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addDouble((double)1);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test0401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0401"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupDouble((double)264);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(261, constant9);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0402"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant9);
    int i12 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i14 = constantPoolGen0.lookupFloat((float)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0403"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i9 = constantPoolGen0.addInteger(269);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0404"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i8 = constantPoolGen0.lookupFloat((float)(byte)100);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0405"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupLong((long)261);
    int i7 = constantPoolGen3.addLong((long)(byte)-1);
    int i9 = constantPoolGen3.lookupLong((long)22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0406"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(0, constant6);
    int i9 = constantPoolGen0.addUtf8("");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0407"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0408"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    int i15 = constantPoolGen11.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test0409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0409"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i7 = constantPoolGen1.addInterfaceMethodref("hi!", "", "");
    int i9 = constantPoolGen1.lookupFloat((float)9);
    java.lang.String str10 = constantPoolGen1.toString();
    int i12 = constantPoolGen1.addDouble((double)16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0410"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant((int)'#');
    int i11 = constantPoolGen0.addDouble((double)(byte)0);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getFinalConstantPool();
    int i16 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);

  }

  @Test
  public void test0411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0411"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupFloat((float)' ');
    int i8 = constantPoolGen0.addLong((long)(-1));
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0412"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.addString("");
    int i15 = constantPoolGen0.lookupFloat((float)266);
    java.lang.String str16 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n7)CONSTANT_NameAndType[12](name_index = 6, signature_index = 6)\n8)CONSTANT_String[8](string_index = 1)\n"+ "'", str16.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n7)CONSTANT_NameAndType[12](name_index = 6, signature_index = 6)\n8)CONSTANT_String[8](string_index = 1)\n"));

  }

  @Test
  public void test0413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0413"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0414"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen3.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i11 = constantPoolGen3.addDouble((double)100);
    int i13 = constantPoolGen3.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i15 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0415"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupDouble((double)0);
    int i8 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i10 = constantPoolGen0.addFloat((float)257);
    org.apache.bcel.classfile.Constant constant12 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant12);

  }

  @Test
  public void test0416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0416"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i12 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0417"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupFloat((-1.0f));
    int i10 = constantPoolGen0.addLong((long)(byte)0);
    int i14 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    java.lang.String str15 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n"+ "'", str15.equals("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n"));

  }

  @Test
  public void test0418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0418"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n", "1)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0419"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.lookupUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i12 = constantPoolGen1.addLong((long)15);
    int i14 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 7);

  }

  @Test
  public void test0420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0420"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0421"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen1.lookupInteger(259);
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0422"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger(18);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    int i11 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0423"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i7 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen1.setConstant((int)(byte)10, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0424"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.addDouble(10.0d);
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i12 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "");
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);

  }

  @Test
  public void test0425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0425"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getFinalConstantPool();
    int i9 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen2.lookupLong((long)'a');
    int i13 = constantPoolGen2.addInteger(270);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test0426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0426"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupDouble((-1.0d));
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0427"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addDouble((double)(byte)0);
    int i8 = constantPoolGen2.lookupDouble(0.0d);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0428"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen2.getConstantPool();
    int i8 = constantPoolGen2.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen2.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0429"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    int i8 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test0430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0430"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Integer[3](bytes = 2)\\n3)CONSTANT_Long[5](bytes = 0)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0431"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0432"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant((int)(byte)-1, constant11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0433"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    int i5 = constantPoolGen0.lookupDouble((double)263);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0434"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen0.addLong((long)17);
    int i11 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i14 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen0.setConstant((int)(short)0, constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test0435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0435"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addFloat((float)16);
    int i7 = constantPoolGen0.addLong((long)19);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0436"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addDouble((double)100);
    int i6 = constantPoolGen0.addInteger((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test0437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0437"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i8 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i14 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i16 = constantPoolGen0.lookupLong((long)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0438"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(5, constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);

  }

  @Test
  public void test0439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0439"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i9 = constantPoolGen3.lookupLong((long)16);
    org.apache.bcel.classfile.Constant constant11 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen3.setConstant(264, constant11);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0440"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    java.lang.String str6 = constantPoolGen1.toString();
    int i8 = constantPoolGen1.lookupDouble((double)267);
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i15 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    int i17 = constantPoolGen1.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0441"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupDouble((double)5);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i13 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i15 = constantPoolGen1.lookupString("1)CONSTANT_Float[4](bytes = 11.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0442"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0443"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i10 = constantPoolGen6.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen6.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0444"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant((int)(short)1, constant7);
    int i10 = constantPoolGen0.addLong(100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test0445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0445"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    int i7 = constantPoolGen0.lookupFloat((float)5);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(19, constant9);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.addMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0446"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(6, constant5);
    int i8 = constantPoolGen1.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0447"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen6.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0448"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i9 = constantPoolGen0.addLong((long)16);
    int i11 = constantPoolGen0.lookupLong((long)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0449"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    int i9 = constantPoolGen1.addFloat(10.0f);
    int i11 = constantPoolGen1.addDouble((double)(short)10);
    int i13 = constantPoolGen1.lookupDouble((double)262);
    int i15 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0450"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i10 = constantPoolGen8.lookupInteger((int)' ');
    int i14 = constantPoolGen8.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i16 = constantPoolGen8.addString("");
    int i18 = constantPoolGen8.addInteger((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 8);

  }

  @Test
  public void test0451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0451"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupLong((long)261);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i10 = constantPoolGen0.lookupDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0452"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i15 = constantPoolGen0.addInteger((int)(byte)10);
    org.apache.bcel.generic.ArrayType arrayType16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen0.addArrayClass(arrayType16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0453"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.lookupFloat((float)10L);
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);

  }

  @Test
  public void test0454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0454"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i13 = constantPoolGen3.lookupDouble(10.0d);
    int i17 = constantPoolGen3.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i21 = constantPoolGen3.addMethodref("1)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 11);

  }

  @Test
  public void test0455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0455"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen0.addInteger(264);
    int i13 = constantPoolGen0.addFloat((float)(short)100);
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0456"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);

  }

  @Test
  public void test0457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0457"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen1.getSize();
    int i7 = constantPoolGen1.getSize();
    int i9 = constantPoolGen1.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0458"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i10 = constantPoolGen6.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    java.lang.String str11 = constantPoolGen6.toString();
    int i13 = constantPoolGen6.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str11.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 257);

  }

  @Test
  public void test0459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0459"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    int i4 = constantPoolGen0.addDouble((double)100);
    int i6 = constantPoolGen0.lookupLong((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0460"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    int i13 = constantPoolGen0.addFieldref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i15 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    org.apache.bcel.classfile.Constant constant17 = null;
    constantPoolGen0.setConstant(12, constant17);
    int i20 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);

  }

  @Test
  public void test0461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0461"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i3 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen0.addInterfaceMethodref(methodGen4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test0462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0462"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1/0)\\n8)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n", "", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0463"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i6 = constantPoolGen4.lookupLong(10L);
    int i8 = constantPoolGen4.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i10 = constantPoolGen4.addInteger((int)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen4.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test0464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0464"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupLong((long)100);
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i18 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    int i22 = constantPoolGen1.addFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n");
    int i24 = constantPoolGen1.addInteger(16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 19);

  }

  @Test
  public void test0465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0465"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen3.lookupLong((long)'a');
    int i10 = constantPoolGen3.lookupDouble((double)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0466"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addDouble((double)266);
    int i11 = constantPoolGen0.lookupInteger(262);
    int i13 = constantPoolGen0.addInteger(0);
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str4.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);

  }

  @Test
  public void test0467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0467"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    int i12 = constantPoolGen0.addLong((long)(byte)1);
    org.apache.bcel.classfile.Constant constant14 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(267, constant14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0468"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    int i7 = constantPoolGen0.lookupFloat((float)18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0469"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i10 = constantPoolGen3.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i12 = constantPoolGen3.addInteger(262);
    org.apache.bcel.generic.ArrayType arrayType13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen3.addArrayClass(arrayType13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0470"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i8 = constantPoolGen1.addNameAndType("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0471"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupUtf8("");
    int i9 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i13 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    int i15 = constantPoolGen1.addFloat((float)263);
    int i17 = constantPoolGen1.addDouble((double)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 16);

  }

  @Test
  public void test0472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0472"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i6 = constantPoolGen4.lookupLong(10L);
    int i8 = constantPoolGen4.addClass("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0473"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupLong((long)(-1));
    int i13 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen0.lookupLong(1L);
    int i19 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 9);

  }

  @Test
  public void test0474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0474"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i12 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i14 = constantPoolGen1.lookupDouble((double)(short)-1);
    int i16 = constantPoolGen1.addFloat(0.0f);
    int i18 = constantPoolGen1.addLong((long)259);
    int i22 = constantPoolGen1.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 12);

  }

  @Test
  public void test0475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0475"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.addInteger(15);
    int i8 = constantPoolGen0.addString("");
    int i10 = constantPoolGen0.addLong((long)18);
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0476"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addLong((long)257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0477"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0478"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInterfaceMethodref("", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i11 = constantPoolGen7.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen7.getConstant(100);
    java.lang.String str14 = constantPoolGen7.toString();
    int i17 = constantPoolGen7.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "");
    int i21 = constantPoolGen7.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Float[4](bytes = 100.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0479"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addFloat((float)4);
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i15 = constantPoolGen0.addDouble((double)263);
    int i17 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);

  }

  @Test
  public void test0480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0480"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("");
    int i10 = constantPoolGen6.lookupDouble((double)2);
    int i13 = constantPoolGen6.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i15 = constantPoolGen6.addFloat((float)'a');
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen6.getConstantPool();
    int i19 = constantPoolGen6.addNameAndType("1)CONSTANT_Long[5](bytes = 258)\n2)null\n", "1)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 264);

  }

  @Test
  public void test0481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0481"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger(4);
    int i5 = constantPoolGen1.addClass("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n3)CONSTANT_Long[5](bytes = 16)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0482"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen2.getConstantPool();
    java.lang.String str4 = constantPoolGen2.toString();
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test0483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0483"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n", "");
    int i11 = constantPoolGen3.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n7)CONSTANT_NameAndType[12](name_index = 6, signature_index = 6)\n8)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0484"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    int i6 = constantPoolGen2.lookupUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0485"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen3.getFinalConstantPool();
    int i10 = constantPoolGen3.addUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 262);

  }

  @Test
  public void test0486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0486"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i13 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i16 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);

  }

  @Test
  public void test0487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0487"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(3, constant4);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0488"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i7 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen0.setConstant(7, constant11);
    int i15 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.Constant constant17 = null;
    constantPoolGen0.setConstant(5, constant17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0489"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0490"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.Constant constant2 = null;
    constantPoolGen0.setConstant((int)(short)1, constant2);
    int i4 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0491"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.lookupFloat((float)'a');
    int i10 = constantPoolGen0.lookupFloat((float)(short)0);
    int i12 = constantPoolGen0.lookupLong((long)(short)0);
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.classfile.Constant[] constant_array14 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = new org.apache.bcel.generic.ConstantPoolGen(constant_array14);
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen15.getFinalConstantPool();
    int i18 = constantPoolGen15.lookupLong(0L);
    int i21 = constantPoolGen15.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant13, constantPoolGen15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);

  }

  @Test
  public void test0492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0492"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addDouble(1.0d);
    int i7 = constantPoolGen1.lookupInteger((int)(short)-1);
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0493"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i8 = constantPoolGen2.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "hi!");
    int i10 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    int i14 = constantPoolGen12.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 257);

  }

  @Test
  public void test0494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0494"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupDouble((double)262);
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.addFloat((float)'#');
    int i13 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0495"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.addDouble((double)17);
    int i6 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0496"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    int i6 = constantPoolGen0.lookupDouble((double)258);
    int i10 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0497"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupLong(10L);
    int i7 = constantPoolGen0.addFloat((float)9);
    int i9 = constantPoolGen0.lookupInteger(0);
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i13 = constantPoolGen0.addDouble((double)10L);
    int i14 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test0498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0498"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i4 = constantPoolGen0.lookupDouble((double)(-1L));
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0499"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInteger(260);
    int i9 = constantPoolGen0.lookupFloat((float)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0500"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.lookupLong((long)256);
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.classfile.Constant[] constant_array9 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constant_array9);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen10.getFinalConstantPool();
    int i13 = constantPoolGen10.addString("hi!");
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addConstant(constant8, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test0501() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0501"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i10 = constantPoolGen5.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0502() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0502"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addInteger((int)(short)10);
    int i9 = constantPoolGen1.lookupDouble((double)266);
    java.lang.String str10 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Integer[3](bytes = 10)\n"+ "'", str10.equals("1)CONSTANT_Integer[3](bytes = 10)\n"));

  }

  @Test
  public void test0503() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0503"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupLong((long)(byte)1);
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i7 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "");
    int i15 = constantPoolGen0.addLong(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test0504() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0504"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i6 = constantPoolGen1.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0505() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0505"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256/0)\\n4)null\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0506() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0506"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);

  }

  @Test
  public void test0507() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0507"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i9 = constantPoolGen1.lookupUtf8("hi!");
    int i10 = constantPoolGen1.getSize();
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0508() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0508"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupLong((long)(byte)0);
    int i6 = constantPoolGen1.lookupInteger(6);
    int i8 = constantPoolGen1.lookupFloat(0.0f);
    int i10 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i14 = constantPoolGen1.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0509() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0509"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addDouble((double)'a');
    java.lang.String str9 = constantPoolGen1.toString();
    int i11 = constantPoolGen1.addLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0510() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0510"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.classfile.Constant constant5 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant(262, constant5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test0511() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0511"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    int i9 = constantPoolGen4.lookupFieldref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i11 = constantPoolGen4.addInteger(7);
    int i13 = constantPoolGen4.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0512() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0512"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupLong((long)7);
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0513() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0513"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(10);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    int i9 = constantPoolGen0.addInteger(258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0514() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0514"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addDouble((double)11);
    int i8 = constantPoolGen0.addDouble((double)10.0f);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0515() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0515"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i10 = constantPoolGen4.addString("");
    int i14 = constantPoolGen4.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0516() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0516"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    int i14 = constantPoolGen1.addMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i18 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i20 = constantPoolGen1.lookupDouble((double)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0517() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0517"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addLong((long)17);
    int i8 = constantPoolGen0.addInteger(263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0518() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0518"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.addDouble((double)269);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 256);

  }

  @Test
  public void test0519() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0519"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Float[4](bytes = 11.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i18 = constantPoolGen0.addFloat((float)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 6);

  }

  @Test
  public void test0520() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0520"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen5.setConstant(262, constant7);
    int i10 = constantPoolGen5.addFloat((float)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 256);

  }

  @Test
  public void test0521() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0521"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    java.lang.String str6 = constantPoolGen5.toString();
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen5.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str6.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));

  }

  @Test
  public void test0522() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0522"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    int i16 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)null\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0523() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0523"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupLong((long)(short)10);
    int i8 = constantPoolGen0.lookupDouble(0.0d);
    int i10 = constantPoolGen0.lookupDouble((double)(byte)0);
    int i12 = constantPoolGen0.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0524() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0524"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0525() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0525"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    int i7 = constantPoolGen1.lookupFloat((float)100);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0526() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0526"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen0.addDouble(0.0d);
    int i13 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i15 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0527() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0527"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i7 = constantPoolGen3.lookupFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n", "");
    int i9 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0528() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0528"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen9.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0529() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0529"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)5);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Long[5](bytes = 5)\n2)null\n"+ "'", str3.equals("1)CONSTANT_Long[5](bytes = 5)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);

  }

  @Test
  public void test0530() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0530"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen0.getConstant(0);
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1/0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i16 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);

  }

  @Test
  public void test0531() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0531"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupFloat((float)(-1L));
    int i9 = constantPoolGen0.lookupLong((long)261);
    int i11 = constantPoolGen0.addDouble((double)6);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test0532() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0532"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i14 = constantPoolGen1.lookupFloat((float)12);
    int i16 = constantPoolGen1.lookupFloat((float)16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0533() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0533"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen6.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0534() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0534"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i11 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n9)CONSTANT_Long[5](bytes = 100)\n10)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0535() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0535"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupInteger((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 2)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 2)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0536() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0536"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(0);
    int i6 = constantPoolGen0.addLong((long)11);
    int i8 = constantPoolGen0.addLong((long)16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0537() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0537"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i7 = constantPoolGen1.addFloat((float)9);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen1.setConstant(0, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test0538() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0538"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble((double)7);
    int i7 = constantPoolGen3.lookupLong((long)270);
    int i11 = constantPoolGen3.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0539() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0539"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    int i8 = constantPoolGen2.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0540() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0540"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen1.lookupLong((long)263);
    int i14 = constantPoolGen1.lookupFloat((float)20);
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);

  }

  @Test
  public void test0541() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0541"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant((int)(short)10);
    int i9 = constantPoolGen0.addInteger(100);
    int i11 = constantPoolGen0.addFloat((float)265);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0542() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0542"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addDouble((double)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0543() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0543"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    java.lang.String str7 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i13 = constantPoolGen1.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i15 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Float[4](bytes = -1.0)\n"+ "'", str7.equals("1)CONSTANT_Float[4](bytes = -1.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0544() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0544"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i4 = constantPoolGen0.getSize();
    int i5 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0545() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0545"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i11 = constantPoolGen1.getSize();
    int i14 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i16 = constantPoolGen1.lookupDouble((double)266);
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);

  }

  @Test
  public void test0546() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0546"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i5 = constantPoolGen1.lookupInteger((int)(byte)-1);
    int i7 = constantPoolGen1.lookupFloat((-1.0f));
    org.apache.bcel.classfile.Constant constant8 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen9.getSize();
    int i12 = constantPoolGen9.addString("");
    int i15 = constantPoolGen9.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i17 = constantPoolGen9.lookupString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i19 = constantPoolGen9.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.addConstant(constant8, constantPoolGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0547() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0547"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n", "");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i14 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0548() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0548"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger((int)(short)10);
    java.lang.String str7 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0549() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0549"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test0550() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0550"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(7);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n"+ "'", str9.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0551() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0551"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i7 = constantPoolGen0.lookupDouble((double)2);
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i13 = constantPoolGen0.lookupDouble((double)22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0552() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0552"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getConstantPool();
    int i12 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0553() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0553"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i7 = constantPoolGen0.lookupLong((long)(byte)100);
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0554() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0554"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupDouble((double)10L);
    int i8 = constantPoolGen0.lookupDouble((double)'#');
    int i10 = constantPoolGen0.lookupLong((long)2);
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0555() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0555"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.addFloat((float)259);
    java.lang.String str9 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    int i14 = constantPoolGen12.lookupLong((long)10);
    int i16 = constantPoolGen12.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen12.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen18 = new org.apache.bcel.generic.ConstantPoolGen(constantPool17);
    int i20 = constantPoolGen18.lookupDouble((double)0.0f);
    int i24 = constantPoolGen18.addMethodref("", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i26 = constantPoolGen18.lookupInteger(6);
    int i28 = constantPoolGen18.lookupLong((long)16);
    int i31 = constantPoolGen18.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i32 = constantPoolGen0.addConstant(constant10, constantPoolGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n"+ "'", str9.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));

  }

  @Test
  public void test0556() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0556"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen1.getConstant(257);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);

  }

  @Test
  public void test0557() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0557"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((-1));
    int i8 = constantPoolGen0.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.lookupInteger(272);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0558() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0558"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addInteger(261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0559() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0559"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i5 = constantPoolGen0.addInteger((int)(byte)-1);
    java.lang.String str6 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.addDouble((double)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Integer[3](bytes = -1)\n"+ "'", str6.equals("1)CONSTANT_Integer[3](bytes = -1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0560() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0560"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupLong((long)7);
    int i7 = constantPoolGen0.addDouble(0.0d);
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen0.addFloat((float)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0561() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0561"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    int i6 = constantPoolGen2.addLong((long)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0562() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0562"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    org.apache.bcel.generic.ArrayType arrayType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = constantPoolGen2.addArrayClass(arrayType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));

  }

  @Test
  public void test0563() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0563"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i9 = constantPoolGen0.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0564() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0564"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i10 = constantPoolGen5.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen5.lookupFloat((float)259);
    int i14 = constantPoolGen5.addString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0565() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0565"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i7 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "");
    int i13 = constantPoolGen3.lookupClass("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0566() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0566"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen0.lookupUtf8("hi!");
    int i11 = constantPoolGen0.lookupLong((long)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0567() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0567"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.addLong((long)0);
    int i10 = constantPoolGen2.lookupInteger(257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0568() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0568"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Long[5](bytes = 1)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Long[5](bytes = 1)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0569() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0569"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i7 = constantPoolGen1.addMethodref("", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen1.addString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);

  }

  @Test
  public void test0570() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0570"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupInteger(263);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0571() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0571"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(100);
    java.lang.String str7 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "");
    java.lang.String str11 = constantPoolGen0.toString();
    int i13 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test0572() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0572"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupDouble((double)15);
    int i8 = constantPoolGen0.getSize();
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 0.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);

  }

  @Test
  public void test0573() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0573"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    int i7 = constantPoolGen0.lookupInteger(13);
    int i9 = constantPoolGen0.addFloat(1.0f);
    int i13 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0574() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0574"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addFloat(0.0f);
    int i9 = constantPoolGen0.addDouble((double)256);
    int i11 = constantPoolGen0.addFloat((float)4);
    int i15 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    org.apache.bcel.classfile.Constant constant17 = null;
    constantPoolGen0.setConstant((int)'a', constant17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 13);

  }

  @Test
  public void test0575() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0575"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0576() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0576"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)0);
    int i7 = constantPoolGen0.addLong((long)(short)-1);
    int i9 = constantPoolGen0.addFloat(10.0f);
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i15 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0577() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0577"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.lookupFloat((float)1);
    int i7 = constantPoolGen0.lookupUtf8("");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant(12);
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i13 = constantPoolGen0.addFloat((float)271);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0578() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0578"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i9 = constantPoolGen1.addInteger((int)'4');
    int i11 = constantPoolGen1.addFloat((float)1);
    int i12 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test0579() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0579"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0580() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0580"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(10);
    int i6 = constantPoolGen0.addFloat((float)'a');
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0581() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0581"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test0582() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0582"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.addDouble(10.0d);
    int i9 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i11 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0583() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0583"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i4 = constantPoolGen0.lookupDouble((double)(-1L));
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    java.lang.String str10 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0584() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0584"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i10 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    org.apache.bcel.classfile.Constant constant12 = null;
    constantPoolGen0.setConstant((int)(byte)0, constant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0585() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0585"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("");
    int i10 = constantPoolGen6.lookupDouble((double)2);
    int i12 = constantPoolGen6.lookupLong((long)19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0586() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0586"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.addDouble((double)261);
    int i9 = constantPoolGen1.lookupInteger(22);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"+ "'", str5.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0587() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0587"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupLong((long)100);
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i18 = constantPoolGen1.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen1.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);

  }

  @Test
  public void test0588() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0588"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i14 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"+ "'", str9.equals("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test0589() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0589"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    int i7 = constantPoolGen0.lookupDouble((double)4);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test0590() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0590"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0591() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0591"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i6 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    int i8 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    java.lang.String str9 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addDouble((double)265);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n"+ "'", str9.equals("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test0592() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0592"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i8 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i10 = constantPoolGen0.lookupFloat((float)2);
    java.lang.String str11 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"+ "'", str11.equals("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n"));

  }

  @Test
  public void test0593() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0593"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addDouble((double)262);
    int i7 = constantPoolGen0.lookupInteger(13);
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0594() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0594"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen3.getConstantPool();
    int i12 = constantPoolGen3.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.Constant constant13 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen14 = new org.apache.bcel.generic.ConstantPoolGen();
    int i16 = constantPoolGen14.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen14.getFinalConstantPool();
    int i18 = constantPoolGen14.getSize();
    int i22 = constantPoolGen14.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen3.addConstant(constant13, constantPoolGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 6);

  }

  @Test
  public void test0595() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0595"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen6.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0596() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0596"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen3.lookupInteger((-1));
    int i9 = constantPoolGen3.addUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0597() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0597"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen6.getConstant((int)(byte)100);
    int i12 = constantPoolGen6.addDouble((double)20);
    int i15 = constantPoolGen6.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i17 = constantPoolGen6.addString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 264);

  }

  @Test
  public void test0598() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0598"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen11.getConstantPool();
    int i14 = constantPoolGen11.addFloat(10.0f);
    int i16 = constantPoolGen11.addInteger(0);
    int i18 = constantPoolGen11.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen11.getConstantPool();
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.addConstant(constant10, constantPoolGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);

  }

  @Test
  public void test0599() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0599"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 16);

  }

  @Test
  public void test0600() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0600"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupFloat((float)(-1L));
    int i7 = constantPoolGen1.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n3)CONSTANT_Long[5](bytes = 16)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0601() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0601"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getFinalConstantPool();
    int i7 = constantPoolGen2.lookupInteger((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0602() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0602"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i6 = constantPoolGen0.lookupInteger(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0603() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0603"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i7 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i9 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    int i11 = constantPoolGen0.addFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);

  }

  @Test
  public void test0604() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0604"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupUtf8("hi!");
    int i6 = constantPoolGen2.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen2.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0605() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0605"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0606() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0606"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i10 = constantPoolGen1.addString("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    java.lang.String str13 = constantPoolGen12.toString();
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen12.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str13.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));

  }

  @Test
  public void test0607() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0607"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i3 = constantPoolGen0.getSize();
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0608() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0608"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addInteger(256);
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0609() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0609"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.addLong((long)18);
    int i14 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Integer[3](bytes = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0610() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0610"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.lookupNameAndType("hi!", "");
    int i9 = constantPoolGen0.addMethodref("", "hi!", "");
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i15 = constantPoolGen0.addInteger((int)(byte)10);
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);

  }

  @Test
  public void test0611() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0611"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen6.getConstant((int)'a');
    int i10 = constantPoolGen6.lookupUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0612() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0612"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i7 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.getSize();
    int i10 = constantPoolGen0.addFloat((float)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test0613() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0613"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen7.addInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0614() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0614"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    java.lang.String str7 = constantPoolGen0.toString();
    int i11 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);

  }

  @Test
  public void test0615() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0615"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Float[4](bytes = 261.0)\n257)CONSTANT_Float[4](bytes = 265.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0616() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0616"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(1);
    int i6 = constantPoolGen0.addInteger(261);
    java.lang.String str7 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n"+ "'", str7.equals("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0617() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0617"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen4.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 256.0)\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen4.lookupMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0618() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0618"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addDouble((double)(byte)0);
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen2.setConstant((int)'a', constant8);
    int i11 = constantPoolGen2.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i13 = constantPoolGen2.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n");
    int i15 = constantPoolGen2.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    int i19 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);

  }

  @Test
  public void test0619() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0619"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Class[7](name_index = 3)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0620() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0620"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupDouble(0.0d);
    int i8 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    java.lang.String str9 = constantPoolGen0.toString();
    java.lang.String str10 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_Fieldref[9](class_index = 5, name_and_type_index = 8)\n");
    int i14 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"+ "'", str10.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test0621() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0621"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "hi!", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i16 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i20 = constantPoolGen0.addFieldref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i24 = constantPoolGen0.addFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i26 = constantPoolGen0.addDouble((double)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 24);

  }

  @Test
  public void test0622() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0622"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInteger(260);
    int i9 = constantPoolGen0.lookupFloat((float)(byte)100);
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0623() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0623"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.lookupDouble((double)4);
    org.apache.bcel.classfile.Constant constant7 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(256, constant7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0624() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0624"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n7)CONSTANT_NameAndType[12](name_index = 6, signature_index = 6)\n8)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0625() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0625"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test0626() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0626"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger(12);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i10 = constantPoolGen7.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen7.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 32)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test0627() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0627"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.lookupDouble((double)262);
    int i10 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    int i12 = constantPoolGen0.lookupDouble((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0628() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0628"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen3.getSize();
    int i10 = constantPoolGen3.lookupFloat((float)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0629() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0629"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i8 = constantPoolGen1.lookupDouble((double)(-1));
    int i12 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i14 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0630() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0630"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen5.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i12 = constantPoolGen5.addLong((long)268);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 259);

  }

  @Test
  public void test0631() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0631"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Float[4](bytes = 0.0)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0632() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0632"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    int i8 = constantPoolGen1.lookupFloat((float)(short)0);
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen1.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0633() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0633"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen3.getConstant(1);
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen3.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test0634() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0634"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen2.lookupClass("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen2.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0635() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0635"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    org.apache.bcel.generic.ArrayType arrayType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen3.addArrayClass(arrayType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);

  }

  @Test
  public void test0636() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0636"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger(18);
    int i7 = constantPoolGen0.addFloat(1.0f);
    int i9 = constantPoolGen0.addInteger(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str3.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0637() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0637"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addFloat((float)0);
    int i7 = constantPoolGen1.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen1.addString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i13 = constantPoolGen1.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = -1)\n");
    int i16 = constantPoolGen1.lookupNameAndType("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0638() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0638"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0639() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0639"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.lookupFloat((float)15);
    int i9 = constantPoolGen1.addDouble(10.0d);
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    int i14 = constantPoolGen12.lookupLong((long)10);
    int i16 = constantPoolGen12.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen12.getFinalConstantPool();
    int i19 = constantPoolGen12.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i20 = constantPoolGen12.getSize();
    int i22 = constantPoolGen12.addFloat((float)14);
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen1.addConstant(constant10, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 3);

  }

  @Test
  public void test0640() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0640"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 258)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n\")\n3)CONSTANT_Integer[3](bytes = 100)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0641() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0641"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.addInteger(257);
    java.lang.String str5 = constantPoolGen1.toString();
    int i7 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 257)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 257)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0642() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0642"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 16.0)\n2)CONSTANT_Long[5](bytes = 19)\n3)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    int i13 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Float[4](bytes = 261.0)\n257)CONSTANT_Float[4](bytes = 265.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0643() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0643"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i8 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen0.lookupLong((long)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0644() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0644"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i5 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test0645() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0645"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(4);
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n", "1)CONSTANT_Float[4](bytes = 100.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0646() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0646"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i12 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i14 = constantPoolGen1.lookupDouble((double)(short)-1);
    int i16 = constantPoolGen1.addFloat(0.0f);
    int i20 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n\")\n3)CONSTANT_Integer[3](bytes = 100)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0647() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0647"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen4.addDouble((double)10L);
    int i8 = constantPoolGen4.lookupFloat((float)4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0648() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0648"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen0.addInteger(264);
    int i13 = constantPoolGen0.addFloat((float)(short)100);
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.lookupMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 9);

  }

  @Test
  public void test0649() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0649"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupDouble((double)(byte)1);
    int i9 = constantPoolGen1.addFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i10 = constantPoolGen1.getSize();
    int i12 = constantPoolGen1.addLong((long)16);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen1.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0650() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0650"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1.0f);
    int i6 = constantPoolGen1.addLong((long)9);
    org.apache.bcel.generic.ObjectType objectType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addClass(objectType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0651() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0651"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0652() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0652"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    int i14 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i16 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i18 = constantPoolGen0.lookupFloat((float)' ');
    org.apache.bcel.classfile.ConstantPool constantPool19 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool19);

  }

  @Test
  public void test0653() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0653"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen1.addUtf8("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0654() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0654"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i5 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    int i7 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen3.getFinalConstantPool();
    int i10 = constantPoolGen3.lookupLong((long)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0655() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0655"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.addInteger(20);
    int i8 = constantPoolGen1.addLong((long)17);
    int i10 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);

  }

  @Test
  public void test0656() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0656"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 0)\n2)CONSTANT_Long[5](bytes = 97)\n3)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);

  }

  @Test
  public void test0657() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0657"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    int i7 = constantPoolGen0.addInteger(264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0658() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0658"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen6.addString("");
    int i10 = constantPoolGen6.lookupDouble((double)2);
    int i13 = constantPoolGen6.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i15 = constantPoolGen6.addFloat((float)'a');
    java.lang.String str16 = constantPoolGen6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 260);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Float[4](bytes = 97.0)\n"+ "'", str16.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Float[4](bytes = 97.0)\n"));

  }

  @Test
  public void test0659() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0659"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i10 = constantPoolGen0.lookupFloat((float)7);
    int i12 = constantPoolGen0.lookupLong((long)267);
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.lookupInterfaceMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0660() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0660"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.addDouble((double)0.0f);
    int i10 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0661() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0661"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    int i11 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i13 = constantPoolGen0.lookupString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i15 = constantPoolGen0.lookupDouble(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0662() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0662"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    int i15 = constantPoolGen1.lookupFieldref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    org.apache.bcel.generic.MethodGen methodGen16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.addMethodref(methodGen16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0663() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0663"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i9 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "hi!");
    java.lang.String str10 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.lookupClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i16 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 9);

  }

  @Test
  public void test0664() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0664"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i6 = constantPoolGen0.addInteger(13);
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n3)CONSTANT_Long[5](bytes = 16)\n4)null\n");
    int i11 = constantPoolGen0.lookupLong((long)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0665() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0665"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupClass("");
    int i6 = constantPoolGen0.addLong(1L);
    int i8 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test0666() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0666"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i11 = constantPoolGen0.lookupFloat((float)(short)1);
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen0.setConstant(3, constant13);
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen0.setConstant(9, constant16);
    org.apache.bcel.generic.MethodGen methodGen18 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i19 = constantPoolGen0.addMethodref(methodGen18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0667() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0667"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    int i6 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i8 = constantPoolGen0.lookupFloat(10.0f);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen0.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0668() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0668"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0669() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0669"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen2.setConstant(21, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0670() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0670"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addDouble((double)100);
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i11 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 11);

  }

  @Test
  public void test0671() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0671"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0672() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0672"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i6 = constantPoolGen0.addUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0673() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0673"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addInteger((int)(short)-1);
    int i11 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "hi!", "");
    int i14 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "hi!");
    int i15 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test0674() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0674"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupInteger(6);
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    int i15 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);

  }

  @Test
  public void test0675() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0675"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.addLong((long)16);
    int i7 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0676() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0676"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i12 = constantPoolGen0.addLong((long)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0677() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0677"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addInteger((int)(short)-1);
    int i10 = constantPoolGen0.lookupLong((long)262);
    int i12 = constantPoolGen0.addInteger(267);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0678() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0678"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((double)8);
    int i10 = constantPoolGen0.addLong(100L);
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0679() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0679"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n"+ "'", str4.equals("1)CONSTANT_Float[4](bytes = 10.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0680() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0680"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addLong((long)(byte)100);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen4.getConstant(18);
    int i14 = constantPoolGen4.addMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 264);

  }

  @Test
  public void test0681() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0681"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addFloat((float)264);
    int i7 = constantPoolGen2.addNameAndType("1)CONSTANT_Long[5](bytes = 258)\n2)null\n", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0682() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0682"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen3.getSize();
    int i10 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i12 = constantPoolGen3.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i16 = constantPoolGen3.lookupMethodref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Integer[3](bytes = 100)\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0683() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0683"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0684() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0684"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i6 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i8 = constantPoolGen0.lookupLong((long)270);
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0685() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0685"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(15);
    org.apache.bcel.generic.ArrayType arrayType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addArrayClass(arrayType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);

  }

  @Test
  public void test0686() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0686"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen3.lookupMethodref("hi!", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen3.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen3.getFinalConstantPool();
    int i13 = constantPoolGen3.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test0687() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0687"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    int i6 = constantPoolGen1.lookupClass("");
    int i8 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n");
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.classfile.Constant[] constant_array10 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constant_array10);
    int i13 = constantPoolGen11.lookupLong((long)10);
    int i15 = constantPoolGen11.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool16 = constantPoolGen11.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = new org.apache.bcel.generic.ConstantPoolGen(constantPool16);
    org.apache.bcel.classfile.Constant constant19 = constantPoolGen17.getConstant((int)(byte)0);
    int i21 = constantPoolGen17.lookupInteger(10);
    int i23 = constantPoolGen17.lookupString("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    org.apache.bcel.classfile.Constant constant25 = constantPoolGen17.getConstant(18);
    // The following exception was thrown during execution in test generation
    try {
    int i26 = constantPoolGen1.addConstant(constant9, constantPoolGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant25);

  }

  @Test
  public void test0688() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0688"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.addNameAndType("", "hi!");
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0689() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0689"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0690() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0690"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupDouble((-1.0d));
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addDouble(100.0d);
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0691() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0691"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);

  }

  @Test
  public void test0692() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0692"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen5.getConstantPool();
    int i8 = constantPoolGen5.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i10 = constantPoolGen5.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i11 = constantPoolGen5.getSize();
    int i15 = constantPoolGen5.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0693() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0693"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen2.getConstant((int)(short)100);
    int i10 = constantPoolGen2.lookupLong((long)5);
    int i14 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    org.apache.bcel.generic.ArrayType arrayType15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i16 = constantPoolGen2.addArrayClass(arrayType15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test0694() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0694"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupLong((long)(byte)1);
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i7 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0695() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0695"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test0696() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0696"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addFloat((float)(byte)-1);
    int i8 = constantPoolGen1.addFloat((float)8);
    int i10 = constantPoolGen1.addFloat((float)256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test0697() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0697"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i7 = constantPoolGen5.addClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen5.getConstant((int)(byte)10);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen5.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test0698() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0698"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    constantPoolGen1.setConstant((int)'#', constant11);
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    int i18 = constantPoolGen1.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0699() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0699"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i9 = constantPoolGen1.lookupMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 5)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0700() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0700"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupInteger(264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0701() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0701"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i9 = constantPoolGen2.lookupDouble((double)8);
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen2.addInterfaceMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0702() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0702"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    java.lang.String str9 = constantPoolGen1.toString();
    int i13 = constantPoolGen1.addMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i17 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 14);

  }

  @Test
  public void test0703() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0703"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test0704() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0704"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    org.apache.bcel.classfile.Constant constant6 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen();
    int i8 = constantPoolGen7.getSize();
    int i10 = constantPoolGen7.lookupFloat((float)6);
    int i12 = constantPoolGen7.lookupDouble((double)'#');
    int i14 = constantPoolGen7.lookupFloat(0.0f);
    int i16 = constantPoolGen7.addFloat((float)4);
    int i20 = constantPoolGen7.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i22 = constantPoolGen7.addDouble((double)263);
    int i24 = constantPoolGen7.lookupFloat((float)7);
    // The following exception was thrown during execution in test generation
    try {
    int i25 = constantPoolGen2.addConstant(constant6, constantPoolGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));

  }

  @Test
  public void test0705() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0705"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("hi!", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str10 = constantPoolGen1.toString();
    int i12 = constantPoolGen1.lookupDouble((double)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0706() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0706"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupFloat((float)' ');
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i12 = constantPoolGen0.addDouble((double)258);
    int i16 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);

  }

  @Test
  public void test0707() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0707"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    int i4 = constantPoolGen1.lookupFloat((float)(byte)1);
    int i8 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i11 = constantPoolGen1.addNameAndType("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n9)CONSTANT_Float[4](bytes = 0.0)\n10)CONSTANT_Long[5](bytes = 35)\n11)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0708() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0708"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0709() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0709"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.lookupMethodref("hi!", "", "");
    int i9 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i11 = constantPoolGen1.addDouble((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0710() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0710"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = null;
    constantPoolGen1.setConstant((int)(byte)0, constant3);
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.lookupFloat((float)(-1));
    int i12 = constantPoolGen1.addDouble((double)(-1L));
    java.lang.String str13 = constantPoolGen1.toString();
    int i17 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n"+ "'", str13.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0711() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0711"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen2.getConstant((int)(short)100);
    int i10 = constantPoolGen2.lookupLong((long)5);
    java.lang.String str11 = constantPoolGen2.toString();
    int i15 = constantPoolGen2.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Double[6](bytes = 1.0)\n3)null\n4)CONSTANT_Float[4](bytes = 1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"+ "'", str11.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0712() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0712"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.lookupInteger((int)(short)100);
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen4.setConstant((int)(short)0, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0713() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0713"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getFinalConstantPool();
    int i15 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i18 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i20 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i23 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i27 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i29 = constantPoolGen0.addString("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 16);

  }

  @Test
  public void test0714() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0714"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0715() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0715"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i7 = constantPoolGen0.addDouble((double)0.0f);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0716() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0716"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant6);

  }

  @Test
  public void test0717() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0717"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addUtf8("");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(271);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0718() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0718"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant(21, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test0719() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0719"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.lookupLong((long)259);
    int i7 = constantPoolGen0.lookupLong((long)14);
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    int i11 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test0720() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0720"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.lookupDouble((double)269);
    org.apache.bcel.classfile.ConstantPool constantPool12 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen13 = new org.apache.bcel.generic.ConstantPoolGen(constantPool12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool12);

  }

  @Test
  public void test0721() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0721"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i8 = constantPoolGen1.addDouble((double)1L);
    int i10 = constantPoolGen1.addFloat((float)0L);
    int i12 = constantPoolGen1.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 5.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);

  }

  @Test
  public void test0722() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0722"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.addInteger(257);
    int i8 = constantPoolGen0.lookupLong((long)263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0723() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0723"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.addFloat(0.0f);
    int i8 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0724() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0724"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i11 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    int i14 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = 256.0)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i16 = constantPoolGen0.addDouble((double)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0725() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0725"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addDouble((double)(byte)0);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen2.getConstantPool();
    int i9 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Integer[3](bytes = 35)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    int i11 = constantPoolGen2.addDouble((double)5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0726() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0726"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((-1));
    int i8 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_String[8](string_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0727() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0727"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.lookupDouble((double)0.0f);
    int i13 = constantPoolGen7.addMethodref("", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant15 = null;
    constantPoolGen7.setConstant((int)(short)1, constant15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 260);

  }

  @Test
  public void test0728() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0728"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0729() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0729"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger((int)(short)10);
    java.lang.String str7 = constantPoolGen1.toString();
    int i10 = constantPoolGen1.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n", "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupDouble((double)(byte)100);
    int i14 = constantPoolGen1.lookupLong(10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0730() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0730"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.addDouble((double)261);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);

  }

  @Test
  public void test0731() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0731"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen2.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0732() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0732"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i6 = constantPoolGen0.lookupNameAndType("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i8 = constantPoolGen0.lookupInteger(2);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)'#');
    int i14 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0733() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0733"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.addLong((long)17);
    int i10 = constantPoolGen0.lookupInteger((int)'#');
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getFinalConstantPool();
    int i13 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0734() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0734"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addDouble((double)100);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0735() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0735"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)(byte)10, constant8);
    int i11 = constantPoolGen0.addLong((long)9);
    java.lang.String str12 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n3)CONSTANT_Long[5](bytes = 9)\n4)null\n"+ "'", str12.equals("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n3)CONSTANT_Long[5](bytes = 9)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0736() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0736"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant((int)(byte)1, constant6);
    int i9 = constantPoolGen0.lookupInteger((-1));
    int i13 = constantPoolGen0.addFieldref("hi!", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.lookupInterfaceMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0737() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0737"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i15 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0738() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0738"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.lookupInteger((-1));
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    int i9 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i13 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 13);

  }

  @Test
  public void test0739() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0739"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant((int)' ', constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0740() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0740"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.lookupMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0741() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0741"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addDouble((double)8);
    org.apache.bcel.classfile.Constant constant7 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen();
    int i10 = constantPoolGen8.lookupString("hi!");
    int i12 = constantPoolGen8.lookupLong((long)(short)1);
    int i14 = constantPoolGen8.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i16 = constantPoolGen8.lookupFloat((float)(short)100);
    int i18 = constantPoolGen8.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i20 = constantPoolGen8.lookupDouble((double)100.0f);
    int i22 = constantPoolGen8.addFloat((float)9);
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen4.addConstant(constant7, constantPoolGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 3);

  }

  @Test
  public void test0742() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0742"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.generic.ObjectType objectType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addClass(objectType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);

  }

  @Test
  public void test0743() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0743"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i7 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Double[6](bytes = 0.0)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n", "hi!");
    int i9 = constantPoolGen0.addLong((long)6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test0744() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0744"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen1.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0745() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0745"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.addInteger(0);
    int i9 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0746() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0746"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addFloat((float)16);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n");
    int i11 = constantPoolGen0.addFloat((float)' ');
    org.apache.bcel.classfile.Constant constant13 = null;
    constantPoolGen0.setConstant(14, constant13);
    int i18 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0747() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0747"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupFieldref("", "hi!", "");
    int i8 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addFloat((float)1);
    java.lang.String str11 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = 1.0)\n"+ "'", str11.equals("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Float[4](bytes = 1.0)\n"));

  }

  @Test
  public void test0748() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0748"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i7 = constantPoolGen1.addMethodref("", "hi!", "hi!");
    int i11 = constantPoolGen1.lookupFieldref("", "hi!", "hi!");
    int i13 = constantPoolGen1.addInteger((int)'4');
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);

  }

  @Test
  public void test0749() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0749"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    int i7 = constantPoolGen1.addUtf8("hi!");
    int i11 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0750() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0750"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.addDouble((double)5);
    int i7 = constantPoolGen3.lookupLong((long)20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0751() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0751"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addInteger((-1));
    int i8 = constantPoolGen0.lookupLong((long)10);
    int i10 = constantPoolGen0.lookupLong((long)8);
    int i14 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test0752() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0752"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.lookupInteger(6);
    int i8 = constantPoolGen0.lookupInteger(262);
    int i10 = constantPoolGen0.lookupInteger(269);
    int i12 = constantPoolGen0.addLong(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test0753() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0753"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupDouble((double)262);
    int i7 = constantPoolGen1.lookupFloat((float)3);
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen1.lookupInterfaceMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0754() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0754"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i11 = constantPoolGen0.lookupFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0755() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0755"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addLong((long)(short)10);
    int i9 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i12 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 0)\n2)CONSTANT_Long[5](bytes = 97)\n3)null\n");
    org.apache.bcel.classfile.Constant constant14 = null;
    constantPoolGen1.setConstant((int)(byte)100, constant14);
    int i17 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0756() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0756"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i6 = constantPoolGen2.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 257)\n", "", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 261);

  }

  @Test
  public void test0757() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0757"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i5 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i7 = constantPoolGen0.lookupDouble((double)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0758() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0758"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    int i5 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0759() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0759"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen2.getConstantPool();
    int i8 = constantPoolGen2.lookupString("1)CONSTANT_Float[4](bytes = 256.0)\n");
    int i10 = constantPoolGen2.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Long[5](bytes = 8)\n5)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0760() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0760"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addLong((long)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0761() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0761"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addLong((long)2);
    int i7 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test0762() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0762"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    int i4 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen0.getConstant(19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);

  }

  @Test
  public void test0763() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0763"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i7 = constantPoolGen2.lookupNameAndType("", "");
    int i9 = constantPoolGen2.lookupFloat((float)10);
    int i11 = constantPoolGen2.addDouble(10.0d);
    int i13 = constantPoolGen2.lookupFloat((float)19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0764() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0764"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.addLong(0L);
    int i12 = constantPoolGen0.lookupFloat((float)' ');
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0765() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0765"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i4 = constantPoolGen0.lookupClass("");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0766() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0766"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i7 = constantPoolGen1.lookupMethodref("hi!", "", "");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.addFloat((-1.0f));
    int i12 = constantPoolGen1.lookupFloat((float)'a');
    int i14 = constantPoolGen1.addFloat(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);

  }

  @Test
  public void test0767() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0767"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addInterfaceMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0768() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0768"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen3.addNameAndType("", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i8 = constantPoolGen3.addDouble(0.0d);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen3.getConstant(100);
    int i14 = constantPoolGen3.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 259);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 266);

  }

  @Test
  public void test0769() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0769"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 14.0)\n2)null\n");
    int i7 = constantPoolGen1.lookupDouble((double)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0770() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0770"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i7 = constantPoolGen0.addDouble((double)257);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    int i12 = constantPoolGen10.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    java.lang.String str13 = constantPoolGen10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 2)\n4)CONSTANT_Double[6](bytes = 257.0)\n5)null\n"+ "'", str13.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 2)\n4)CONSTANT_Double[6](bytes = 257.0)\n5)null\n"));

  }

  @Test
  public void test0771() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0771"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(3, constant4);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen0.addLong((long)(byte)-1);
    int i12 = constantPoolGen0.getSize();
    int i14 = constantPoolGen0.addClass("hi!");
    int i16 = constantPoolGen0.lookupLong(0L);
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen0.getFinalConstantPool();
    int i19 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0772() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0772"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.addFloat((float)261);
    int i11 = constantPoolGen5.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0773() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0773"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupDouble((double)266);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0774() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0774"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i6 = constantPoolGen0.addDouble((double)100);
    int i7 = constantPoolGen0.getSize();
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0775() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0775"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.generic.MethodGen methodGen13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i14 = constantPoolGen0.addMethodref(methodGen13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test0776() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0776"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i11 = constantPoolGen0.addDouble((double)258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0777() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0777"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen0.setConstant(0, constant4);
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Integer[3](bytes = -1)\n");
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i13 = constantPoolGen0.addNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n");
    int i14 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool15 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool15);

  }

  @Test
  public void test0778() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0778"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    int i5 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    int i7 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    int i11 = constantPoolGen3.lookupFieldref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n", "1)CONSTANT_Integer[3](bytes = 0)\n2)CONSTANT_Long[5](bytes = 97)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0779() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0779"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen1.addUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i9 = constantPoolGen1.addUtf8("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    int i11 = constantPoolGen1.lookupLong((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0780() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0780"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)5);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addInteger(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Long[5](bytes = 5)\n2)null\n"+ "'", str3.equals("1)CONSTANT_Long[5](bytes = 5)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test0781() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0781"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupUtf8("");
    int i8 = constantPoolGen0.lookupDouble((-1.0d));
    int i10 = constantPoolGen0.lookupFloat((float)7);
    int i12 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n");
    int i16 = constantPoolGen0.addFieldref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n9)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n10)CONSTANT_Class[7](name_index = 9)\n11)CONSTANT_Utf8[1](\"\")\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n13)CONSTANT_NameAndType[12](name_index = 11, signature_index = 12)\n14)CONSTANT_InterfaceMethodref[11](class_index = 10, name_and_type_index = 13)\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);

  }

  @Test
  public void test0782() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0782"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.lookupLong((long)1);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen0.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0783() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0783"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i9 = constantPoolGen0.addLong((long)9);
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 11);

  }

  @Test
  public void test0784() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0784"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i12 = constantPoolGen0.lookupDouble((double)5);
    int i15 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);

  }

  @Test
  public void test0785() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0785"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    java.lang.String str4 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant(14, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Float[4](bytes = 10.0)\n"+ "'", str4.equals("1)CONSTANT_Float[4](bytes = 10.0)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);

  }

  @Test
  public void test0786() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0786"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.lookupClass("");
    int i7 = constantPoolGen1.lookupDouble((double)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0787() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0787"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat(10.0f);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(16, constant5);
    int i8 = constantPoolGen1.addInteger(21);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0788() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0788"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addFloat((float)267);
    int i10 = constantPoolGen4.addFieldref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n");
    int i14 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 10)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_String[8](string_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i16 = constantPoolGen4.addFloat((float)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 268);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 269);

  }

  @Test
  public void test0789() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0789"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getFinalConstantPool();
    int i8 = constantPoolGen0.lookupDouble((double)1L);
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)'4');
    int i12 = constantPoolGen0.lookupFloat((float)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 35)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 35)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0790() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0790"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    int i5 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i7 = constantPoolGen0.addFloat((float)0L);
    int i9 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.Constant constant10 = null;
    org.apache.bcel.classfile.Constant[] constant_array11 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constant_array11);
    int i14 = constantPoolGen12.addLong((long)(byte)100);
    int i16 = constantPoolGen12.addLong(100L);
    int i17 = constantPoolGen12.getSize();
    int i19 = constantPoolGen12.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n");
    int i21 = constantPoolGen12.addDouble((double)0);
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant10, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);

  }

  @Test
  public void test0791() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0791"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addDouble((double)8);
    int i10 = constantPoolGen4.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Long[5](bytes = 267)\n4)null\n");
    int i12 = constantPoolGen4.addFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 264);

  }

  @Test
  public void test0792() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0792"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.lookupLong((long)(byte)10);
    int i9 = constantPoolGen1.addFloat((float)262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0793() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0793"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constantPool7);
    int i10 = constantPoolGen8.lookupInteger((int)' ');
    int i14 = constantPoolGen8.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen8.setConstant(0, constant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0794() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0794"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i12 = constantPoolGen1.lookupFloat((float)100);
    int i14 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    int i16 = constantPoolGen1.lookupFloat((float)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0795() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0795"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addDouble((double)14);
    int i6 = constantPoolGen2.lookupLong((long)263);
    int i8 = constantPoolGen2.lookupInteger(15);
    int i10 = constantPoolGen2.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 0.0)\n");
    int i14 = constantPoolGen2.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10.0)\\n\")\n3)CONSTANT_Integer[3](bytes = 100)\n", "hi!", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 8);

  }

  @Test
  public void test0796() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0796"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong(0L);
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen0.setConstant(10, constant7);
    int i11 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test0797() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0797"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addFloat((float)(-1L));
    int i4 = constantPoolGen0.lookupFloat((float)0);
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n3)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.lookupMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test0798() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0798"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i6 = constantPoolGen1.lookupFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i8 = constantPoolGen1.addDouble((double)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0799() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0799"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256/0)\\n4)null\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0800() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0800"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupFloat((float)4);
    int i6 = constantPoolGen1.addFloat((float)6);
    int i7 = constantPoolGen1.getSize();
    int i10 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i11 = constantPoolGen1.getSize();
    int i13 = constantPoolGen1.addFloat(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test0801() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0801"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen1.getConstant(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);

  }

  @Test
  public void test0802() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0802"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.addLong((long)17);
    int i10 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0803() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0803"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.addInteger((int)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen1.setConstant(0, constant8);
    int i11 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test0804() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0804"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)256);
    int i5 = constantPoolGen1.lookupLong((long)258);
    int i8 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256/0)\\n4)null\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0805() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0805"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.addInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0806() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0806"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addLong((long)(byte)100);
    int i10 = constantPoolGen4.addUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 259);

  }

  @Test
  public void test0807() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0807"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i9 = constantPoolGen0.lookupLong((long)273);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0808() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0808"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(100, constant5);
    int i8 = constantPoolGen1.lookupFloat((float)(byte)10);
    int i10 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i15 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1/0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0809() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0809"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i4 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant6 = constantPoolGen0.getConstant(273);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test0810() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0810"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen3.lookupInteger((-1));
    int i11 = constantPoolGen3.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i13 = constantPoolGen3.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen3.addInterfaceMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0811() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0811"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test0812() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0812"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addLong(100L);
    int i5 = constantPoolGen0.lookupDouble((-1.0d));
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n9)CONSTANT_Long[5](bytes = 100)\n10)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0813() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0813"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(-1));
    int i12 = constantPoolGen0.lookupLong((long)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0814() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0814"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addClass("");
    int i6 = constantPoolGen1.addInteger(0);
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    int i15 = constantPoolGen11.lookupMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Integer[3](bytes = 261)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0815() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0815"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i9 = constantPoolGen6.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i11 = constantPoolGen6.lookupFloat((float)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0816() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0816"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str4 = constantPoolGen0.toString();
    int i6 = constantPoolGen0.lookupLong((long)(short)10);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    int i9 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i13 = constantPoolGen0.lookupMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 2.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0817() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0817"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addString("");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i10 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1/0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0818() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0818"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    int i6 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i10 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen0.lookupMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0819() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0819"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i6 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i15 = constantPoolGen0.lookupDouble((double)257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0820() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0820"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen3.addFloat((float)(short)-1);
    int i11 = constantPoolGen3.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Float[4](bytes = 10.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0821() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0821"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i11 = constantPoolGen0.lookupLong(10L);
    int i15 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test0822() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0822"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 5.0)\n257)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.classfile.Constant constant11 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen();
    int i13 = constantPoolGen12.getSize();
    int i16 = constantPoolGen12.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool17 = constantPoolGen12.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant19 = constantPoolGen12.getConstant(10);
    int i21 = constantPoolGen12.lookupString("");
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.addConstant(constant11, constantPoolGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));

  }

  @Test
  public void test0823() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0823"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen0.addInteger(0);
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i16 = constantPoolGen0.addFieldref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i18 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0824() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0824"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i9 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0825() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0825"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen4.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i11 = constantPoolGen7.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0826() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0826"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i8 = constantPoolGen6.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen6.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);

  }

  @Test
  public void test0827() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0827"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str3 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen6.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n");
    int i12 = constantPoolGen6.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    int i16 = constantPoolGen6.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"hi!\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 267);

  }

  @Test
  public void test0828() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0828"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "hi!");
    int i8 = constantPoolGen0.addString("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n");
    int i10 = constantPoolGen0.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n257)CONSTANT_String[8](string_index = 256)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test0829() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0829"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i7 = constantPoolGen1.addFloat(0.0f);
    int i9 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen1.getConstant(11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);

  }

  @Test
  public void test0830() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0830"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupInteger((int)'4');
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);

  }

  @Test
  public void test0831() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0831"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupInterfaceMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test0832() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0832"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupString("");
    int i14 = constantPoolGen0.addFieldref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_String[8](string_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n");
    int i16 = constantPoolGen0.lookupDouble((double)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0833() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0833"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i9 = constantPoolGen0.addFloat((float)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test0834() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0834"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant7 = null;
    constantPoolGen1.setConstant(4, constant7);
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen1.getConstantPool();
    int i12 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10/0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32/0)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Fieldref[9](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0835() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0835"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(9, constant5);
    int i8 = constantPoolGen1.addFloat((float)(short)1);
    int i12 = constantPoolGen1.addFieldref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "");
    int i14 = constantPoolGen1.addClass("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test0836() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0836"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen3.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i11 = constantPoolGen3.addDouble((double)100);
    int i13 = constantPoolGen3.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen3.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen15 = new org.apache.bcel.generic.ConstantPoolGen(constantPool14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0837() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0837"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i11 = constantPoolGen0.addMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    java.lang.String str12 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Integer[3](bytes = -1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n"+ "'", str12.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Integer[3](bytes = -1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n"));

  }

  @Test
  public void test0838() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0838"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addDouble((double)'a');
    int i9 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i11 = constantPoolGen0.addInteger((int)(short)-1);
    int i13 = constantPoolGen0.lookupFloat(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0839() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0839"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addLong((long)(byte)-1);
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    // The following exception was thrown during execution in test generation
    try {
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen0.getConstant(271);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0840() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0840"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n");
    int i9 = constantPoolGen4.getSize();
    int i12 = constantPoolGen4.addNameAndType("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n4)CONSTANT_Utf8[1](\"\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n9)CONSTANT_Class[7](name_index = 8)\\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0841() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0841"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i10 = constantPoolGen0.lookupString("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Float[4](bytes = 9.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0842() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0842"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i8 = constantPoolGen1.addInteger(10);
    int i12 = constantPoolGen1.lookupMethodref("", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i15 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Integer[3](bytes = 100)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test0843() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0843"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant((int)(byte)0);
    int i7 = constantPoolGen0.lookupFloat((float)(-1L));
    java.lang.String str8 = constantPoolGen0.toString();
    org.apache.bcel.classfile.Constant constant10 = constantPoolGen0.getConstant((int)' ');
    int i13 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0844() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0844"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addString("hi!");
    int i12 = constantPoolGen4.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 264);

  }

  @Test
  public void test0845() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0845"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i8 = constantPoolGen6.lookupLong((long)'a');
    int i9 = constantPoolGen6.getSize();
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen6.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 256);

  }

  @Test
  public void test0846() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0846"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.addMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i10 = constantPoolGen4.addDouble((double)1.0f);
    int i13 = constantPoolGen4.addNameAndType("1)null\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 262);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 266);

  }

  @Test
  public void test0847() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0847"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i6 = constantPoolGen4.addDouble((double)10L);
    int i8 = constantPoolGen4.addUtf8("1)null\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 258);

  }

  @Test
  public void test0848() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0848"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0849() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0849"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)(short)100);
    int i7 = constantPoolGen0.lookupDouble((double)(byte)10);
    int i9 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    org.apache.bcel.generic.MethodGen methodGen10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addMethodref(methodGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0850() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0850"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("");
    org.apache.bcel.classfile.Constant constant5 = constantPoolGen0.getConstant(0);
    int i7 = constantPoolGen0.lookupDouble((double)2);
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0851() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0851"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    java.lang.String str4 = constantPoolGen3.toString();
    int i6 = constantPoolGen3.lookupString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Long[5](bytes = 261)\n3)null\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\n8)CONSTANT_Class[7](name_index = 7)\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\n10)CONSTANT_Long[5](bytes = 10)\n11)null\n");
    int i8 = constantPoolGen3.addLong((long)7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test0852() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0852"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i7 = constantPoolGen0.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen0.setConstant((int)'4', constant10);
    int i13 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Double[6](bytes = 262.0)\n5)null\n");
    int i15 = constantPoolGen0.addString("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 9);

  }

  @Test
  public void test0853() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0853"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.lookupInteger(18);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen7.setConstant(17, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);

  }

  @Test
  public void test0854() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0854"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.lookupString("");
    int i6 = constantPoolGen0.lookupLong((long)(short)100);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant9 = null;
    constantPoolGen0.setConstant(0, constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0855() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0855"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i6 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen1.getConstant(19);
    org.apache.bcel.classfile.Constant constant9 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen10 = new org.apache.bcel.generic.ConstantPoolGen();
    int i12 = constantPoolGen10.addDouble((double)(short)1);
    int i14 = constantPoolGen10.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    constantPoolGen10.setConstant(1, constant16);
    int i19 = constantPoolGen10.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen1.addConstant(constant9, constantPoolGen10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);

  }

  @Test
  public void test0856() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0856"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i4 = constantPoolGen0.getSize();
    int i8 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Float[4](bytes = 0.0)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i10 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    int i12 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0857() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0857"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_InterfaceMethodref[11](class_index = 5, name_and_type_index = 8)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 261);

  }

  @Test
  public void test0858() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0858"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen1.addNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i17 = constantPoolGen1.addDouble((double)10.0f);
    org.apache.bcel.classfile.ConstantPool constantPool18 = constantPoolGen1.getFinalConstantPool();
    java.lang.String str19 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n13)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n14)CONSTANT_NameAndType[12](name_index = 12, signature_index = 13)\n15)CONSTANT_Double[6](bytes = 10.0)\n16)null\n"+ "'", str19.equals("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n12)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n13)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n14)CONSTANT_NameAndType[12](name_index = 12, signature_index = 13)\n15)CONSTANT_Double[6](bytes = 10.0)\n16)null\n"));

  }

  @Test
  public void test0859() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0859"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 7);

  }

  @Test
  public void test0860() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0860"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i6 = constantPoolGen0.lookupDouble((double)269);
    int i8 = constantPoolGen0.lookupFloat((float)0L);
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    int i14 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 12);

  }

  @Test
  public void test0861() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0861"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Double[6](bytes = 100.0)\\n3)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0862() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0862"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i7 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i8 = constantPoolGen3.getSize();
    int i10 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i12 = constantPoolGen3.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i16 = constantPoolGen3.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 8);

  }

  @Test
  public void test0863() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0863"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)1.0f);
    int i6 = constantPoolGen0.lookupDouble((double)(byte)1);
    int i8 = constantPoolGen0.addDouble((double)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0864() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0864"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen3.getConstantPool();
    int i6 = constantPoolGen3.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen3.getFinalConstantPool();
    int i8 = constantPoolGen3.getSize();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen3.lookupMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test0865() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0865"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen0.addDouble(0.0d);
    int i13 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Float[4](bytes = 1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0866() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0866"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen3.getConstant(6);
    int i8 = constantPoolGen3.getSize();
    int i12 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0867() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0867"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupInteger((int)(short)0);
    int i6 = constantPoolGen0.addString("");
    int i8 = constantPoolGen0.addDouble((double)257);
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.lookupFloat((float)267);
    int i15 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test0868() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0868"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    java.lang.String str7 = constantPoolGen2.toString();
    int i11 = constantPoolGen2.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i13 = constantPoolGen2.addInteger(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"+ "'", str7.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test0869() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0869"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i6 = constantPoolGen4.addInteger(7);
    int i8 = constantPoolGen4.addLong((long)(byte)100);
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen4.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 257);

  }

  @Test
  public void test0870() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0870"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addFieldref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.generic.ArrayType arrayType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addArrayClass(arrayType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test0871() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0871"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addFloat((float)(byte)1);
    int i7 = constantPoolGen0.addLong((long)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test0872() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0872"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.lookupUtf8("");
    int i7 = constantPoolGen0.lookupDouble((double)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0873() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0873"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen0.lookupMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0874() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0874"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i6 = constantPoolGen0.addDouble((double)(byte)1);
    int i9 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Integer[3](bytes = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test0875() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0875"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(10);
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str8 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n"));

  }

  @Test
  public void test0876() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0876"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupString("");
    int i8 = constantPoolGen0.lookupDouble((double)1L);
    java.lang.String str9 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n");
    int i14 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Integer[3](bytes = 32)\n"+ "'", str9.equals("1)CONSTANT_Integer[3](bytes = 32)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);

  }

  @Test
  public void test0877() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0877"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i8 = constantPoolGen0.lookupLong((long)(short)10);
    int i11 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n");
    int i13 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen0.lookupLong((long)(short)100);
    int i17 = constantPoolGen0.addInteger(20);
    int i19 = constantPoolGen0.addLong((long)269);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);

  }

  @Test
  public void test0878() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0878"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.lookupInteger((int)(byte)1);
    int i9 = constantPoolGen0.addLong((long)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0879() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0879"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen2.lookupInteger((int)(byte)-1);
    int i5 = constantPoolGen2.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen7.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant10 = null;
    constantPoolGen7.setConstant(273, constant10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0880() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0880"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i4 = constantPoolGen0.addFloat((float)259);
    org.apache.bcel.classfile.Constant constant5 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str7 = constantPoolGen6.toString();
    int i9 = constantPoolGen6.lookupLong(0L);
    int i11 = constantPoolGen6.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i15 = constantPoolGen6.addMethodref("1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i17 = constantPoolGen6.addInteger(264);
    int i19 = constantPoolGen6.lookupInteger((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    int i20 = constantPoolGen0.addConstant(constant5, constantPoolGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0881() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0881"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.addFloat((float)' ');
    int i12 = constantPoolGen1.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i15 = constantPoolGen1.addNameAndType("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i19 = constantPoolGen1.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n\")\n8)CONSTANT_NameAndType[12](name_index = 6, signature_index = 7)\n9)CONSTANT_InterfaceMethodref[11](class_index = 5, name_and_type_index = 8)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0882() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0882"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i4 = constantPoolGen0.lookupLong((long)(short)1);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant(1, constant8);
    org.apache.bcel.generic.ArrayType arrayType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addArrayClass(arrayType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0883() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0883"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i6 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i8 = constantPoolGen0.addDouble((double)16);
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0884() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0884"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    int i7 = constantPoolGen1.addUtf8("hi!");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i10 = constantPoolGen1.lookupUtf8("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Long[5](bytes = 261)\\n3)null\\n4)CONSTANT_Utf8[1](\"hi!\")\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n\")\\n8)CONSTANT_Class[7](name_index = 7)\\n9)CONSTANT_Methodref[10](class_index = 8, name_and_type_index = 6)\\n10)CONSTANT_Long[5](bytes = 10)\\n11)null\\n\")\n257)CONSTANT_Class[7](name_index = 256)\n258)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\\n\")\n259)CONSTANT_Utf8[1](\"\")\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\n");
    int i12 = constantPoolGen1.lookupLong((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0885() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0885"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getFinalConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i8 = constantPoolGen5.addNameAndType("1)CONSTANT_Integer[3](bytes = 9)\n", "");
    int i10 = constantPoolGen5.addInteger((int)'4');
    int i12 = constantPoolGen5.lookupInteger((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0886() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0886"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong((long)5);
    int i5 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    int i9 = constantPoolGen0.lookupFloat((float)262);
    int i13 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n4)CONSTANT_String[8](string_index = 3)\n", "1)CONSTANT_Float[4](bytes = 100.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen0.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);

  }

  @Test
  public void test0887() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0887"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("hi!");
    int i5 = constantPoolGen0.addNameAndType("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Integer[3](bytes = 9)\n");
    int i7 = constantPoolGen0.addInteger((int)(byte)-1);
    int i9 = constantPoolGen0.addFloat((float)7);
    int i11 = constantPoolGen0.addLong((long)5);
    int i13 = constantPoolGen0.addInteger(12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);

  }

  @Test
  public void test0888() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0888"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    java.lang.String str5 = constantPoolGen0.toString();
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constantPool6);
    int i9 = constantPoolGen7.addDouble((double)(-1L));
    int i10 = constantPoolGen7.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 258);

  }

  @Test
  public void test0889() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0889"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant((int)(short)100);
    int i11 = constantPoolGen0.addDouble((double)269);
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen0.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0890() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0890"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    int i5 = constantPoolGen1.addLong(100L);
    java.lang.String str6 = constantPoolGen1.toString();
    int i9 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i13 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str6.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0891() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0891"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i10 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i12 = constantPoolGen1.lookupLong((long)100);
    int i16 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i20 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 35)\n", "", "1)CONSTANT_Integer[3](bytes = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 16);

  }

  @Test
  public void test0892() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0892"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i8 = constantPoolGen2.lookupMethodref("hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen2.getFinalConstantPool();
    int i11 = constantPoolGen2.lookupDouble((double)'a');
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen2.addInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0893() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0893"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i6 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_String[8](string_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0894() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0894"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)'#');
    int i4 = constantPoolGen0.addInteger(2);
    int i6 = constantPoolGen0.addDouble((double)0.0f);
    int i8 = constantPoolGen0.addLong((long)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test0895() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0895"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)(short)1);
    int i6 = constantPoolGen2.addInteger((int)(byte)1);
    int i8 = constantPoolGen2.lookupFloat((float)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0896() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0896"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.addString("");
    int i9 = constantPoolGen1.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i11 = constantPoolGen1.lookupInteger(12);
    int i15 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    org.apache.bcel.generic.MethodGen methodGen16 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i17 = constantPoolGen1.addMethodref(methodGen16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0897() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0897"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.classfile.Constant constant6 = null;
    constantPoolGen0.setConstant(1, constant6);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    int i12 = constantPoolGen9.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i14 = constantPoolGen9.lookupInteger(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 258);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0898() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0898"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i16 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i20 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    int i22 = constantPoolGen0.addFloat((float)20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);

  }

  @Test
  public void test0899() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0899"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i7 = constantPoolGen0.addLong((long)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test0900() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0900"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i11 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i13 = constantPoolGen1.lookupInteger(320);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0901() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0901"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getFinalConstantPool();
    int i6 = constantPoolGen0.lookupLong((long)(byte)100);
    int i8 = constantPoolGen0.lookupDouble(10.0d);
    int i9 = constantPoolGen0.getSize();
    int i11 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen0.lookupInteger((int)(byte)100);
    int i15 = constantPoolGen0.addLong((long)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test0902() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0902"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant(100, constant5);
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen3.getFinalConstantPool();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);

  }

  @Test
  public void test0903() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0903"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupLong((long)257);
    int i6 = constantPoolGen1.addString("1)CONSTANT_Long[5](bytes = -1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Integer[3](bytes = 35)\\n3)CONSTANT_Integer[3](bytes = 0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i8 = constantPoolGen1.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0904() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0904"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    int i6 = constantPoolGen2.addLong((long)(-1));
    org.apache.bcel.classfile.Constant constant8 = constantPoolGen2.getConstant((int)(short)100);
    int i10 = constantPoolGen2.lookupLong((long)5);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen2.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen12 = new org.apache.bcel.generic.ConstantPoolGen(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);

  }

  @Test
  public void test0905() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0905"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n");
    int i4 = constantPoolGen0.addFloat((float)259);
    int i6 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i7 = constantPoolGen0.getSize();
    int i9 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Class[7](name_index = 3)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0906() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0906"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i15 = constantPoolGen1.addInterfaceMethodref("1)null\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Utf8[1](\"\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n3)CONSTANT_String[8](string_index = 2)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 13);

  }

  @Test
  public void test0907() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0907"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("", "", "");
    int i6 = constantPoolGen0.lookupDouble((double)(byte)-1);
    int i10 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i14 = constantPoolGen0.addMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i16 = constantPoolGen0.lookupString("1)CONSTANT_Float[4](bytes = -1.0)\n");
    int i20 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.generic.MethodGen methodGen21 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i22 = constantPoolGen0.lookupMethodref(methodGen21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));

  }

  @Test
  public void test0908() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0908"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i3 = constantPoolGen0.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.lookupDouble((double)0);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n2)CONSTANT_Long[5](bytes = 9)\\n3)null\\n4)CONSTANT_Long[5](bytes = 0)\\n5)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    java.lang.String str10 = constantPoolGen0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"+ "'", str10.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n"));

  }

  @Test
  public void test0909() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0909"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    int i5 = constantPoolGen0.lookupFloat((float)'4');
    int i7 = constantPoolGen0.addInteger(6);
    int i9 = constantPoolGen0.addDouble((double)6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test0910() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0910"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.addDouble((double)(byte)0);
    int i6 = constantPoolGen0.lookupLong((long)11);
    int i8 = constantPoolGen0.lookupFloat((float)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0911() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0911"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.lookupDouble((double)'#');
    int i7 = constantPoolGen0.lookupFloat(0.0f);
    int i9 = constantPoolGen0.addFloat((float)4);
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i13 = constantPoolGen0.addInteger(0);
    int i15 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i17 = constantPoolGen0.lookupClass("1)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0912() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0912"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i13 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i15 = constantPoolGen0.lookupUtf8("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0913() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0913"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen1.setConstant(9, constant5);
    int i8 = constantPoolGen1.addFloat((float)(byte)0);
    int i12 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Double[6](bytes = 10.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1/0)\\n8)null\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_Methodref[10](class_index = 9, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test0914() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0914"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant3 = constantPoolGen1.getConstant(0);
    int i5 = constantPoolGen1.addLong(10L);
    org.apache.bcel.generic.MethodGen methodGen6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = constantPoolGen1.addMethodref(methodGen6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0915() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0915"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i5 = constantPoolGen1.lookupInteger((int)(byte)-1);
    int i7 = constantPoolGen1.lookupFloat((-1.0f));
    int i11 = constantPoolGen1.addMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256/0)\\n4)null\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0916() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0916"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.addClass("");
    java.lang.String str5 = constantPoolGen2.toString();
    int i7 = constantPoolGen2.lookupInteger((int)(short)1);
    int i9 = constantPoolGen2.addLong((long)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test0917() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0917"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i3 = constantPoolGen0.addFloat(10.0f);
    int i5 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(13);
    int i9 = constantPoolGen0.lookupInteger(260);
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0918() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0918"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);

  }

  @Test
  public void test0919() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0919"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addLong((long)(byte)100);
    java.lang.String str4 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant7 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen1.setConstant(256, constant7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1)CONSTANT_Long[5](bytes = 100)\n2)null\n"+ "'", str4.equals("1)CONSTANT_Long[5](bytes = 100)\n2)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);

  }

  @Test
  public void test0920() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0920"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.addClass("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i6 = constantPoolGen0.lookupInteger(5);
    int i8 = constantPoolGen0.lookupFloat((float)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0921() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0921"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addDouble((double)'a');
    java.lang.String str9 = constantPoolGen1.toString();
    int i11 = constantPoolGen1.lookupDouble((double)21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0922() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0922"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i6 = constantPoolGen1.lookupNameAndType("hi!", "hi!");
    int i7 = constantPoolGen1.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test0923() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0923"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i9 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Float[4](bytes = -1.0)\n");
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen0.getConstant(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);

  }

  @Test
  public void test0924() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0924"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i4 = constantPoolGen1.lookupNameAndType("", "");
    int i6 = constantPoolGen1.lookupInteger((int)' ');
    int i8 = constantPoolGen1.addDouble((double)10.0f);
    int i10 = constantPoolGen1.lookupDouble((double)265);
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen1.getConstantPool();
    int i13 = constantPoolGen1.addDouble(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0925() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0925"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)10);
    int i5 = constantPoolGen1.addDouble((double)10L);
    org.apache.bcel.classfile.ConstantPool constantPool6 = constantPoolGen1.getFinalConstantPool();
    int i8 = constantPoolGen1.addString("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    java.lang.String str9 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n4)CONSTANT_String[8](string_index = 3)\n"+ "'", str9.equals("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n4)CONSTANT_String[8](string_index = 3)\n"));

  }

  @Test
  public void test0926() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0926"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n");
    int i9 = constantPoolGen0.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0927() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0927"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen3.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i11 = constantPoolGen3.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen3.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0928() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0928"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i6 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = -1.0)\n4)null\n");
    int i8 = constantPoolGen0.lookupInteger(257);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0929() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0929"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.lookupInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen9 = new org.apache.bcel.generic.ConstantPoolGen(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);

  }

  @Test
  public void test0930() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0930"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    int i6 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i8 = constantPoolGen1.lookupInteger(261);
    int i11 = constantPoolGen1.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.lookupMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0931() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0931"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i8 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n");
    int i12 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i14 = constantPoolGen0.lookupDouble(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test0932() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0932"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addDouble((double)100);
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    org.apache.bcel.classfile.Constant constant8 = null;
    constantPoolGen0.setConstant(0, constant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0933() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0933"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupUtf8("hi!");
    java.lang.String str6 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool7 = constantPoolGen1.getFinalConstantPool();
    int i11 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 5)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n");
    org.apache.bcel.generic.MethodGen methodGen12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.lookupInterfaceMethodref(methodGen12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);

  }

  @Test
  public void test0934() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0934"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen7 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen8 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i11 = constantPoolGen8.lookupNameAndType("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 2, signature_index = 3)\n", "1)CONSTANT_Float[4](bytes = 10.0)\n");
    int i13 = constantPoolGen8.addFloat((float)260);
    org.apache.bcel.classfile.ConstantPool constantPool14 = constantPoolGen8.getConstantPool();
    int i16 = constantPoolGen8.addInteger(263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test0935() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0935"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addDouble((double)' ');
    int i5 = constantPoolGen1.lookupDouble((double)1L);
    int i7 = constantPoolGen1.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i11 = constantPoolGen1.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0936() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0936"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i8 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Integer[3](bytes = -1)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i10 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n");
    int i12 = constantPoolGen0.addDouble((double)320);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 9);

  }

  @Test
  public void test0937() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0937"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constantPool1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen2.getFinalConstantPool();
    int i5 = constantPoolGen2.lookupLong((long)(byte)10);
    int i9 = constantPoolGen2.addMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1/0)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 261);

  }

  @Test
  public void test0938() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0938"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    int i8 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Float[4](bytes = 16.0)\n2)CONSTANT_Long[5](bytes = 19)\n3)null\n", "1)CONSTANT_Long[5](bytes = 10)\n2)null\n");
    int i12 = constantPoolGen0.addMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 10/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test0939() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0939"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    int i4 = constantPoolGen1.addDouble((double)1);
    int i6 = constantPoolGen1.lookupFloat(100.0f);
    int i8 = constantPoolGen1.addDouble((double)'a');
    int i10 = constantPoolGen1.addUtf8("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\n6)CONSTANT_String[8](string_index = 5)\n");
    java.lang.String str11 = constantPoolGen1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\\n6)CONSTANT_String[8](string_index = 5)\\n\")\n"+ "'", str11.equals("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n\")\\n6)CONSTANT_String[8](string_index = 5)\\n\")\n"));

  }

  @Test
  public void test0940() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0940"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    int i4 = constantPoolGen1.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen1.getFinalConstantPool();
    int i7 = constantPoolGen1.addFloat(100.0f);
    int i8 = constantPoolGen1.getSize();
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.lookupInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test0941() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0941"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    int i8 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Integer[3](bytes = 32)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Integer[3](bytes = 52)\n");
    int i10 = constantPoolGen0.addLong((long)(byte)0);
    int i12 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0942() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0942"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addString("");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i8 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 9)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    org.apache.bcel.classfile.ConstantPool constantPool9 = constantPoolGen0.getFinalConstantPool();
    int i11 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i13 = constantPoolGen0.lookupClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 11.0)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 7)\n");
    org.apache.bcel.classfile.Constant constant15 = null;
    // The following exception was thrown during execution in test generation
    try {
    constantPoolGen0.setConstant(265, constant15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0943() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0943"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.addInteger(257);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.addInteger(260);
    int i9 = constantPoolGen0.lookupFloat((float)(byte)100);
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen11 = new org.apache.bcel.generic.ConstantPoolGen(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);

  }

  @Test
  public void test0944() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0944"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addInteger(256);
    java.lang.String str8 = constantPoolGen0.toString();
    int i12 = constantPoolGen0.lookupFieldref("1)CONSTANT_Float[4](bytes = 10.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n");
    int i14 = constantPoolGen0.addInteger(18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test0945() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0945"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen0.getConstant(2);
    int i9 = constantPoolGen0.addLong((long)7);
    int i13 = constantPoolGen0.lookupFieldref("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 18)\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0946() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0946"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n", "hi!", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i6 = constantPoolGen0.addLong((long)100);
    int i8 = constantPoolGen0.addLong((long)(short)10);
    int i12 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = -1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 16);

  }

  @Test
  public void test0947() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0947"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addLong((long)(short)1);
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant((int)(byte)10);
    int i5 = constantPoolGen0.getSize();
    int i7 = constantPoolGen0.addDouble((double)'4');
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Double[6](bytes = 97.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i13 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Integer[3](bytes = 264)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 12);

  }

  @Test
  public void test0948() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0948"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.Constant constant5 = null;
    constantPoolGen3.setConstant((int)(short)0, constant5);
    int i7 = constantPoolGen3.getSize();
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n");
    int i13 = constantPoolGen3.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i15 = constantPoolGen3.lookupUtf8("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.classfile.Constant constant16 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen17 = new org.apache.bcel.generic.ConstantPoolGen();
    int i19 = constantPoolGen17.addDouble((double)(short)1);
    int i22 = constantPoolGen17.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i24 = constantPoolGen17.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i26 = constantPoolGen17.lookupFloat((float)6);
    int i28 = constantPoolGen17.addDouble((double)269);
    // The following exception was thrown during execution in test generation
    try {
    int i29 = constantPoolGen3.addConstant(constant16, constantPoolGen17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 3);

  }

  @Test
  public void test0949() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0949"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    java.lang.String str3 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.lookupInteger((int)(short)1);
    int i7 = constantPoolGen0.lookupDouble((double)4);
    int i9 = constantPoolGen0.lookupInteger((int)(byte)100);
    int i11 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n");
    int i15 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str3.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 7);

  }

  @Test
  public void test0950() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0950"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    int i5 = constantPoolGen1.lookupDouble((double)14);
    int i8 = constantPoolGen1.lookupNameAndType("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Float[4](bytes = 11.0)\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addInterfaceMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0951() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0951"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    int i6 = constantPoolGen0.addFloat((float)(byte)100);
    int i10 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i12 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Double[6](bytes = 256.0)\\n4)null\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Integer[3](bytes = 5)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);

  }

  @Test
  public void test0952() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0952"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addInteger(2);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "");
    int i11 = constantPoolGen0.lookupFloat((float)'a');
    int i13 = constantPoolGen0.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i17 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n");
    int i19 = constantPoolGen0.lookupFloat((float)320);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test0953() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0953"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i5 = constantPoolGen0.addFieldref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n");
    int i11 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.Constant constant13 = constantPoolGen0.getConstant((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant13);

  }

  @Test
  public void test0954() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0954"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    java.lang.String str2 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupDouble(0.0d);
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i7 = constantPoolGen0.lookupLong((long)(short)10);
    int i9 = constantPoolGen0.addInteger(0);
    int i11 = constantPoolGen0.addLong((long)'a');
    int i13 = constantPoolGen0.lookupLong((long)269);
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen0.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0955() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0955"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n");
    org.apache.bcel.generic.MethodGen methodGen5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i6 = constantPoolGen0.lookupMethodref(methodGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test0956() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0956"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i4 = constantPoolGen0.lookupInteger((-1));
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    int i9 = constantPoolGen0.addMethodref("1)null\n", "1)CONSTANT_Float[4](bytes = 100.0)\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Double[6](bytes = 0.0)\n4)null\n");
    org.apache.bcel.generic.ObjectType objectType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i11 = constantPoolGen0.addClass(objectType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test0957() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0957"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i5 = constantPoolGen0.addInteger((int)'#');
    int i7 = constantPoolGen0.addInteger(0);
    org.apache.bcel.classfile.ConstantPool constantPool8 = constantPoolGen0.getFinalConstantPool();
    int i10 = constantPoolGen0.lookupUtf8("");
    int i14 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Integer[3](bytes = 257)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Float[4](bytes = -1.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 9);

  }

  @Test
  public void test0958() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0958"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n");
    int i9 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n");
    org.apache.bcel.classfile.Constant constant11 = constantPoolGen0.getConstant(19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant11);

  }

  @Test
  public void test0959() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0959"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    int i8 = constantPoolGen4.lookupMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n2)CONSTANT_Double[6](bytes = 100.0)\\n3)null\\n\")\n5)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n", "1)CONSTANT_Utf8[1](\"\")\n", "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0960() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0960"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i4 = constantPoolGen2.lookupDouble((double)10);
    int i6 = constantPoolGen2.addUtf8("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i8 = constantPoolGen2.addLong((long)0);
    int i10 = constantPoolGen2.lookupLong((long)267);
    int i12 = constantPoolGen2.lookupFloat((float)264);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0961() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0961"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addString("");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i6 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 97.0)\n3)null\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_String[8](string_index = 4)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test0962() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0962"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i6 = constantPoolGen0.lookupLong(0L);
    int i8 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Float[4](bytes = 0.0)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1/0)\\n2)null\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n");
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n", "", "1)CONSTANT_Float[4](bytes = 100.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0963() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0963"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n");
    int i5 = constantPoolGen1.lookupInteger(267);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test0964() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0964"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addInteger((int)(byte)1);
    int i5 = constantPoolGen1.lookupInteger((int)'4');
    int i9 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    org.apache.bcel.classfile.ConstantPool constantPool10 = constantPoolGen1.getFinalConstantPool();
    int i12 = constantPoolGen1.lookupInteger((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0965() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0965"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str3 = constantPoolGen2.toString();
    int i6 = constantPoolGen2.addNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i10 = constantPoolGen2.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n", "1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Double[6](bytes = 256.0)\n4)null\n", "1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 259.0)\n");
    org.apache.bcel.generic.MethodGen methodGen11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i12 = constantPoolGen2.lookupInterfaceMethodref(methodGen11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test0966() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0966"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addLong((long)(short)10);
    int i9 = constantPoolGen1.addInterfaceMethodref("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i11 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 35)\\n2)CONSTANT_Integer[3](bytes = 2)\\n3)CONSTANT_Long[5](bytes = 0)\\n4)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 100)\\n2)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n");
    int i15 = constantPoolGen1.addInterfaceMethodref("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n\")\n6)CONSTANT_Class[7](name_index = 5)\n7)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n\")\n8)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"\")\\n257)CONSTANT_String[8](string_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\\n259)CONSTANT_Class[7](name_index = 258)\\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\\n\")\n9)CONSTANT_NameAndType[12](name_index = 7, signature_index = 8)\n10)CONSTANT_InterfaceMethodref[11](class_index = 6, name_and_type_index = 9)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 16);

  }

  @Test
  public void test0967() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0967"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addClass("hi!");
    int i4 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n");
    int i7 = constantPoolGen0.addNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "hi!");
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool11 = constantPoolGen0.getConstantPool();
    int i15 = constantPoolGen0.addInterfaceMethodref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    int i17 = constantPoolGen0.addLong((long)19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 13);

  }

  @Test
  public void test0968() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0968"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    java.lang.String str3 = constantPoolGen2.toString();
    int i5 = constantPoolGen2.addUtf8("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i7 = constantPoolGen2.lookupLong((long)0);
    int i9 = constantPoolGen2.lookupDouble(0.0d);
    int i13 = constantPoolGen2.addMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_String[8](string_index = 4)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 32)\\n2)CONSTANT_Double[6](bytes = 97.0)\\n3)null\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n5)CONSTANT_String[8](string_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 7);

  }

  @Test
  public void test0969() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0969"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i5 = constantPoolGen0.addInteger(0);
    int i7 = constantPoolGen0.addInteger(256);
    java.lang.String str8 = constantPoolGen0.toString();
    int i10 = constantPoolGen0.addLong((long)273);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n"+ "'", str8.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 0)\n4)CONSTANT_Integer[3](bytes = 256)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test0970() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0970"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i5 = constantPoolGen0.addFloat((float)(short)100);
    int i7 = constantPoolGen0.addString("1)CONSTANT_Integer[3](bytes = 9)\n2)CONSTANT_Integer[3](bytes = -1)\n");
    int i10 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test0971() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0971"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i9 = constantPoolGen5.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i11 = constantPoolGen5.lookupClass("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0972() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0972"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupFloat((float)6);
    int i5 = constantPoolGen0.addLong((long)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test0973() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0973"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    java.lang.String str2 = constantPoolGen1.toString();
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen4 = new org.apache.bcel.generic.ConstantPoolGen(constantPool3);
    java.lang.String str5 = constantPoolGen4.toString();
    int i9 = constantPoolGen4.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n");
    int i11 = constantPoolGen4.lookupClass("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    int i13 = constantPoolGen4.lookupLong((long)6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"+ "'", str5.equals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test0974() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0974"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i4 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "hi!");
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getFinalConstantPool();
    int i7 = constantPoolGen0.lookupClass("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n");
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Double[6](bytes = -1.0)\n8)null\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i13 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i15 = constantPoolGen0.lookupInteger(0);
    java.lang.String str16 = constantPoolGen0.toString();
    int i18 = constantPoolGen0.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"+ "'", str16.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\\n7)CONSTANT_Double[6](bytes = -1.0)\\n8)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test0975() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0975"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.Constant constant4 = constantPoolGen0.getConstant(7);
    int i7 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    org.apache.bcel.classfile.Constant constant9 = constantPoolGen0.getConstant((int)(short)100);
    int i11 = constantPoolGen0.lookupLong((long)261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0976() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0976"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(-1));
    int i6 = constantPoolGen1.getSize();
    int i8 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = 97)\n4)null\n");
    org.apache.bcel.generic.MethodGen methodGen9 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i10 = constantPoolGen1.addMethodref(methodGen9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0977() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0977"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i12 = constantPoolGen1.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_String[8](string_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    int i13 = constantPoolGen1.getSize();
    org.apache.bcel.generic.MethodGen methodGen14 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i15 = constantPoolGen1.addMethodref(methodGen14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);

  }

  @Test
  public void test0978() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0978"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addUtf8("");
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i6 = constantPoolGen5.getSize();
    int i7 = constantPoolGen5.getSize();
    int i9 = constantPoolGen5.addDouble((double)100.0f);
    int i11 = constantPoolGen5.lookupDouble((double)272);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 256);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0979() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0979"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    int i6 = constantPoolGen1.lookupString("1)CONSTANT_Integer[3](bytes = 9)\n");
    int i10 = constantPoolGen1.addMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i12 = constantPoolGen1.lookupString("1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0980() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0980"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.addClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n");
    org.apache.bcel.generic.ObjectType objectType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen0.addClass(objectType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test0981() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0981"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    org.apache.bcel.classfile.ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
    int i5 = constantPoolGen0.addMethodref("hi!", "", "1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i9 = constantPoolGen0.addMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n", "", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i13 = constantPoolGen0.addMethodref("", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n", "");
    int i15 = constantPoolGen0.addFloat((float)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 16);

  }

  @Test
  public void test0982() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0982"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.addFloat((float)0L);
    org.apache.bcel.classfile.ConstantPool constantPool4 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen(constantPool4);
    int i7 = constantPoolGen5.lookupUtf8("1)CONSTANT_Integer[3](bytes = 32)\n");
    org.apache.bcel.generic.MethodGen methodGen8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i9 = constantPoolGen5.addMethodref(methodGen8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test0983() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0983"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    java.lang.String str5 = constantPoolGen0.toString();
    int i7 = constantPoolGen0.lookupDouble(0.0d);
    int i9 = constantPoolGen0.lookupLong((long)9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Integer[3](bytes = 9)\n"+ "'", str5.equals("1)CONSTANT_Integer[3](bytes = 9)\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test0984() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0984"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.classfile.Constant constant4 = null;
    constantPoolGen1.setConstant(0, constant4);
    int i7 = constantPoolGen1.lookupDouble(0.0d);
    int i10 = constantPoolGen1.lookupNameAndType("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n3)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n");
    int i11 = constantPoolGen1.getSize();
    org.apache.bcel.generic.ObjectType objectType12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i13 = constantPoolGen1.addClass(objectType12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test0985() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0985"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n");
    int i6 = constantPoolGen0.addNameAndType("", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Class[7](name_index = 2)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\n");
    org.apache.bcel.generic.MethodGen methodGen7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i8 = constantPoolGen0.addInterfaceMethodref(methodGen7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);

  }

  @Test
  public void test0986() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0986"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i3 = constantPoolGen1.lookupLong((long)261);
    int i5 = constantPoolGen1.addFloat((float)(short)100);
    int i7 = constantPoolGen1.addDouble((double)14);
    int i8 = constantPoolGen1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test0987() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0987"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i9 = constantPoolGen3.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n257)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n258)CONSTANT_NameAndType[12](name_index = 256, signature_index = 257)\n");
    int i11 = constantPoolGen3.lookupClass("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i13 = constantPoolGen3.addLong((long)4);
    int i16 = constantPoolGen3.addNameAndType("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_String[8](string_index = 2)\n4)CONSTANT_Integer[3](bytes = 100)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 7);

  }

  @Test
  public void test0988() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0988"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.addUtf8("1)CONSTANT_Double[6](bytes = 10.0)\n2)null\n");
    int i7 = constantPoolGen0.lookupFieldref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n", "1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"hi!\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n");
    int i11 = constantPoolGen0.addInterfaceMethodref("1)CONSTANT_Long[5](bytes = 100)\n2)null\n3)CONSTANT_Float[4](bytes = 0.0)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Double[6](bytes = 262.0)\n5)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 1.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 7);

  }

  @Test
  public void test0989() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0989"); }

    org.apache.bcel.classfile.Constant constant0 = null;
    org.apache.bcel.classfile.Constant[] constant_array1 = new org.apache.bcel.classfile.Constant[] { constant0 };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen2 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constant_array1);
    int i5 = constantPoolGen3.lookupDouble(0.0d);
    int i7 = constantPoolGen3.lookupInteger((int)(byte)-1);
    int i9 = constantPoolGen3.addLong((long)258);
    int i11 = constantPoolGen3.lookupFloat((float)(short)1);
    int i15 = constantPoolGen3.lookupFieldref("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Utf8[1](\"\")\n257)CONSTANT_String[8](string_index = 256)\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 1)\\n\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\\n\")\n259)CONSTANT_Class[7](name_index = 258)\n260)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n261)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n\")\n262)CONSTANT_NameAndType[12](name_index = 260, signature_index = 261)\n263)CONSTANT_Fieldref[9](class_index = 259, name_and_type_index = 262)\n", "1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n4)CONSTANT_Utf8[1](\"\")\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n6)CONSTANT_NameAndType[12](name_index = 4, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 3, name_and_type_index = 6)\n8)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n9)CONSTANT_Class[7](name_index = 8)\n10)CONSTANT_NameAndType[12](name_index = 8, signature_index = 2)\n11)CONSTANT_InterfaceMethodref[11](class_index = 9, name_and_type_index = 10)\n", "1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 2)\\n2)null\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\\n7)CONSTANT_Class[7](name_index = 6)\\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\\n\")\n3)CONSTANT_String[8](string_index = 2)\n");
    int i17 = constantPoolGen3.lookupFloat((float)22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test0990() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0990"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupString("1)CONSTANT_Long[5](bytes = 100)\n2)null\n");
    org.apache.bcel.classfile.ConstantPool constantPool3 = constantPoolGen0.getFinalConstantPool();
    int i4 = constantPoolGen0.getSize();
    org.apache.bcel.classfile.ConstantPool constantPool5 = constantPoolGen0.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen6 = new org.apache.bcel.generic.ConstantPoolGen(constantPool5);
    int i10 = constantPoolGen6.lookupMethodref("1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "", "");
    int i14 = constantPoolGen6.addMethodref("1)CONSTANT_Long[5](bytes = 10)\n2)null\n", "hi!", "1)CONSTANT_Integer[3](bytes = 35)\n");
    int i16 = constantPoolGen6.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n");
    int i20 = constantPoolGen6.addMethodref("1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Long[5](bytes = 0)\n4)null\n", "1)CONSTANT_Integer[3](bytes = 32)\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n4)CONSTANT_Long[5](bytes = 12)\n5)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i21 = constantPoolGen6.getSize();
    org.apache.bcel.generic.MethodGen methodGen22 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i23 = constantPoolGen6.addMethodref(methodGen22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 261);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 263);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 269);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 270);

  }

  @Test
  public void test0991() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0991"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.lookupDouble((double)100.0f);
    int i6 = constantPoolGen0.addMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "");
    int i8 = constantPoolGen0.addClass("1)CONSTANT_Double[6](bytes = 1.0)\n2)null\n");
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Float[4](bytes = 10.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
    int i16 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Long[5](bytes = 2)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32.0)\\n2)null\\n3)CONSTANT_Integer[3](bytes = 0)\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\\n\")\n4)CONSTANT_Float[4](bytes = 32.0)\n", "1)CONSTANT_Integer[3](bytes = 35)\n", "1)CONSTANT_Utf8[1](\"1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n6)null\\n7)null\\n8)null\\n9)null\\n10)null\\n11)null\\n12)null\\n13)null\\n14)null\\n15)null\\n16)null\\n17)null\\n18)null\\n19)null\\n20)null\\n21)null\\n22)null\\n23)null\\n24)null\\n25)null\\n26)null\\n27)null\\n28)null\\n29)null\\n30)null\\n31)null\\n32)null\\n33)null\\n34)null\\n35)null\\n36)null\\n37)null\\n38)null\\n39)null\\n40)null\\n41)null\\n42)null\\n43)null\\n44)null\\n45)null\\n46)null\\n47)null\\n48)null\\n49)null\\n50)null\\n51)null\\n52)null\\n53)null\\n54)null\\n55)null\\n56)null\\n57)null\\n58)null\\n59)null\\n60)null\\n61)null\\n62)null\\n63)null\\n64)null\\n65)null\\n66)null\\n67)null\\n68)null\\n69)null\\n70)null\\n71)null\\n72)null\\n73)null\\n74)null\\n75)null\\n76)null\\n77)null\\n78)null\\n79)null\\n80)null\\n81)null\\n82)null\\n83)null\\n84)null\\n85)null\\n86)null\\n87)null\\n88)null\\n89)null\\n90)null\\n91)null\\n92)null\\n93)null\\n94)null\\n95)null\\n96)null\\n97)null\\n98)null\\n99)null\\n100)null\\n101)null\\n102)null\\n103)null\\n104)null\\n105)null\\n106)null\\n107)null\\n108)null\\n109)null\\n110)null\\n111)null\\n112)null\\n113)null\\n114)null\\n115)null\\n116)null\\n117)null\\n118)null\\n119)null\\n120)null\\n121)null\\n122)null\\n123)null\\n124)null\\n125)null\\n126)null\\n127)null\\n128)null\\n129)null\\n130)null\\n131)null\\n132)null\\n133)null\\n134)null\\n135)null\\n136)null\\n137)null\\n138)null\\n139)null\\n140)null\\n141)null\\n142)null\\n143)null\\n144)null\\n145)null\\n146)null\\n147)null\\n148)null\\n149)null\\n150)null\\n151)null\\n152)null\\n153)null\\n154)null\\n155)null\\n156)null\\n157)null\\n158)null\\n159)null\\n160)null\\n161)null\\n162)null\\n163)null\\n164)null\\n165)null\\n166)null\\n167)null\\n168)null\\n169)null\\n170)null\\n171)null\\n172)null\\n173)null\\n174)null\\n175)null\\n176)null\\n177)null\\n178)null\\n179)null\\n180)null\\n181)null\\n182)null\\n183)null\\n184)null\\n185)null\\n186)null\\n187)null\\n188)null\\n189)null\\n190)null\\n191)null\\n192)null\\n193)null\\n194)null\\n195)null\\n196)null\\n197)null\\n198)null\\n199)null\\n200)null\\n201)null\\n202)null\\n203)null\\n204)null\\n205)null\\n206)null\\n207)null\\n208)null\\n209)null\\n210)null\\n211)null\\n212)null\\n213)null\\n214)null\\n215)null\\n216)null\\n217)null\\n218)null\\n219)null\\n220)null\\n221)null\\n222)null\\n223)null\\n224)null\\n225)null\\n226)null\\n227)null\\n228)null\\n229)null\\n230)null\\n231)null\\n232)null\\n233)null\\n234)null\\n235)null\\n236)null\\n237)null\\n238)null\\n239)null\\n240)null\\n241)null\\n242)null\\n243)null\\n244)null\\n245)null\\n246)null\\n247)null\\n248)null\\n249)null\\n250)null\\n251)null\\n252)null\\n253)null\\n254)null\\n255)null\\n256)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = 0/0)\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_Class[7](name_index = 2)\\n\")\\n257)CONSTANT_Class[7](name_index = 256)\\n258)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n2)CONSTANT_Float[4](bytes = 0.0)\\n3)CONSTANT_Integer[3](bytes = 52)\\n\")\\n259)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\\n260)CONSTANT_NameAndType[12](name_index = 258, signature_index = 259)\\n261)CONSTANT_Fieldref[9](class_index = 257, name_and_type_index = 260)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test0992() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0992"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger(9);
    int i4 = constantPoolGen0.lookupDouble((double)100.0f);
    int i8 = constantPoolGen0.lookupFieldref("", "1)CONSTANT_Long[5](bytes = 1)\n2)null\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i10 = constantPoolGen0.lookupFloat((float)(-1));
    int i12 = constantPoolGen0.addInteger(261);
    org.apache.bcel.classfile.ConstantPool constantPool13 = constantPoolGen0.getConstantPool();
    int i15 = constantPoolGen0.addClass("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n256)CONSTANT_Double[6](bytes = 8.0)\n257)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test0993() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0993"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addUtf8("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    int i4 = constantPoolGen0.addDouble((double)100);
    java.lang.String str5 = constantPoolGen0.toString();
    java.lang.String str6 = constantPoolGen0.toString();
    int i8 = constantPoolGen0.addInteger((int)'a');
    int i12 = constantPoolGen0.lookupMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Integer[3](bytes = 9)\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Integer[3](bytes = 35)\n2)CONSTANT_Integer[3](bytes = 2)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\\n4)CONSTANT_Class[7](name_index = 2)\\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 3)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n7)CONSTANT_Class[7](name_index = 6)\n8)CONSTANT_Methodref[10](class_index = 7, name_and_type_index = 5)\n9)CONSTANT_Long[5](bytes = 100)\n10)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"+ "'", str5.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"+ "'", str6.equals("1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Double[6](bytes = 100.0)\n3)null\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test0994() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0994"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    org.apache.bcel.classfile.ConstantPool constantPool2 = constantPoolGen1.getConstantPool();
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen3 = new org.apache.bcel.generic.ConstantPoolGen(constantPool2);
    int i5 = constantPoolGen3.lookupString("1)CONSTANT_Long[5](bytes = 1)\n2)null\n");
    org.apache.bcel.classfile.Constant constant7 = constantPoolGen3.getConstant(6);
    int i11 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Float[4](bytes = 0.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\\n\")\n2)CONSTANT_Utf8[1](\"\")\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 2)\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 32/0)\\n2)null\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_Class[7](name_index = 3)\\n5)CONSTANT_Utf8[1](\"\")\\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\\n\")\n5)CONSTANT_Class[7](name_index = 4)\n6)CONSTANT_Methodref[10](class_index = 5, name_and_type_index = 3)\n7)CONSTANT_Double[6](bytes = 0.0)\n8)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Class[7](name_index = 3)\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\n");
    int i15 = constantPoolGen3.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 3, signature_index = 3)\n5)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 4)\n6)CONSTANT_Long[5](bytes = 97)\n7)null\n8)CONSTANT_Float[4](bytes = -1.0)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 1.0)\\n2)null\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 5)\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Methodref[10](class_index = 4, name_and_type_index = 2)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constantPool2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test0995() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0995"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    java.lang.String str1 = constantPoolGen0.toString();
    int i3 = constantPoolGen0.lookupLong(0L);
    int i5 = constantPoolGen0.addFloat((float)16);
    int i9 = constantPoolGen0.lookupMethodref("1)CONSTANT_Double[6](bytes = 32.0)\n2)null\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"\")\n6)CONSTANT_NameAndType[12](name_index = 3, signature_index = 5)\n7)CONSTANT_InterfaceMethodref[11](class_index = 4, name_and_type_index = 6)\n", "1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\n");
    int i11 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 1)\n2)CONSTANT_Long[5](bytes = 9)\n3)null\n4)CONSTANT_Long[5](bytes = 0)\n5)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test0996() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0996"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addInteger((int)' ');
    int i4 = constantPoolGen0.lookupUtf8("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"hi!\")\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\n");
    int i6 = constantPoolGen0.lookupFloat((float)13);
    int i8 = constantPoolGen0.lookupClass("1)CONSTANT_Float[4](bytes = -1.0)\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n3)CONSTANT_Long[5](bytes = 9)\n4)null\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test0997() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0997"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i1 = constantPoolGen0.getSize();
    int i3 = constantPoolGen0.lookupLong((long)6);
    org.apache.bcel.classfile.Constant constant4 = null;
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen5 = new org.apache.bcel.generic.ConstantPoolGen();
    int i7 = constantPoolGen5.addInteger(9);
    int i9 = constantPoolGen5.lookupDouble((double)100.0f);
    int i11 = constantPoolGen5.addInteger((-1));
    int i13 = constantPoolGen5.lookupString("");
    int i17 = constantPoolGen5.addInterfaceMethodref("hi!", "1)CONSTANT_Integer[3](bytes = 9)\n", "hi!");
    // The following exception was thrown during execution in test generation
    try {
    int i18 = constantPoolGen0.addConstant(constant4, constantPoolGen5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 7);

  }

  @Test
  public void test0998() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0998"); }

    org.apache.bcel.classfile.Constant[] constant_array0 = new org.apache.bcel.classfile.Constant[] {  };
    org.apache.bcel.generic.ConstantPoolGen constantPoolGen1 = new org.apache.bcel.generic.ConstantPoolGen(constant_array0);
    int i5 = constantPoolGen1.addInterfaceMethodref("", "hi!", "hi!");
    int i7 = constantPoolGen1.addLong((long)'a');
    int i9 = constantPoolGen1.addFloat((float)(byte)-1);
    int i11 = constantPoolGen1.addFloat(0.0f);
    int i13 = constantPoolGen1.addLong((long)'#');
    int i17 = constantPoolGen1.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Long[5](bytes = -1)\n4)null\n", "1)CONSTANT_Utf8[1](\"hi!\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_NameAndType[12](name_index = 1, signature_index = 1)\\n4)CONSTANT_InterfaceMethodref[11](class_index = 2, name_and_type_index = 3)\\n\")\n4)CONSTANT_Class[7](name_index = 3)\n5)CONSTANT_Utf8[1](\"1)CONSTANT_Float[4](bytes = -1.0)\\n\")\n6)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n7)CONSTANT_NameAndType[12](name_index = 5, signature_index = 6)\n8)CONSTANT_Fieldref[9](class_index = 4, name_and_type_index = 7)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"hi!\")\\n4)CONSTANT_NameAndType[12](name_index = 1, signature_index = 3)\\n5)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n3)CONSTANT_Utf8[1](\"\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 5)\n7)CONSTANT_Integer[3](bytes = 11)\n");
    org.apache.bcel.classfile.Constant constant19 = constantPoolGen1.getConstant(23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(constant_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(constant19);

  }

  @Test
  public void test0999() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test0999"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i2 = constantPoolGen0.addDouble((double)(short)1);
    int i5 = constantPoolGen0.lookupNameAndType("1)CONSTANT_Long[5](bytes = 1)\n2)null\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Double[6](bytes = 10.0)\\n2)null\\n3)CONSTANT_Float[4](bytes = 32.0)\\n\")\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 10)\\n2)null\\n\")\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n22)null\n23)null\n24)null\n25)null\n26)null\n27)null\n28)null\n29)null\n30)null\n31)null\n32)null\n33)null\n34)null\n35)null\n36)null\n37)null\n38)null\n39)null\n40)null\n41)null\n42)null\n43)null\n44)null\n45)null\n46)null\n47)null\n48)null\n49)null\n50)null\n51)null\n52)null\n53)null\n54)null\n55)null\n56)null\n57)null\n58)null\n59)null\n60)null\n61)null\n62)null\n63)null\n64)null\n65)null\n66)null\n67)null\n68)null\n69)null\n70)null\n71)null\n72)null\n73)null\n74)null\n75)null\n76)null\n77)null\n78)null\n79)null\n80)null\n81)null\n82)null\n83)null\n84)null\n85)null\n86)null\n87)null\n88)null\n89)null\n90)null\n91)null\n92)null\n93)null\n94)null\n95)null\n96)null\n97)null\n98)null\n99)null\n100)null\n101)null\n102)null\n103)null\n104)null\n105)null\n106)null\n107)null\n108)null\n109)null\n110)null\n111)null\n112)null\n113)null\n114)null\n115)null\n116)null\n117)null\n118)null\n119)null\n120)null\n121)null\n122)null\n123)null\n124)null\n125)null\n126)null\n127)null\n128)null\n129)null\n130)null\n131)null\n132)null\n133)null\n134)null\n135)null\n136)null\n137)null\n138)null\n139)null\n140)null\n141)null\n142)null\n143)null\n144)null\n145)null\n146)null\n147)null\n148)null\n149)null\n150)null\n151)null\n152)null\n153)null\n154)null\n155)null\n156)null\n157)null\n158)null\n159)null\n160)null\n161)null\n162)null\n163)null\n164)null\n165)null\n166)null\n167)null\n168)null\n169)null\n170)null\n171)null\n172)null\n173)null\n174)null\n175)null\n176)null\n177)null\n178)null\n179)null\n180)null\n181)null\n182)null\n183)null\n184)null\n185)null\n186)null\n187)null\n188)null\n189)null\n190)null\n191)null\n192)null\n193)null\n194)null\n195)null\n196)null\n197)null\n198)null\n199)null\n200)null\n201)null\n202)null\n203)null\n204)null\n205)null\n206)null\n207)null\n208)null\n209)null\n210)null\n211)null\n212)null\n213)null\n214)null\n215)null\n216)null\n217)null\n218)null\n219)null\n220)null\n221)null\n222)null\n223)null\n224)null\n225)null\n226)null\n227)null\n228)null\n229)null\n230)null\n231)null\n232)null\n233)null\n234)null\n235)null\n236)null\n237)null\n238)null\n239)null\n240)null\n241)null\n242)null\n243)null\n244)null\n245)null\n246)null\n247)null\n248)null\n249)null\n250)null\n251)null\n252)null\n253)null\n254)null\n255)null\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Long[5](bytes = 1)\\n2)null\\n\")\n2)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\\n4)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"\")\\n2)CONSTANT_Class[7](name_index = 1)\\n3)CONSTANT_Long[5](bytes = -1)\\n4)null\\n\")\\n5)CONSTANT_NameAndType[12](name_index = 3, signature_index = 4)\\n6)CONSTANT_Class[7](name_index = 3)\\n7)CONSTANT_Methodref[10](class_index = 6, name_and_type_index = 5)\\n\")\n3)CONSTANT_Class[7](name_index = 2)\n");
    int i7 = constantPoolGen0.lookupUtf8("1)CONSTANT_Integer[3](bytes = 35)\n");
    int i9 = constantPoolGen0.lookupInteger(4);
    int i11 = constantPoolGen0.addDouble((double)100);
    int i15 = constantPoolGen0.lookupInterfaceMethodref("1)CONSTANT_Utf8[1](\"1)CONSTANT_Integer[3](bytes = 9)\\n\")\n2)CONSTANT_Class[7](name_index = 1)\n", "1)CONSTANT_Utf8[1](\"1)CONSTANT_Utf8[1](\"hi!\")\\n2)CONSTANT_Class[7](name_index = 1)\\n\")\n2)CONSTANT_String[8](string_index = 1)\n3)CONSTANT_Integer[3](bytes = 10)\n", "1)CONSTANT_Float[4](bytes = 256.0)\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test1000() throws Throwable {

    if (debug) { System.out.format("%n%s%n","Regression1Test6.test1000"); }

    org.apache.bcel.generic.ConstantPoolGen constantPoolGen0 = new org.apache.bcel.generic.ConstantPoolGen();
    int i4 = constantPoolGen0.addFieldref("", "", "hi!");
    int i6 = constantPoolGen0.lookupDouble((double)' ');
    int i8 = constantPoolGen0.lookupInteger(0);
    int i10 = constantPoolGen0.lookupFloat((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

}
